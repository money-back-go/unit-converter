--
-- PostgreSQL database dump
--

-- Dumped from database version 17.6
-- Dumped by pg_dump version 17.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: supabase_migrations; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA supabase_migrations;


ALTER SCHEMA supabase_migrations OWNER TO postgres;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: http; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS http WITH SCHEMA extensions;


--
-- Name: EXTENSION http; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION http IS 'HTTP client for PostgreSQL, allows web page retrieval inside the database.';


--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: vector; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS vector WITH SCHEMA public;


--
-- Name: EXTENSION vector; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION vector IS 'vector data type and ivfflat and hnsw access methods';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: oauth_authorization_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.oauth_authorization_status AS ENUM (
    'pending',
    'approved',
    'denied',
    'expired'
);


ALTER TYPE auth.oauth_authorization_status OWNER TO supabase_auth_admin;

--
-- Name: oauth_client_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.oauth_client_type AS ENUM (
    'public',
    'confidential'
);


ALTER TYPE auth.oauth_client_type OWNER TO supabase_auth_admin;

--
-- Name: oauth_registration_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.oauth_registration_type AS ENUM (
    'dynamic',
    'manual'
);


ALTER TYPE auth.oauth_registration_type OWNER TO supabase_auth_admin;

--
-- Name: oauth_response_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.oauth_response_type AS ENUM (
    'code'
);


ALTER TYPE auth.oauth_response_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: app_role; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.app_role AS ENUM (
    'admin',
    'moderator',
    'user'
);


ALTER TYPE public.app_role OWNER TO postgres;

--
-- Name: banner_location; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.banner_location AS ENUM (
    'home_one',
    'home_two',
    'home_three',
    'home_four'
);


ALTER TYPE public.banner_location OWNER TO postgres;

--
-- Name: billing_cycle_enum; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.billing_cycle_enum AS ENUM (
    'monthly',
    'yearly',
    'lifetime'
);


ALTER TYPE public.billing_cycle_enum OWNER TO postgres;

--
-- Name: TYPE billing_cycle_enum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE public.billing_cycle_enum IS 'Billing cycle options: monthly, yearly, lifetime';


--
-- Name: category_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.category_type AS ENUM (
    'ecommerce',
    'delivery'
);


ALTER TYPE public.category_type OWNER TO postgres;

--
-- Name: delivery_person_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.delivery_person_status AS ENUM (
    'available',
    'busy',
    'offline',
    'on_break',
    'inactive'
);


ALTER TYPE public.delivery_person_status OWNER TO postgres;

--
-- Name: delivery_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.delivery_status AS ENUM (
    'pending',
    'confirmed',
    'preparing',
    'out_for_delivery',
    'delivered',
    'failed',
    'cancelled'
);


ALTER TYPE public.delivery_status OWNER TO postgres;

--
-- Name: discount_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.discount_type AS ENUM (
    'percentage',
    'fixed',
    'free_shipping'
);


ALTER TYPE public.discount_type OWNER TO postgres;

--
-- Name: freight_calculation_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.freight_calculation_type AS ENUM (
    'fixed_price',
    'per_km',
    'per_zone',
    'free_above_value'
);


ALTER TYPE public.freight_calculation_type OWNER TO postgres;

--
-- Name: gender; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.gender AS ENUM (
    'male',
    'femaly',
    'other'
);


ALTER TYPE public.gender OWNER TO postgres;

--
-- Name: item_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.item_type AS ENUM (
    'ingredient',
    'product',
    'material'
);


ALTER TYPE public.item_type OWNER TO postgres;

--
-- Name: kitchen_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.kitchen_status AS ENUM (
    'pending',
    'preparing',
    'ready',
    'delivered',
    'cancelled'
);


ALTER TYPE public.kitchen_status OWNER TO postgres;

--
-- Name: modifier_type_enum; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.modifier_type_enum AS ENUM (
    'single_choice',
    'multiple_choice',
    'quantity_based'
);


ALTER TYPE public.modifier_type_enum OWNER TO postgres;

--
-- Name: TYPE modifier_type_enum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE public.modifier_type_enum IS 'Tipo de modificador: single_choice, multiple_choice ou quantity_based';


--
-- Name: order_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.order_status AS ENUM (
    'pending',
    'confirmed',
    'processing',
    'shipped',
    'delivered',
    'cancelled',
    'draft',
    'ready',
    'out_for_delivery'
);


ALTER TYPE public.order_status OWNER TO postgres;

--
-- Name: TYPE order_status; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE public.order_status IS 'Status do pedido/carrinho';


--
-- Name: payment_method; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.payment_method AS ENUM (
    'cash',
    'credit_card',
    'debit_card',
    'pix',
    'bank_transfer',
    'check',
    'other'
);


ALTER TYPE public.payment_method OWNER TO postgres;

--
-- Name: payment_method_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.payment_method_type AS ENUM (
    'credit_card',
    'debit_card',
    'pix',
    'boleto'
);


ALTER TYPE public.payment_method_type OWNER TO postgres;

--
-- Name: TYPE payment_method_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE public.payment_method_type IS 'Método de pagamento utilizado';


--
-- Name: payment_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.payment_status AS ENUM (
    'pending',
    'paid',
    'failed',
    'refunded'
);


ALTER TYPE public.payment_status OWNER TO postgres;

--
-- Name: TYPE payment_status; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE public.payment_status IS 'Status do pagamento';


--
-- Name: product_stock_movement_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.product_stock_movement_type AS ENUM (
    'purchase',
    'sale',
    'adjustment',
    'transfer',
    'return',
    'loss'
);


ALTER TYPE public.product_stock_movement_type OWNER TO postgres;

--
-- Name: product_type_enum; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.product_type_enum AS ENUM (
    'ecommerce',
    'delivery'
);


ALTER TYPE public.product_type_enum OWNER TO postgres;

--
-- Name: TYPE product_type_enum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE public.product_type_enum IS 'Tipo de produto: ecommerce ou delivery';


--
-- Name: product_unit_enum; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.product_unit_enum AS ENUM (
    'un',
    'kg',
    'g',
    'l',
    'ml',
    'm',
    'cm',
    'pct',
    'cx',
    'fd',
    'dz'
);


ALTER TYPE public.product_unit_enum OWNER TO postgres;

--
-- Name: TYPE product_unit_enum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE public.product_unit_enum IS 'Unidade de medida para venda do produto';


--
-- Name: selection_type_enum; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.selection_type_enum AS ENUM (
    'single',
    'multiple'
);


ALTER TYPE public.selection_type_enum OWNER TO postgres;

--
-- Name: TYPE selection_type_enum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE public.selection_type_enum IS 'Tipo de seleção: single (radio) ou multiple (checkbox/quantity)';


--
-- Name: service_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.service_type AS ENUM (
    'dine_in',
    'takeout',
    'delivery',
    'counter'
);


ALTER TYPE public.service_type OWNER TO postgres;

--
-- Name: shipping_provider_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.shipping_provider_type AS ENUM (
    'national_postal',
    'private_courier',
    'own_delivery',
    'marketplace',
    'logistics_3pl'
);


ALTER TYPE public.shipping_provider_type OWNER TO postgres;

--
-- Name: shipping_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.shipping_status AS ENUM (
    'pending',
    'processing',
    'shipped',
    'delivered',
    'cancelled'
);


ALTER TYPE public.shipping_status OWNER TO postgres;

--
-- Name: status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.status AS ENUM (
    'active',
    'inactive',
    'deleted',
    'pending',
    'archived',
    'draft'
);


ALTER TYPE public.status OWNER TO postgres;

--
-- Name: stock_movement_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.stock_movement_type AS ENUM (
    'purchase',
    'sale',
    'adjustment',
    'production',
    'loss',
    'transfer',
    'return'
);


ALTER TYPE public.stock_movement_type OWNER TO postgres;

--
-- Name: subscription_status_enum; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.subscription_status_enum AS ENUM (
    'active',
    'inactive',
    'cancelled',
    'expired',
    'trial'
);


ALTER TYPE public.subscription_status_enum OWNER TO postgres;

--
-- Name: TYPE subscription_status_enum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE public.subscription_status_enum IS 'Subscription status options: active, inactive, cancelled, expired, trial';


--
-- Name: support_level_enum; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.support_level_enum AS ENUM (
    'basic',
    'priority',
    'dedicated'
);


ALTER TYPE public.support_level_enum OWNER TO postgres;

--
-- Name: TYPE support_level_enum; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TYPE public.support_level_enum IS 'Support level options: basic, priority, dedicated';


--
-- Name: table_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.table_status AS ENUM (
    'available',
    'occupied',
    'reserved',
    'maintenance'
);


ALTER TYPE public.table_status OWNER TO postgres;

--
-- Name: transaction_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.transaction_status AS ENUM (
    'pending',
    'completed',
    'cancelled'
);


ALTER TYPE public.transaction_status OWNER TO postgres;

--
-- Name: transaction_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.transaction_type AS ENUM (
    'income',
    'expense',
    'transfer'
);


ALTER TYPE public.transaction_type OWNER TO postgres;

--
-- Name: unit_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.unit_type AS ENUM (
    'mass',
    'volume',
    'length',
    'unit',
    'other'
);


ALTER TYPE public.unit_type OWNER TO postgres;

--
-- Name: vehicle_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.vehicle_type AS ENUM (
    'motorcycle',
    'bike',
    'car',
    'scooter',
    'on_foot'
);


ALTER TYPE public.vehicle_type OWNER TO postgres;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: buckettype; Type: TYPE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TYPE storage.buckettype AS ENUM (
    'STANDARD',
    'ANALYTICS'
);


ALTER TYPE storage.buckettype OWNER TO supabase_storage_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    IF EXISTS (
      SELECT FROM pg_extension
      WHERE extname = 'pg_net'
      -- all versions in use on existing projects as of 2025-02-20
      -- version 0.12.0 onwards don't need these applied
      AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')
    ) THEN
      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    END IF;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: supabase_admin
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
begin
    raise debug 'PgBouncer auth request: %', p_usename;

    return query
    select 
        rolname::text, 
        case when rolvaliduntil < now() 
            then null 
            else rolpassword::text 
        end 
    from pg_authid 
    where rolname=$1 and rolcanlogin;
end;
$_$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO supabase_admin;

--
-- Name: apply_product_filters(uuid, uuid, text, text, text, numeric, numeric, text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid DEFAULT NULL::uuid, p_brand text DEFAULT NULL::text, p_color text DEFAULT NULL::text, p_size text DEFAULT NULL::text, p_min_price numeric DEFAULT NULL::numeric, p_max_price numeric DEFAULT NULL::numeric, p_search_term text DEFAULT NULL::text, p_limit integer DEFAULT 50, p_offset integer DEFAULT 0) RETURNS TABLE(id uuid, name_pt text, description_pt text, short_description_pt text, sku text, brand text, color text, price numeric, compare_price numeric, is_promotional boolean, promotional_price numeric, is_on_sale boolean, image_url text, product_category_id uuid, category_name text, is_featured boolean, is_best_seller boolean, available_sizes text[], total_count bigint)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        p.id,
        p.name_pt,
        p.description_pt,
        p.short_description_pt,
        p.sku,
        p.brand,
        p.color,
        COALESCE(pp.price, p.price, 0) as price,
        COALESCE(pp.compare_price, 0) as compare_price,
        COALESCE(pp.is_promotional, false) as is_promotional,
        COALESCE(pp.promotional_price, 0) as promotional_price,
        COALESCE(pp.is_on_sale, false) as is_on_sale,
        p.image_url,
        p.product_category_id,
        pc.name_pt as category_name,
        p.is_featured,
        p.is_best_seller,
        ARRAY[]::TEXT[] as available_sizes,
        COUNT(*) OVER() as total_count
    FROM products p
    LEFT JOIN product_prices pp ON pp.product_id = p.id AND pp.is_promotional = false
    LEFT JOIN product_categories pc ON pc.id = p.product_category_id
    WHERE p.tenant_id = p_tenant_id
      AND p.is_active = true
      AND p.is_published = true
      AND (p_category_id IS NULL OR p.product_category_id = p_category_id)
      AND (p_brand IS NULL OR p.brand = p_brand)
      AND (p_color IS NULL OR p.color = p_color)
      AND (p_size IS NULL OR EXISTS (
          SELECT 1 FROM product_variants pv 
          WHERE pv.product_id = p.id AND pv.size = p_size
      ))
      AND (p_min_price IS NULL OR COALESCE(pp.price, p.price, 0) >= p_min_price)
      AND (p_max_price IS NULL OR COALESCE(pp.price, p.price, 0) <= p_max_price)
      AND (p_search_term IS NULL OR (
          p.name_pt ILIKE '%' || p_search_term || '%' OR
          p.description_pt ILIKE '%' || p_search_term || '%' OR
          p.short_description_pt ILIKE '%' || p_search_term || '%' OR
          p.brand ILIKE '%' || p_search_term || '%'
      ))
    ORDER BY p.is_featured DESC, p.is_best_seller DESC, p.name_pt
    LIMIT p_limit
    OFFSET p_offset;
END;
$$;


ALTER FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_limit integer, p_offset integer) OWNER TO postgres;

--
-- Name: FUNCTION apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_limit integer, p_offset integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_limit integer, p_offset integer) IS 'Aplica filtros dinâmicos e retorna produtos filtrados com paginação';


--
-- Name: apply_product_filters(uuid, uuid, text, text, text, numeric, numeric, text, text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid DEFAULT NULL::uuid, p_brand text DEFAULT NULL::text, p_color text DEFAULT NULL::text, p_size text DEFAULT NULL::text, p_min_price numeric DEFAULT NULL::numeric, p_max_price numeric DEFAULT NULL::numeric, p_search_term text DEFAULT NULL::text, p_context_type text DEFAULT NULL::text, p_limit integer DEFAULT 50, p_offset integer DEFAULT 0) RETURNS TABLE(id uuid, name_pt text, description_pt text, short_description_pt text, sku text, brand text, color text, price numeric, compare_price numeric, is_promotional boolean, promotional_price numeric, is_on_sale boolean, image_url text, product_category_id uuid, category_name text, is_featured boolean, is_best_seller boolean, available_sizes text[], total_count bigint)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN QUERY
    WITH filtered_products AS (
        SELECT DISTINCT
            p.id,
            p.name_pt,
            p.description_pt,
            p.short_description_pt,
            p.sku,
            p.brand,
            p.color,
            COALESCE(pp.price, p.price, 0) as price,
            COALESCE(pp.compare_price, 0) as compare_price,
            COALESCE(pp.is_promotional, false) as is_promotional,
            COALESCE(pp.promotional_price, 0) as promotional_price,
            COALESCE(pp.is_on_sale, false) as is_on_sale,
            p.image_url,
            p.product_category_id,
            pc.name_pt as category_name,
            p.is_featured,
            p.is_best_seller,
            ARRAY(
                SELECT DISTINCT pv.size::text 
                FROM product_variants pv 
                WHERE pv.product_id = p.id 
                  AND pv.size IS NOT NULL 
                  AND pv.size != ''
            )::TEXT[] as available_sizes
        FROM products p
        LEFT JOIN product_prices pp ON pp.product_id = p.id AND pp.is_promotional = false
        LEFT JOIN product_categories pc ON pc.id = p.product_category_id
        WHERE p.tenant_id = p_tenant_id
          AND p.is_active = true
          AND p.is_published = true
          AND (p_category_id IS NULL OR p.product_category_id = p_category_id)
          AND (p_brand IS NULL OR p.brand = p_brand)
          AND (p_color IS NULL OR p.color = p_color)
          AND (p_size IS NULL OR EXISTS (
              SELECT 1 FROM product_variants pv 
              WHERE pv.product_id = p.id AND pv.size = p_size
          ))
          AND (p_min_price IS NULL OR COALESCE(pp.price, p.price, 0) >= p_min_price)
          AND (p_max_price IS NULL OR COALESCE(pp.price, p.price, 0) <= p_max_price)
          AND (p_search_term IS NULL OR (
              p.name_pt ILIKE '%' || p_search_term || '%' OR
              p.description_pt ILIKE '%' || p_search_term || '%' OR
              p.short_description_pt ILIKE '%' || p_search_term || '%' OR
              p.brand ILIKE '%' || p_search_term || '%'
          ))
          -- Filtros de contexto
          AND (p_context_type IS NULL OR 
              (p_context_type = 'ofertas' AND COALESCE(pp.is_on_sale, false) = true) OR
              (p_context_type = 'destaques' AND p.is_featured = true) OR
              (p_context_type = 'categoria' AND p_category_id IS NOT NULL) OR
              (p_context_type = 'marca' AND p_brand IS NOT NULL) OR
              (p_context_type = 'navbar')
          )
    ),
    total_count AS (
        SELECT COUNT(*) as count FROM filtered_products
    )
    SELECT 
        fp.id,
        fp.name_pt,
        fp.description_pt,
        fp.short_description_pt,
        fp.sku,
        fp.brand,
        fp.color,
        fp.price,
        fp.compare_price,
        fp.is_promotional,
        fp.promotional_price,
        fp.is_on_sale,
        fp.image_url,
        fp.product_category_id,
        fp.category_name,
        fp.is_featured,
        fp.is_best_seller,
        fp.available_sizes,
        tc.count as total_count
    FROM filtered_products fp
    CROSS JOIN total_count tc
    ORDER BY fp.is_featured DESC, fp.is_best_seller DESC, fp.name_pt
    LIMIT p_limit
    OFFSET p_offset;
END;
$$;


ALTER FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_limit integer, p_offset integer) OWNER TO postgres;

--
-- Name: apply_product_filters(uuid, uuid, text, text, text, numeric, numeric, text, text, text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid DEFAULT NULL::uuid, p_brand text DEFAULT NULL::text, p_color text DEFAULT NULL::text, p_size text DEFAULT NULL::text, p_min_price numeric DEFAULT NULL::numeric, p_max_price numeric DEFAULT NULL::numeric, p_search_term text DEFAULT NULL::text, p_context_type text DEFAULT NULL::text, p_sort_by text DEFAULT 'relevance'::text, p_limit integer DEFAULT 20, p_offset integer DEFAULT 0) RETURNS TABLE(id uuid, name_pt text, description_pt text, short_description_pt text, sku text, brand text, color text, price numeric, compare_price numeric, is_promotional boolean, promotional_price numeric, is_on_sale boolean, image_url text, product_category_id uuid, category_name text, is_featured boolean, is_best_seller boolean, created_at timestamp with time zone, available_sizes text[], total_count bigint)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN QUERY
    WITH filtered_products AS (
        SELECT DISTINCT
            p.id,
            p.name_pt,
            p.description_pt,
            p.short_description_pt,
            p.sku,
            p.brand,
            p.color,
            p.price as price,
            0::NUMERIC as compare_price,
            FALSE as is_promotional,
            0::NUMERIC as promotional_price,
            FALSE as is_on_sale,
            p.image_url,
            p.product_category_id,
            pc.name_pt as category_name,
            p.is_featured,
            p.is_best_seller,
            p.created_at,
            ARRAY(
                SELECT DISTINCT pv.size::text 
                FROM product_variants pv 
                WHERE pv.product_id = p.id 
                  AND pv.size IS NOT NULL 
                  AND pv.size != ''
            )::TEXT[] as available_sizes
        FROM products p
        LEFT JOIN product_categories pc ON pc.id = p.product_category_id
        WHERE p.tenant_id = p_tenant_id
          AND p.is_active = true
          AND p.is_published = true
          AND (p_category_id IS NULL OR p.product_category_id = p_category_id)
          AND (p_brand IS NULL OR p.brand = p_brand)
          AND (p_color IS NULL OR p.color = p_color)
          AND (p_size IS NULL OR EXISTS (
              SELECT 1 FROM product_variants pv 
              WHERE pv.product_id = p.id AND pv.size = p_size
          ))
          AND (p_min_price IS NULL OR p.price >= p_min_price)
          AND (p_max_price IS NULL OR p.price <= p_max_price)
          AND (p_search_term IS NULL OR (
              p.name_pt ILIKE '%' || p_search_term || '%' OR
              p.description_pt ILIKE '%' || p_search_term || '%' OR
              p.short_description_pt ILIKE '%' || p_search_term || '%' OR
              p.brand ILIKE '%' || p_search_term || '%'
          ))
          -- Filtros de contexto
          AND (p_context_type IS NULL OR 
              (p_context_type = 'ofertas' AND false = true) OR  -- Temporariamente desabilitado
              (p_context_type = 'destaques' AND p.is_featured = true) OR
              (p_context_type = 'categoria' AND p_category_id IS NOT NULL) OR
              (p_context_type = 'marca' AND p_brand IS NOT NULL) OR
              (p_context_type = 'navbar')
          )
    ),
    total_count AS (
        SELECT COUNT(*) as count FROM filtered_products
    )
    SELECT 
        fp.id,
        fp.name_pt,
        fp.description_pt,
        fp.short_description_pt,
        fp.sku,
        fp.brand,
        fp.color,
        fp.price,
        fp.compare_price,
        fp.is_promotional,
        fp.promotional_price,
        fp.is_on_sale,
        fp.image_url,
        fp.product_category_id,
        fp.category_name,
        fp.is_featured,
        fp.is_best_seller,
        fp.created_at,
        fp.available_sizes,
        tc.count as total_count
    FROM filtered_products fp
    CROSS JOIN total_count tc
    ORDER BY 
        CASE WHEN p_sort_by = 'relevance' THEN 
            CASE 
                WHEN fp.is_featured THEN 1
                WHEN fp.is_best_seller THEN 2
                ELSE 3
            END
        END DESC,
        CASE WHEN p_sort_by = 'newest' THEN fp.created_at END DESC,
        CASE WHEN p_sort_by = 'best_sellers' THEN fp.is_best_seller END DESC,
        CASE WHEN p_sort_by = 'price_asc' THEN fp.price END ASC,
        CASE WHEN p_sort_by = 'price_desc' THEN fp.price END DESC,
        CASE WHEN p_sort_by = 'discount' THEN 0 END DESC,  -- Temporariamente desabilitado
        fp.is_featured DESC,
        fp.is_best_seller DESC,
        fp.name_pt ASC
    LIMIT p_limit
    OFFSET p_offset;
END;
$$;


ALTER FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_sort_by text, p_limit integer, p_offset integer) OWNER TO postgres;

--
-- Name: FUNCTION apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_sort_by text, p_limit integer, p_offset integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_sort_by text, p_limit integer, p_offset integer) IS 'Aplica filtros dinâmicos e retorna produtos filtrados com paginação e ordenação';


--
-- Name: calculate_order_total_from_items(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.calculate_order_total_from_items() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_order_id UUID;
  items_total NUMERIC(10,2);
  modifiers_total NUMERIC(10,2);
BEGIN
  -- Determinar order_id baseado na operação
  IF TG_OP = 'DELETE' THEN
    v_order_id := OLD.order_id;
  ELSE
    v_order_id := NEW.order_id;
  END IF;
  
  -- Calcular total dos itens
  SELECT COALESCE(SUM(total_price), 0)
  INTO items_total
  FROM order_items
  WHERE order_id = v_order_id;
  
  -- Calcular total dos modificadores de todos os itens
  SELECT COALESCE(SUM(oim.total_price), 0)
  INTO modifiers_total
  FROM order_item_modifiers oim
  INNER JOIN order_items oi ON oim.order_item_id = oi.id
  WHERE oi.order_id = v_order_id;
  
  -- Atualizar total do pedido
  UPDATE orders
  SET total_amount = items_total + modifiers_total + COALESCE(shipping_amount, 0) - COALESCE(discount_amount, 0)
  WHERE id = v_order_id;
  
  RETURN COALESCE(NEW, OLD);
END;
$$;


ALTER FUNCTION public.calculate_order_total_from_items() OWNER TO postgres;

--
-- Name: FUNCTION calculate_order_total_from_items(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.calculate_order_total_from_items() IS 'Recalcula automaticamente o total do pedido quando itens são alterados';


--
-- Name: calculate_order_total_from_modifiers(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.calculate_order_total_from_modifiers() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_order_id UUID;
  items_total NUMERIC(10,2);
  modifiers_total NUMERIC(10,2);
BEGIN
  -- Buscar order_id através do order_item
  IF TG_OP = 'DELETE' THEN
    SELECT order_id INTO v_order_id 
    FROM order_items WHERE id = OLD.order_item_id;
  ELSE
    SELECT order_id INTO v_order_id 
    FROM order_items WHERE id = NEW.order_item_id;
  END IF;
  
  -- Calcular total dos itens
  SELECT COALESCE(SUM(total_price), 0)
  INTO items_total
  FROM order_items
  WHERE order_id = v_order_id;
  
  -- Calcular total dos modificadores
  SELECT COALESCE(SUM(oim.total_price), 0)
  INTO modifiers_total
  FROM order_item_modifiers oim
  INNER JOIN order_items oi ON oim.order_item_id = oi.id
  WHERE oi.order_id = v_order_id;
  
  -- Atualizar total do pedido
  UPDATE orders
  SET total_amount = items_total + modifiers_total + COALESCE(shipping_amount, 0) - COALESCE(discount_amount, 0)
  WHERE id = v_order_id;
  
  RETURN COALESCE(NEW, OLD);
END;
$$;


ALTER FUNCTION public.calculate_order_total_from_modifiers() OWNER TO postgres;

--
-- Name: FUNCTION calculate_order_total_from_modifiers(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.calculate_order_total_from_modifiers() IS 'Recalcula automaticamente o total do pedido quando modificadores são alterados';


--
-- Name: calculate_product_cost(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.calculate_product_cost(p_product_id uuid) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  v_total_cost NUMERIC(10, 2) := 0;
  v_composition RECORD;
  v_ingredient_unit_cost NUMERIC(10, 4);
  v_conversion_factor NUMERIC(10, 4) := 1;
BEGIN
  -- Somar o custo de todos os ingredientes ativos
  FOR v_composition IN 
    SELECT 
      pc.quantity,
      pc.unit_id as composition_unit_id,
      i.unit_cost,
      i.unit_id as ingredient_unit_id
    FROM product_ingredient_compositions pc
    INNER JOIN ingredients i ON i.id = pc.ingredient_id
    WHERE pc.product_id = p_product_id
      AND pc.is_active = true
      AND i.is_active = true
  LOOP
    v_ingredient_unit_cost := v_composition.unit_cost;
    
    -- Aplicar fator de conversão se as unidades forem diferentes
    -- (simplificado - em produção, implementar conversão completa)
    IF v_composition.composition_unit_id != v_composition.ingredient_unit_id THEN
      -- Exemplo: kg para g = 1000
      -- Por simplicidade, assumir mesma unidade ou conversão manual
      v_conversion_factor := 1;
    END IF;
    
    -- Adicionar ao custo total
    v_total_cost := v_total_cost + (v_composition.quantity * v_ingredient_unit_cost * v_conversion_factor);
  END LOOP;
  
  RETURN v_total_cost;
END;
$$;


ALTER FUNCTION public.calculate_product_cost(p_product_id uuid) OWNER TO postgres;

--
-- Name: FUNCTION calculate_product_cost(p_product_id uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.calculate_product_cost(p_product_id uuid) IS 'Calcula o custo total de um produto baseado nos ingredientes';


--
-- Name: calculate_product_weighted_average_cost(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.calculate_product_weighted_average_cost(p_product_id uuid) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_weighted_cost NUMERIC(15, 6);
  v_total_quantity INTEGER;
  v_total_value NUMERIC(15, 2);
BEGIN
  -- Calcular custo médio ponderado baseado nos lotes ativos
  SELECT 
    COALESCE(SUM(current_quantity * unit_cost), 0),
    COALESCE(SUM(current_quantity), 0)
  INTO v_total_value, v_total_quantity
  FROM product_stock_batches
  WHERE product_id = p_product_id
    AND is_active = true
    AND current_quantity > 0;
  
  -- Retornar custo médio ponderado
  IF v_total_quantity > 0 THEN
    v_weighted_cost := v_total_value / v_total_quantity;
    RETURN ROUND(v_weighted_cost, 2);
  ELSE
    RETURN 0;
  END IF;
END;
$$;


ALTER FUNCTION public.calculate_product_weighted_average_cost(p_product_id uuid) OWNER TO postgres;

--
-- Name: calculate_weighted_average_cost(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.calculate_weighted_average_cost(p_ingredient_id uuid) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_total_value NUMERIC(15, 6) := 0;
  v_total_quantity NUMERIC(15, 6) := 0;
  v_avg_cost NUMERIC(10, 6);
BEGIN
  SELECT 
    COALESCE(SUM(current_quantity * unit_cost), 0),
    COALESCE(SUM(current_quantity), 0)
  INTO v_total_value, v_total_quantity
  FROM stock_batches
  WHERE ingredient_id = p_ingredient_id
    AND is_active = true
    AND current_quantity > 0;
  
  IF v_total_quantity > 0 THEN
    v_avg_cost := v_total_value / v_total_quantity;
  ELSE
    v_avg_cost := 0;
  END IF;
  
  RETURN v_avg_cost;
END;
$$;


ALTER FUNCTION public.calculate_weighted_average_cost(p_ingredient_id uuid) OWNER TO postgres;

--
-- Name: FUNCTION calculate_weighted_average_cost(p_ingredient_id uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.calculate_weighted_average_cost(p_ingredient_id uuid) IS 'Calcula custo médio ponderado baseado nos lotes';


--
-- Name: check_entity_exists(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.check_entity_exists() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.entity_type = 'news' THEN
    IF NOT EXISTS (SELECT 1 FROM news WHERE id = NEW.entity_id) THEN
      RAISE EXCEPTION 'Referenced news does not exist';
    END IF;
  ELSIF NEW.entity_type = 'events' THEN
    IF NOT EXISTS (SELECT 1 FROM events WHERE id = NEW.entity_id) THEN
      RAISE EXCEPTION 'Referenced event does not exist';
    END IF;
  ELSIF NEW.entity_type = 'offices' THEN
    IF NOT EXISTS (SELECT 1 FROM offices WHERE id = NEW.entity_id) THEN
      RAISE EXCEPTION 'Referenced office does not exist';
    END IF;
  ELSIF NEW.entity_type = 'products' THEN
    IF NOT EXISTS (SELECT 1 FROM products WHERE id = NEW.entity_id) THEN
      RAISE EXCEPTION 'Referenced product does not exist';
    END IF;
  ELSE
    RAISE EXCEPTION 'Invalid entity_type: %', NEW.entity_type;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.check_entity_exists() OWNER TO postgres;

--
-- Name: check_modifier_availability(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.check_modifier_availability(modifier_uuid uuid) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  modifier_record RECORD;
  ingredient_stock DECIMAL(10,3);
  required_quantity DECIMAL(10,3);
BEGIN
  -- Buscar dados do modificador
  SELECT 
    pm.id,
    pm.use_ingredient_stock,
    pm.ingredient_id,
    pm.ingredient_quantity,
    pm.ingredient_unit_id,
    pm.is_active,
    pm.is_available
  INTO modifier_record
  FROM product_modifiers pm
  WHERE pm.id = modifier_uuid;

  -- Se modificador não existe ou não está ativo/disponível
  IF NOT FOUND OR NOT modifier_record.is_active OR NOT modifier_record.is_available THEN
    RETURN FALSE;
  END IF;

  -- Se não usa estoque de ingrediente, retorna disponível
  IF NOT modifier_record.use_ingredient_stock THEN
    RETURN TRUE;
  END IF;

  -- Se usa estoque mas não tem ingrediente associado, retorna indisponível
  IF modifier_record.ingredient_id IS NULL THEN
    RETURN FALSE;
  END IF;

  -- Calcular estoque disponível do ingrediente
  SELECT COALESCE(SUM(
    CASE 
      WHEN sm.movement_type = 'in' THEN sm.quantity
      WHEN sm.movement_type = 'out' THEN -sm.quantity
      ELSE 0
    END
  ), 0)
  INTO ingredient_stock
  FROM stock_movements sm
  WHERE sm.ingredient_id = modifier_record.ingredient_id
    AND sm.is_active = TRUE;

  -- Se não há estoque, retorna indisponível
  IF ingredient_stock <= 0 THEN
    RETURN FALSE;
  END IF;

  -- Se a quantidade requerida é maior que o estoque disponível
  required_quantity := COALESCE(modifier_record.ingredient_quantity, 1.0);
  IF required_quantity > ingredient_stock THEN
    RETURN FALSE;
  END IF;

  RETURN TRUE;
END;
$$;


ALTER FUNCTION public.check_modifier_availability(modifier_uuid uuid) OWNER TO postgres;

--
-- Name: cleanup_expired_drafts(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.cleanup_expired_drafts() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  DELETE FROM orders 
  WHERE is_draft = true 
    AND draft_expires_at IS NOT NULL
    AND draft_expires_at < now();
  
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  
  RAISE NOTICE 'Drafts expirados removidos: %', deleted_count;
  RETURN deleted_count;
END;
$$;


ALTER FUNCTION public.cleanup_expired_drafts() OWNER TO postgres;

--
-- Name: FUNCTION cleanup_expired_drafts(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.cleanup_expired_drafts() IS 'Remove drafts expirados. Executar diariamente via cron job.';


--
-- Name: cleanup_old_notifications(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.cleanup_old_notifications(p_days_old integer DEFAULT 90) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    rows_affected INTEGER;
BEGIN
    DELETE FROM public.notifications
    WHERE created_at < NOW() - INTERVAL '1 day' * p_days_old
      AND is_active = false;
    
    GET DIAGNOSTICS rows_affected = ROW_COUNT;
    RETURN rows_affected;
END;
$$;


ALTER FUNCTION public.cleanup_old_notifications(p_days_old integer) OWNER TO postgres;

--
-- Name: consume_product_stock_fifo(uuid, integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.consume_product_stock_fifo(p_product_id uuid, p_quantity integer, p_notes text DEFAULT NULL::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_remaining_quantity INTEGER;
  v_batch RECORD;
  v_consume_from_batch INTEGER;
BEGIN
  v_remaining_quantity := p_quantity;
  
  -- Consumir dos lotes mais antigos primeiro (FIFO)
  FOR v_batch IN
    SELECT id, current_quantity, unit_cost
    FROM product_stock_batches
    WHERE product_id = p_product_id
      AND is_active = true
      AND current_quantity > 0
    ORDER BY purchase_date ASC, created_at ASC
  LOOP
    EXIT WHEN v_remaining_quantity <= 0;
    
    -- Quanto consumir deste lote
    v_consume_from_batch := LEAST(v_remaining_quantity, v_batch.current_quantity);
    
    -- Atualizar quantidade do lote
    UPDATE product_stock_batches
    SET current_quantity = current_quantity - v_consume_from_batch,
        updated_at = now()
    WHERE id = v_batch.id;
    
    -- Registrar movimentação de saída
    INSERT INTO product_stock_movements (
      product_id, movement_type, quantity, unit_cost,
      total_cost, notes, movement_date
    )
    VALUES (
      p_product_id, 'sale', -v_consume_from_batch, v_batch.unit_cost,
      -(v_consume_from_batch * v_batch.unit_cost), p_notes, now()
    );
    
    v_remaining_quantity := v_remaining_quantity - v_consume_from_batch;
  END LOOP;
  
  -- Atualizar quantidade em estoque do produto
  UPDATE product_stock
  SET quantity = quantity - p_quantity,
      updated_at = now()
  WHERE product_id = p_product_id;
  
  -- Se ainda sobrou quantidade (estoque insuficiente)
  IF v_remaining_quantity > 0 THEN
    RAISE NOTICE 'Estoque insuficiente! Faltam % unidades', v_remaining_quantity;
  END IF;
END;
$$;


ALTER FUNCTION public.consume_product_stock_fifo(p_product_id uuid, p_quantity integer, p_notes text) OWNER TO postgres;

--
-- Name: consume_stock_fifo(uuid, numeric, uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.consume_stock_fifo(p_ingredient_id uuid, p_quantity numeric, p_product_id uuid DEFAULT NULL::uuid, p_notes text DEFAULT NULL::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_remaining_quantity NUMERIC(10, 4);
  v_batch RECORD;
  v_consume_from_batch NUMERIC(10, 4);
BEGIN
  v_remaining_quantity := p_quantity;
  
  -- Consumir dos lotes mais antigos primeiro (FIFO)
  FOR v_batch IN
    SELECT id, current_quantity, unit_id, unit_cost
    FROM stock_batches
    WHERE ingredient_id = p_ingredient_id
      AND is_active = true
      AND current_quantity > 0
    ORDER BY purchase_date ASC, created_at ASC
  LOOP
    EXIT WHEN v_remaining_quantity <= 0;
    
    -- Quanto consumir deste lote
    v_consume_from_batch := LEAST(v_remaining_quantity, v_batch.current_quantity);
    
    -- Atualizar quantidade do lote
    UPDATE stock_batches
    SET current_quantity = current_quantity - v_consume_from_batch,
        updated_at = now()
    WHERE id = v_batch.id;
    
    -- Registrar movimentação de saída
    INSERT INTO stock_movements (
      ingredient_id, movement_type, quantity, unit_id, unit_cost,
      total_cost, product_id, notes, movement_date
    )
    VALUES (
      p_ingredient_id, 'production', -v_consume_from_batch, v_batch.unit_id,
      v_batch.unit_cost, -(v_consume_from_batch * v_batch.unit_cost),
      p_product_id, p_notes, now()
    );
    
    v_remaining_quantity := v_remaining_quantity - v_consume_from_batch;
  END LOOP;
  
  -- Atualizar quantidade em estoque do ingrediente
  UPDATE ingredients
  SET stock_quantity = stock_quantity - p_quantity,
      updated_at = now()
  WHERE id = p_ingredient_id;
  
  -- Se ainda sobrou quantidade (estoque insuficiente)
  IF v_remaining_quantity > 0 THEN
    RAISE NOTICE 'Estoque insuficiente! Faltam % unidades', v_remaining_quantity;
  END IF;
END;
$$;


ALTER FUNCTION public.consume_stock_fifo(p_ingredient_id uuid, p_quantity numeric, p_product_id uuid, p_notes text) OWNER TO postgres;

--
-- Name: FUNCTION consume_stock_fifo(p_ingredient_id uuid, p_quantity numeric, p_product_id uuid, p_notes text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.consume_stock_fifo(p_ingredient_id uuid, p_quantity numeric, p_product_id uuid, p_notes text) IS 'Consome estoque usando FIFO (First In, First Out)';


--
-- Name: convert_purchase_to_ingredient_unit(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.convert_purchase_to_ingredient_unit() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
  v_ingredient_unit_id uuid;
  v_converted_quantity numeric;
  v_converted_cost numeric;
BEGIN
  -- Buscar unidade do ingrediente
  SELECT unit_id INTO v_ingredient_unit_id
  FROM ingredients
  WHERE id = NEW.ingredient_id;
  
  -- Se a unidade da compra for diferente da unidade do ingrediente
  IF NEW.unit_id != v_ingredient_unit_id THEN
    -- Converter quantidade (ex: 5 kg → 5000 g)
    v_converted_quantity := convert_unit(
      NEW.quantity, 
      NEW.unit_id, 
      v_ingredient_unit_id
    );
    
    -- Converter custo unitário (ex: R$ 50/kg → R$ 0,05/g)
    v_converted_cost := NEW.unit_cost / convert_unit(
      1.0, 
      NEW.unit_id, 
      v_ingredient_unit_id
    );
    
    -- Atualizar valores convertidos
    NEW.quantity := v_converted_quantity;
    NEW.unit_id := v_ingredient_unit_id;
    NEW.unit_cost := v_converted_cost;
  END IF;
  
  RETURN NEW;
END;
$_$;


ALTER FUNCTION public.convert_purchase_to_ingredient_unit() OWNER TO postgres;

--
-- Name: convert_unit(numeric, uuid, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.convert_unit(quantity numeric, from_unit_id uuid, to_unit_id uuid) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  v_from_factor numeric;
  v_to_factor numeric;
  v_from_type unit_type;
  v_to_type unit_type;
BEGIN
  -- Se as unidades são iguais, retornar sem conversão
  IF from_unit_id = to_unit_id THEN
    RETURN quantity;
  END IF;
  
  -- Buscar fatores de conversão e tipos
  SELECT conversion_factor, type INTO v_from_factor, v_from_type
  FROM measurement_units WHERE id = from_unit_id;
  
  SELECT conversion_factor, type INTO v_to_factor, v_to_type
  FROM measurement_units WHERE id = to_unit_id;
  
  -- Verificar se são do mesmo tipo
  IF v_from_type != v_to_type THEN
    RAISE EXCEPTION 'Não é possível converter entre tipos diferentes: % e %', v_from_type, v_to_type;
  END IF;
  
  -- Converter: quantidade em unidade_origem × fator_origem ÷ fator_destino
  RETURN quantity * v_from_factor / v_to_factor;
END;
$$;


ALTER FUNCTION public.convert_unit(quantity numeric, from_unit_id uuid, to_unit_id uuid) OWNER TO postgres;

--
-- Name: create_notification_for_tenant(uuid, text, text, character varying, character varying, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_notification_for_tenant(p_tenant_id uuid, p_title text, p_content text, p_notification_type character varying DEFAULT 'general'::character varying, p_priority character varying DEFAULT 'normal'::character varying, p_big_image text DEFAULT NULL::text, p_url text DEFAULT NULL::text, p_param_name text DEFAULT NULL::text, p_item_id text DEFAULT NULL::text) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_notification_id UUID;
BEGIN
    -- Criar a notificação
    INSERT INTO public.notifications (
        tenant_id,
        title,
        content,
        notification_type,
        priority,
        big_image,
        url,
        param_name,
        item_id
    ) VALUES (
        p_tenant_id,
        p_title,
        p_content,
        p_notification_type,
        p_priority,
        p_big_image,
        p_url,
        p_param_name,
        p_item_id
    )
    RETURNING id INTO v_notification_id;
    
    -- Criar destinatários para todos os usuários
    -- IMPORTANTE: Ajuste esta query conforme sua estrutura de dados
    -- Opções:
    -- 1. Se tiver tabela user_tenant: WHERE user_id IN (SELECT user_id FROM user_tenant WHERE tenant_id = p_tenant_id)
    -- 2. Se tiver coluna tenant_id em users: WHERE tenant_id = p_tenant_id
    -- 3. Por enquanto, cria para todos os usuários:
    INSERT INTO public.notification_recipients (notification_id, user_id)
    SELECT v_notification_id, au.id
    FROM auth.users au
    WHERE au.id IS NOT NULL;
    
    RETURN v_notification_id;
END;
$$;


ALTER FUNCTION public.create_notification_for_tenant(p_tenant_id uuid, p_title text, p_content text, p_notification_type character varying, p_priority character varying, p_big_image text, p_url text, p_param_name text, p_item_id text) OWNER TO postgres;

--
-- Name: create_notification_for_user(uuid, uuid, text, text, character varying, character varying, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_notification_for_user(p_tenant_id uuid, p_user_id uuid, p_title text, p_content text, p_notification_type character varying DEFAULT 'general'::character varying, p_priority character varying DEFAULT 'normal'::character varying, p_big_image text DEFAULT NULL::text, p_url text DEFAULT NULL::text, p_param_name text DEFAULT NULL::text, p_item_id text DEFAULT NULL::text) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_notification_id UUID;
BEGIN
    -- Criar a notificação
    INSERT INTO public.notifications (
        tenant_id,
        title,
        content,
        notification_type,
        priority,
        big_image,
        url,
        param_name,
        item_id
    ) VALUES (
        p_tenant_id,
        p_title,
        p_content,
        p_notification_type,
        p_priority,
        p_big_image,
        p_url,
        p_param_name,
        p_item_id
    )
    RETURNING id INTO v_notification_id;
    
    -- Criar destinatário para o usuário específico
    INSERT INTO public.notification_recipients (notification_id, user_id)
    VALUES (v_notification_id, p_user_id);
    
    RETURN v_notification_id;
END;
$$;


ALTER FUNCTION public.create_notification_for_user(p_tenant_id uuid, p_user_id uuid, p_title text, p_content text, p_notification_type character varying, p_priority character varying, p_big_image text, p_url text, p_param_name text, p_item_id text) OWNER TO postgres;

--
-- Name: decrement_cash_register_amount(uuid, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.decrement_cash_register_amount(p_session_id uuid, p_amount numeric) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  UPDATE cash_register_sessions
  SET expected_amount = expected_amount - p_amount,
      updated_at = now()
  WHERE id = p_session_id;
END;
$$;


ALTER FUNCTION public.decrement_cash_register_amount(p_session_id uuid, p_amount numeric) OWNER TO postgres;

--
-- Name: FUNCTION decrement_cash_register_amount(p_session_id uuid, p_amount numeric); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.decrement_cash_register_amount(p_session_id uuid, p_amount numeric) IS 'Decrementa o valor esperado do caixa (sangrias)';


--
-- Name: ensure_single_default_address(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.ensure_single_default_address() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.is_default = true THEN
    UPDATE user_address 
    SET is_default = false 
    WHERE user_id = NEW.user_id 
      AND id != NEW.id;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.ensure_single_default_address() OWNER TO postgres;

--
-- Name: ensure_single_default_language(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.ensure_single_default_language() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.is_default = true THEN
    UPDATE public.languages 
    SET is_default = false 
    WHERE id != NEW.id AND is_default = true;
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.ensure_single_default_language() OWNER TO postgres;

--
-- Name: ensure_single_primary_vehicle(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.ensure_single_primary_vehicle() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.is_primary = true THEN
    -- Desmarcar outros veículos como principais
    UPDATE delivery_person_vehicles
    SET is_primary = false
    WHERE delivery_person_id = NEW.delivery_person_id
      AND id != NEW.id
      AND is_primary = true;
  END IF;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.ensure_single_primary_vehicle() OWNER TO postgres;

--
-- Name: generate_order_number_manual(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.generate_order_number_manual(order_id uuid) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
DECLARE
  new_order_number TEXT;
  year_prefix TEXT;
  counter INTEGER;
BEGIN
  year_prefix := to_char(now(), 'YYYY');
  
  SELECT COALESCE(
    MAX(CAST(SUBSTRING(order_number FROM '[0-9]+$') AS INTEGER)), 0
  ) INTO counter
  FROM orders
  WHERE order_number LIKE year_prefix || '-%' AND order_number IS NOT NULL;
  
  counter := counter + 1;
  new_order_number := year_prefix || '-' || LPAD(counter::TEXT, 6, '0');
  
  UPDATE orders 
  SET order_number = new_order_number 
  WHERE id = order_id;
  
  RETURN new_order_number;
END;
$_$;


ALTER FUNCTION public.generate_order_number_manual(order_id uuid) OWNER TO postgres;

--
-- Name: generate_ticket_code(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.generate_ticket_code() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
    timestamp_part TEXT;
    random_part TEXT;
    ticket_code TEXT;
BEGIN
    -- Usar timestamp atual (últimos 8 dígitos dos milissegundos)
    timestamp_part := EXTRACT(EPOCH FROM NOW())::BIGINT::TEXT;
    timestamp_part := RIGHT(timestamp_part, 8);
    
    -- Adicionar parte aleatória (3 dígitos)
    random_part := LPAD((RANDOM() * 999)::INTEGER::TEXT, 3, '0');
    
    -- Combinar para formar o código
    ticket_code := 'TKT-' || timestamp_part || random_part;
    
    -- Verificar se já existe (muito improvável, mas por segurança)
    WHILE EXISTS (SELECT 1 FROM public.support_tickets WHERE id = ticket_code) LOOP
        random_part := LPAD((RANDOM() * 999)::INTEGER::TEXT, 3, '0');
        ticket_code := 'TKT-' || timestamp_part || random_part;
    END LOOP;
    
    RETURN ticket_code;
END;
$$;


ALTER FUNCTION public.generate_ticket_code() OWNER TO postgres;

--
-- Name: get_active_business_types(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_active_business_types() RETURNS TABLE(id uuid, code character varying, name_pt character varying, name_en character varying, name_es character varying, description_pt text, description_en text, description_es text, icon character varying, color character varying, features jsonb, sort_order integer)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    bt.id,
    bt.code,
    bt.name_pt,
    bt.name_en,
    bt.name_es,
    bt.description_pt,
    bt.description_en,
    bt.description_es,
    bt.icon,
    bt.color,
    bt.features,
    bt.sort_order
  FROM business_types bt
  WHERE bt.is_active = true
  ORDER BY bt.sort_order, bt.name_pt;
END;
$$;


ALTER FUNCTION public.get_active_business_types() OWNER TO postgres;

--
-- Name: FUNCTION get_active_business_types(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_active_business_types() IS 'Get all active business types ordered by sort_order';


--
-- Name: get_base_unit(public.unit_type); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_base_unit(p_unit_type public.unit_type) RETURNS uuid
    LANGUAGE plpgsql STABLE
    AS $$
DECLARE
  v_base_unit_id uuid;
BEGIN
  SELECT id INTO v_base_unit_id
  FROM measurement_units
  WHERE type = p_unit_type 
    AND conversion_factor = 1.0
  LIMIT 1;
  
  RETURN v_base_unit_id;
END;
$$;


ALTER FUNCTION public.get_base_unit(p_unit_type public.unit_type) OWNER TO postgres;

--
-- Name: get_billing_address(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_billing_address(user_uuid uuid) RETURNS TABLE(id uuid, created_at timestamp with time zone, title text, address text, number text, complement text, district text, city text, state text, zip_code text, lat text, lng text, user_id uuid, "default" boolean, billing boolean)
    LANGUAGE sql SECURITY DEFINER
    AS $$
    SELECT 
        id,
        created_at,
        title,
        address,
        number,
        complement,
        district,
        city,
        state,
        zip_code,
        lat,
        lng,
        user_id,
        "default",
        billing
    FROM public.user_address 
    WHERE user_id = user_uuid 
    AND billing = true
    LIMIT 1;
$$;


ALTER FUNCTION public.get_billing_address(user_uuid uuid) OWNER TO postgres;

--
-- Name: get_business_type(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_business_type(code_param character varying) RETURNS TABLE(id uuid, code character varying, name_pt character varying, name_en character varying, name_es character varying, description_pt text, description_en text, description_es text, icon character varying, color character varying, features jsonb, is_active boolean, sort_order integer)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    bt.id,
    bt.code,
    bt.name_pt,
    bt.name_en,
    bt.name_es,
    bt.description_pt,
    bt.description_en,
    bt.description_es,
    bt.icon,
    bt.color,
    bt.features,
    bt.is_active,
    bt.sort_order
  FROM business_types bt
  WHERE bt.code = code_param
  AND bt.is_active = true;
END;
$$;


ALTER FUNCTION public.get_business_type(code_param character varying) OWNER TO postgres;

--
-- Name: FUNCTION get_business_type(code_param character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_business_type(code_param character varying) IS 'Get business type details by code';


--
-- Name: get_company_vehicles_by_tenant(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_company_vehicles_by_tenant(p_tenant_id uuid) RETURNS TABLE(id uuid, tenant_id uuid, vehicle_type public.vehicle_type, vehicle_plate character varying, vehicle_model character varying, vehicle_color character varying, vehicle_year integer, registration_number character varying, registration_expiry date, has_insurance boolean, insurance_company character varying, insurance_policy character varying, insurance_expiry date, last_maintenance_date date, next_maintenance_date date, maintenance_notes text, odometer_reading integer, is_active boolean, is_available boolean, current_delivery_person_id uuid, acquisition_cost numeric, acquisition_date date, monthly_cost numeric, notes text, photos jsonb, created_at timestamp with time zone, updated_at timestamp with time zone)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  -- Verificar se o usuário tem permissão para ver veículos deste tenant
  IF NOT EXISTS (
    SELECT 1 FROM public.tenant_users tu
    WHERE tu.tenant_id = p_tenant_id
      AND tu.user_id = auth.uid()
      AND tu.role IN ('admin', 'owner', 'manager', 'employee')
  ) THEN
    RAISE EXCEPTION 'Acesso negado: usuário não pertence a este tenant';
  END IF;

  -- Retornar veículos do tenant
  RETURN QUERY
  SELECT 
    cv.id,
    cv.tenant_id,
    cv.vehicle_type,
    cv.vehicle_plate,
    cv.vehicle_model,
    cv.vehicle_color,
    cv.vehicle_year,
    cv.registration_number,
    cv.registration_expiry,
    cv.has_insurance,
    cv.insurance_company,
    cv.insurance_policy,
    cv.insurance_expiry,
    cv.last_maintenance_date,
    cv.next_maintenance_date,
    cv.maintenance_notes,
    cv.odometer_reading,
    cv.is_active,
    cv.is_available,
    cv.current_delivery_person_id,
    cv.acquisition_cost,
    cv.acquisition_date,
    cv.monthly_cost,
    cv.notes,
    cv.photos,
    cv.created_at,
    cv.updated_at
  FROM public.company_vehicles cv
  WHERE cv.tenant_id = p_tenant_id
  ORDER BY cv.created_at DESC;
END;
$$;


ALTER FUNCTION public.get_company_vehicles_by_tenant(p_tenant_id uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_company_vehicles_by_tenant(p_tenant_id uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_company_vehicles_by_tenant(p_tenant_id uuid) IS 'Busca veículos de um tenant específico, verificando permissão do usuário. Usa SECURITY DEFINER para evitar problemas de RLS recursivo.';


--
-- Name: get_current_tenant_id(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_current_tenant_id() RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN (
    SELECT tenant_id 
    FROM user_profile 
    WHERE user_id = auth.uid()
  );
END;
$$;


ALTER FUNCTION public.get_current_tenant_id() OWNER TO postgres;

--
-- Name: get_current_user_role(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_current_user_role() RETURNS public.app_role
    LANGUAGE sql STABLE SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
  SELECT role FROM public.user_roles WHERE user_id = auth.uid() LIMIT 1
$$;


ALTER FUNCTION public.get_current_user_role() OWNER TO postgres;

--
-- Name: get_default_address(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_default_address(user_uuid uuid) RETURNS TABLE(id uuid, created_at timestamp with time zone, title text, address text, number text, complement text, district text, city text, state text, zip_code text, lat text, lng text, user_id uuid, "default" boolean, billing boolean)
    LANGUAGE sql SECURITY DEFINER
    AS $$
    SELECT 
        id,
        created_at,
        title,
        address,
        number,
        complement,
        district,
        city,
        state,
        zip_code,
        lat,
        lng,
        user_id,
        "default",
        billing
    FROM public.user_address 
    WHERE user_id = user_uuid 
    AND "default" = true
    LIMIT 1;
$$;


ALTER FUNCTION public.get_default_address(user_uuid uuid) OWNER TO postgres;

--
-- Name: get_filter_options(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_filter_options(p_tenant_id uuid) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
DECLARE
    sizes_result JSON := '[]'::json;
    colors_result JSON := '[]'::json;
    brands_result JSON := '[]'::json;
    categories_result JSON := '[]'::json;
    price_ranges_result JSON := '[]'::json;
    final_result JSON;
BEGIN
    -- Buscar tamanhos
    SELECT json_agg(
        json_build_object(
            'value', size_value,
            'label', size_value,
            'count', size_count
        )
    )
    INTO sizes_result
    FROM (
        SELECT pv.size as size_value, COUNT(*) as size_count
        FROM product_variants pv
        JOIN products p ON p.id = pv.product_id
        WHERE p.tenant_id = p_tenant_id
          AND p.is_active = true
          AND p.is_published = true
          AND pv.size IS NOT NULL
          AND pv.size != ''
        GROUP BY pv.size
        ORDER BY pv.size
    ) sizes;

    -- Buscar cores
    SELECT json_agg(
        json_build_object(
            'value', color_value,
            'label', color_value,
            'count', color_count
        )
    )
    INTO colors_result
    FROM (
        SELECT p.color as color_value, COUNT(*) as color_count
        FROM products p
        WHERE p.tenant_id = p_tenant_id
          AND p.is_active = true
          AND p.is_published = true
          AND p.color IS NOT NULL
          AND p.color != ''
        GROUP BY p.color
        ORDER BY p.color
    ) colors;

    -- Buscar marcas
    SELECT json_agg(
        json_build_object(
            'value', brand_value,
            'label', brand_value,
            'count', brand_count
        )
    )
    INTO brands_result
    FROM (
        SELECT p.brand as brand_value, COUNT(*) as brand_count
        FROM products p
        WHERE p.tenant_id = p_tenant_id
          AND p.is_active = true
          AND p.is_published = true
          AND p.brand IS NOT NULL
          AND p.brand != ''
        GROUP BY p.brand
        ORDER BY p.brand
    ) brands;

    -- Buscar categorias
    SELECT json_agg(
        json_build_object(
            'value', category_id::text,
            'label', category_name,
            'count', category_count
        )
    )
    INTO categories_result
    FROM (
        SELECT pc.id as category_id, pc.name_pt as category_name, COUNT(p.id) as category_count
        FROM product_categories pc
        LEFT JOIN products p ON p.product_category_id = pc.id
        WHERE pc.tenant_id = p_tenant_id
          AND pc.is_active = true
          AND (p.id IS NULL OR (p.is_active = true AND p.is_published = true))
        GROUP BY pc.id, pc.name_pt
        HAVING COUNT(p.id) > 0
        ORDER BY pc.sort_order, pc.name_pt
    ) categories;

    -- Buscar faixas de preço
    SELECT json_agg(
        json_build_object(
            'min', price_min,
            'max', price_max,
            'label', price_label,
            'count', price_count
        )
    )
    INTO price_ranges_result
    FROM (
        SELECT 
            CASE 
                WHEN p.price < 10 THEN 0
                WHEN p.price < 25 THEN 10
                WHEN p.price < 50 THEN 25
                WHEN p.price < 100 THEN 50
                WHEN p.price < 200 THEN 100
                ELSE 200
            END as price_min,
            CASE 
                WHEN p.price < 10 THEN 9.99
                WHEN p.price < 25 THEN 24.99
                WHEN p.price < 50 THEN 49.99
                WHEN p.price < 100 THEN 99.99
                WHEN p.price < 200 THEN 199.99
                ELSE 999.99
            END as price_max,
            CASE 
                WHEN p.price < 10 THEN 'Até R$ 10'
                WHEN p.price < 25 THEN 'R$ 10 - R$ 25'
                WHEN p.price < 50 THEN 'R$ 25 - R$ 50'
                WHEN p.price < 100 THEN 'R$ 50 - R$ 100'
                WHEN p.price < 200 THEN 'R$ 100 - R$ 200'
                ELSE 'Acima de R$ 200'
            END as price_label,
            COUNT(*) as price_count
        FROM products p
        WHERE p.tenant_id = p_tenant_id
          AND p.is_active = true
          AND p.is_published = true
          AND p.price > 0
        GROUP BY 
            CASE 
                WHEN p.price < 10 THEN 0
                WHEN p.price < 25 THEN 10
                WHEN p.price < 50 THEN 25
                WHEN p.price < 100 THEN 50
                WHEN p.price < 200 THEN 100
                ELSE 200
            END,
            CASE 
                WHEN p.price < 10 THEN 9.99
                WHEN p.price < 25 THEN 24.99
                WHEN p.price < 50 THEN 49.99
                WHEN p.price < 100 THEN 99.99
                WHEN p.price < 200 THEN 199.99
                ELSE 999.99
            END,
            CASE 
                WHEN p.price < 10 THEN 'Até R$ 10'
                WHEN p.price < 25 THEN 'R$ 10 - R$ 25'
                WHEN p.price < 50 THEN 'R$ 25 - R$ 50'
                WHEN p.price < 100 THEN 'R$ 50 - R$ 100'
                WHEN p.price < 200 THEN 'R$ 100 - R$ 200'
                ELSE 'Acima de R$ 200'
            END
        ORDER BY price_min
    ) price_ranges;

    -- Construir resultado final
    final_result := json_build_object(
        'sizes', COALESCE(sizes_result, '[]'::json),
        'colors', COALESCE(colors_result, '[]'::json),
        'brands', COALESCE(brands_result, '[]'::json),
        'categories', COALESCE(categories_result, '[]'::json),
        'price_ranges', COALESCE(price_ranges_result, '[]'::json)
    );
    
    RETURN final_result;
END;
$_$;


ALTER FUNCTION public.get_filter_options(p_tenant_id uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_filter_options(p_tenant_id uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_filter_options(p_tenant_id uuid) IS 'Retorna opções de filtros dinâmicos baseadas nos produtos ativos do tenant';


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: user_settings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_settings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    tenant_id uuid,
    notifications_orders boolean DEFAULT true,
    notifications_promotions boolean DEFAULT true,
    notifications_offers boolean DEFAULT false,
    dark_mode boolean DEFAULT false,
    app_sounds boolean DEFAULT true,
    vibration boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.user_settings OWNER TO postgres;

--
-- Name: TABLE user_settings; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.user_settings IS 'Configurações e preferências do usuário';


--
-- Name: COLUMN user_settings.notifications_orders; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_settings.notifications_orders IS 'Receber notificações de pedidos';


--
-- Name: COLUMN user_settings.notifications_promotions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_settings.notifications_promotions IS 'Receber notificações de promoções';


--
-- Name: COLUMN user_settings.notifications_offers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_settings.notifications_offers IS 'Receber ofertas personalizadas';


--
-- Name: COLUMN user_settings.dark_mode; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_settings.dark_mode IS 'Ativar modo escuro';


--
-- Name: COLUMN user_settings.app_sounds; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_settings.app_sounds IS 'Reproduzir sons do app';


--
-- Name: COLUMN user_settings.vibration; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_settings.vibration IS 'Ativar vibração';


--
-- Name: get_or_create_user_settings(uuid, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_or_create_user_settings(p_user_id uuid, p_tenant_id uuid) RETURNS public.user_settings
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_settings public.user_settings;
BEGIN
    -- Tentar buscar configurações existentes
    SELECT * INTO v_settings
    FROM public.user_settings
    WHERE user_id = p_user_id AND tenant_id = p_tenant_id;
    
    -- Se não existir, criar com valores padrão
    IF NOT FOUND THEN
        INSERT INTO public.user_settings (user_id, tenant_id)
        VALUES (p_user_id, p_tenant_id)
        RETURNING * INTO v_settings;
    END IF;
    
    RETURN v_settings;
END;
$$;


ALTER FUNCTION public.get_or_create_user_settings(p_user_id uuid, p_tenant_id uuid) OWNER TO postgres;

--
-- Name: get_plans_by_business_type(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_plans_by_business_type(business_type_code character varying) RETURNS TABLE(id uuid, name character varying, description text, price numeric, billing_cycle public.billing_cycle_enum, features jsonb, max_tenants integer, max_products integer, max_orders_per_month integer, max_users integer, storage_limit_gb integer, api_calls_per_month integer, support_level public.support_level_enum, is_active boolean, is_popular boolean, sort_order integer, business_type character varying)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    p.id,
    p.name,
    p.description,
    p.price,
    p.billing_cycle,
    p.features,
    p.max_tenants,
    p.max_products,
    p.max_orders_per_month,
    p.max_users,
    p.storage_limit_gb,
    p.api_calls_per_month,
    p.support_level,
    p.is_active,
    p.is_popular,
    p.sort_order,
    p.business_type
  FROM plans p
  WHERE p.business_type = business_type_code
    AND p.is_active = true
  ORDER BY p.sort_order, p.price;
END;
$$;


ALTER FUNCTION public.get_plans_by_business_type(business_type_code character varying) OWNER TO postgres;

--
-- Name: FUNCTION get_plans_by_business_type(business_type_code character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_plans_by_business_type(business_type_code character varying) IS 'Get all active plans for a specific business type (updated with ENUM types)';


--
-- Name: get_popular_search_terms(uuid, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_popular_search_terms(p_tenant_id uuid, p_limit integer DEFAULT 10) RETURNS TABLE(term text, search_count integer)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        st.term,
        st.search_count
    FROM public.search_terms st
    WHERE st.tenant_id = p_tenant_id
        AND st.is_active = true
        AND length(st.term) >= 2
    ORDER BY st.search_count DESC, st.updated_at DESC
    LIMIT p_limit;
END;
$$;


ALTER FUNCTION public.get_popular_search_terms(p_tenant_id uuid, p_limit integer) OWNER TO postgres;

--
-- Name: get_product_average_rating(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_product_average_rating(product_uuid uuid) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  avg_rating numeric(3,2);
BEGIN
  SELECT COALESCE(AVG(rating), 0.00)::numeric(3,2)
  INTO avg_rating
  FROM testimonials 
  WHERE product_id = product_uuid 
    AND is_approved = true;
  
  RETURN avg_rating;
END;
$$;


ALTER FUNCTION public.get_product_average_rating(product_uuid uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_product_average_rating(product_uuid uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_product_average_rating(product_uuid uuid) IS 'Calculate average rating for a product based on approved testimonials';


--
-- Name: get_product_rating_stats(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_product_rating_stats(product_uuid uuid) RETURNS TABLE(total_reviews integer, average_rating numeric, rating_distribution jsonb)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    COUNT(*)::integer as total_reviews,
    COALESCE(AVG(rating), 0.00)::numeric(3,2) as average_rating,
    jsonb_build_object(
      '5_stars', COUNT(*) FILTER (WHERE rating = 5),
      '4_stars', COUNT(*) FILTER (WHERE rating = 4),
      '3_stars', COUNT(*) FILTER (WHERE rating = 3),
      '2_stars', COUNT(*) FILTER (WHERE rating = 2),
      '1_star', COUNT(*) FILTER (WHERE rating = 1)
    ) as rating_distribution
  FROM testimonials 
  WHERE product_id = product_uuid 
    AND is_approved = true;
END;
$$;


ALTER FUNCTION public.get_product_rating_stats(product_uuid uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_product_rating_stats(product_uuid uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_product_rating_stats(product_uuid uuid) IS 'Get detailed rating statistics for a product';


--
-- Name: get_subscription_modules(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_subscription_modules(subscription_uuid uuid) RETURNS TABLE(module_id uuid, module_code character varying, module_name_pt character varying, module_name_en character varying, module_name_es character varying, module_description_pt text, module_description_en text, module_description_es text, module_icon character varying, module_color character varying, is_enabled boolean, expires_at timestamp with time zone)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    m.id,
    m.code,
    m.name_pt,
    m.name_en,
    m.name_es,
    m.description_pt,
    m.description_en,
    m.description_es,
    m.icon,
    m.color,
    sm.is_enabled,
    sm.expires_at
  FROM modules m
  LEFT JOIN subscription_modules sm ON m.id = sm.module_id AND sm.subscription_id = subscription_uuid
  WHERE m.is_active = true
  ORDER BY m.sort_order, m.name_pt;
END;
$$;


ALTER FUNCTION public.get_subscription_modules(subscription_uuid uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_subscription_modules(subscription_uuid uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_subscription_modules(subscription_uuid uuid) IS 'Get all modules available for a subscription';


--
-- Name: get_tenant_average_rating(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_tenant_average_rating(tenant_uuid uuid) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  avg_rating numeric(3,2);
BEGIN
  SELECT COALESCE(AVG(rating), 0.00)::numeric(3,2)
  INTO avg_rating
  FROM testimonials 
  WHERE tenant_id = tenant_uuid 
    AND is_approved = true;
  
  RETURN avg_rating;
END;
$$;


ALTER FUNCTION public.get_tenant_average_rating(tenant_uuid uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_tenant_average_rating(tenant_uuid uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_tenant_average_rating(tenant_uuid uuid) IS 'Calculate average rating for a tenant based on approved testimonials';


--
-- Name: get_tenant_rating_stats(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_tenant_rating_stats(tenant_uuid uuid) RETURNS TABLE(total_reviews integer, average_rating numeric, rating_distribution jsonb)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    COUNT(*)::integer as total_reviews,
    COALESCE(AVG(rating), 0.00)::numeric(3,2) as average_rating,
    jsonb_build_object(
      '5_stars', COUNT(*) FILTER (WHERE rating = 5),
      '4_stars', COUNT(*) FILTER (WHERE rating = 4),
      '3_stars', COUNT(*) FILTER (WHERE rating = 3),
      '2_stars', COUNT(*) FILTER (WHERE rating = 2),
      '1_star', COUNT(*) FILTER (WHERE rating = 1)
    ) as rating_distribution
  FROM testimonials 
  WHERE tenant_id = tenant_uuid 
    AND is_approved = true;
END;
$$;


ALTER FUNCTION public.get_tenant_rating_stats(tenant_uuid uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_tenant_rating_stats(tenant_uuid uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_tenant_rating_stats(tenant_uuid uuid) IS 'Get detailed rating statistics for a tenant';


--
-- Name: get_tenant_testimonials_with_stats(uuid, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_tenant_testimonials_with_stats(tenant_uuid uuid, limit_count integer DEFAULT 10, offset_count integer DEFAULT 0) RETURNS TABLE(id uuid, testimonial_type character varying, product_id uuid, author_name character varying, author_email character varying, author_position character varying, author_company character varying, author_image text, title character varying, content text, rating integer, is_approved boolean, is_featured boolean, display_order integer, language character varying, created_at timestamp with time zone, updated_at timestamp with time zone, tenant_id uuid, average_rating numeric, total_reviews integer)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    t.*,
    get_tenant_average_rating(tenant_uuid) as average_rating,
    (SELECT COUNT(*) FROM testimonials WHERE tenant_id = tenant_uuid AND is_approved = true)::integer as total_reviews
  FROM testimonials t
  WHERE t.tenant_id = tenant_uuid
    AND t.is_approved = true
  ORDER BY t.is_featured DESC, t.display_order ASC, t.created_at DESC
  LIMIT limit_count
  OFFSET offset_count;
END;
$$;


ALTER FUNCTION public.get_tenant_testimonials_with_stats(tenant_uuid uuid, limit_count integer, offset_count integer) OWNER TO postgres;

--
-- Name: FUNCTION get_tenant_testimonials_with_stats(tenant_uuid uuid, limit_count integer, offset_count integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_tenant_testimonials_with_stats(tenant_uuid uuid, limit_count integer, offset_count integer) IS 'Get testimonials with calculated rating statistics for a tenant';


--
-- Name: get_unread_notifications_count(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_unread_notifications_count(p_user_id uuid) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_count INTEGER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM public.notification_recipients nr
    INNER JOIN public.notifications n ON nr.notification_id = n.id
    WHERE nr.user_id = p_user_id
      AND nr.is_read = false
      AND n.is_active = true
      AND (n.expires_at IS NULL OR n.expires_at > NOW());
    
    RETURN v_count;
END;
$$;


ALTER FUNCTION public.get_unread_notifications_count(p_user_id uuid) OWNER TO postgres;

--
-- Name: get_user_cart_count(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user_cart_count(p_user_id uuid) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  item_count INTEGER;
BEGIN
  SELECT COALESCE(SUM(quantity), 0)
  INTO item_count
  FROM order_items oi
  INNER JOIN orders o ON oi.order_id = o.id
  WHERE o.user_id = p_user_id
    AND o.is_draft = true;
  
  RETURN item_count;
END;
$$;


ALTER FUNCTION public.get_user_cart_count(p_user_id uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_user_cart_count(p_user_id uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_user_cart_count(p_user_id uuid) IS 'Retorna a quantidade total de itens no carrinho do usuário';


--
-- Name: get_user_cart_total(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user_cart_total(p_user_id uuid) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  cart_total NUMERIC(10,2);
BEGIN
  SELECT COALESCE(SUM(total_amount), 0)
  INTO cart_total
  FROM orders
  WHERE user_id = p_user_id
    AND is_draft = true;
  
  RETURN cart_total;
END;
$$;


ALTER FUNCTION public.get_user_cart_total(p_user_id uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_user_cart_total(p_user_id uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_user_cart_total(p_user_id uuid) IS 'Retorna o valor total do carrinho do usuário';


--
-- Name: get_user_search_history(uuid, uuid, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user_search_history(p_user_id uuid, p_tenant_id uuid, p_limit integer DEFAULT 10) RETURNS TABLE(search_term text, search_count integer, last_searched_at timestamp with time zone)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        sh.search_term,
        sh.search_count,
        sh.last_searched_at
    FROM public.search_history sh
    WHERE sh.user_id = p_user_id
        AND sh.tenant_id = p_tenant_id
        AND length(sh.search_term) >= 2
    ORDER BY sh.last_searched_at DESC
    LIMIT p_limit;
END;
$$;


ALTER FUNCTION public.get_user_search_history(p_user_id uuid, p_tenant_id uuid, p_limit integer) OWNER TO postgres;

--
-- Name: get_user_tenants(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user_tenants(user_uuid uuid) RETURNS TABLE(tenant_id uuid, tenant_name character varying, tenant_slug character varying, role text, is_active boolean)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    t.id,
    t.name,
    t.slug,
    tu.role,
    tu.is_active
  FROM tenants t
  JOIN tenant_users tu ON t.id = tu.tenant_id
  WHERE tu.user_id = user_uuid
  AND tu.is_active = true
  ORDER BY t.name;
END;
$$;


ALTER FUNCTION public.get_user_tenants(user_uuid uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_user_tenants(user_uuid uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_user_tenants(user_uuid uuid) IS 'Returns all tenants a user has access to';


--
-- Name: google_place_details(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.google_place_details(p_place_id text, p_session_token text DEFAULT NULL::text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_api_key text;
    v_url text;
    v_response json;
BEGIN
    -- Buscar API key
    SELECT api_key INTO v_api_key
    FROM public.api_keys
    WHERE service_name = 'google_maps'
      AND is_active = true
    LIMIT 1;

    IF v_api_key IS NULL THEN
        RETURN json_build_object(
            'error', 'API key not found',
            'result', '{}'::json
        );
    END IF;

    -- Construir URL
    v_url := 'https://maps.googleapis.com/maps/api/place/details/json?'
        || 'place_id=' || urlencode(p_place_id)
        || '&key=' || v_api_key
        || '&fields=formatted_address,address_components,geometry'
        || '&language=pt-BR';
    
    IF p_session_token IS NOT NULL THEN
        v_url := v_url || '&sessiontoken=' || p_session_token;
    END IF;

    -- Fazer requisição HTTP
    SELECT content::json INTO v_response
    FROM http_get(v_url);

    RETURN v_response;
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object(
            'error', SQLERRM,
            'result', '{}'::json
        );
END;
$$;


ALTER FUNCTION public.google_place_details(p_place_id text, p_session_token text) OWNER TO postgres;

--
-- Name: FUNCTION google_place_details(p_place_id text, p_session_token text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.google_place_details(p_place_id text, p_session_token text) IS 'Busca detalhes de um lugar usando Google Places Details API';


--
-- Name: google_places_autocomplete(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.google_places_autocomplete(p_input text, p_session_token text DEFAULT NULL::text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_api_key text;
    v_url text;
    v_response json;
BEGIN
    -- Buscar API key
    SELECT api_key INTO v_api_key
    FROM public.api_keys
    WHERE service_name = 'google_maps'
      AND is_active = true
    LIMIT 1;

    IF v_api_key IS NULL THEN
        RETURN json_build_object(
            'error', 'API key not found',
            'predictions', '[]'::json
        );
    END IF;

    -- Construir URL
    v_url := 'https://maps.googleapis.com/maps/api/place/autocomplete/json?'
        || 'input=' || urlencode(p_input)
        || '&key=' || v_api_key
        || '&components=country:br'
        || '&language=pt-BR';
    
    IF p_session_token IS NOT NULL THEN
        v_url := v_url || '&sessiontoken=' || p_session_token;
    END IF;

    -- Fazer requisição HTTP usando a extensão http
    SELECT content::json INTO v_response
    FROM http_get(v_url);

    RETURN v_response;
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object(
            'error', SQLERRM,
            'predictions', '[]'::json
        );
END;
$$;


ALTER FUNCTION public.google_places_autocomplete(p_input text, p_session_token text) OWNER TO postgres;

--
-- Name: FUNCTION google_places_autocomplete(p_input text, p_session_token text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.google_places_autocomplete(p_input text, p_session_token text) IS 'Busca endereços usando Google Places Autocomplete API';


--
-- Name: handle_new_user(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  INSERT INTO public.users (id, display_name, email, preferred_language)
  VALUES (
    NEW.id,
    COALESCE(NEW.raw_user_meta_data->>'display_name', NEW.raw_user_meta_data->>'full_name', split_part(NEW.email, '@', 1)),
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'preferred_language', 'pt')
  );
  
  INSERT INTO public.user_roles (user_id, role)
  VALUES (NEW.id, 'user');
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.handle_new_user() OWNER TO postgres;

--
-- Name: FUNCTION handle_new_user(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.handle_new_user() IS 'Automatically creates user profile and role on signup';


--
-- Name: has_role(uuid, public.app_role); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.has_role(_user_id uuid, _role public.app_role) RETURNS boolean
    LANGUAGE sql STABLE SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE user_id = _user_id
      AND role = _role
  )
$$;


ALTER FUNCTION public.has_role(_user_id uuid, _role public.app_role) OWNER TO postgres;

--
-- Name: increment_cash_register_amount(uuid, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.increment_cash_register_amount(p_session_id uuid, p_amount numeric) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  UPDATE cash_register_sessions
  SET expected_amount = expected_amount + p_amount,
      updated_at = now()
  WHERE id = p_session_id;
END;
$$;


ALTER FUNCTION public.increment_cash_register_amount(p_session_id uuid, p_amount numeric) OWNER TO postgres;

--
-- Name: FUNCTION increment_cash_register_amount(p_session_id uuid, p_amount numeric); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.increment_cash_register_amount(p_session_id uuid, p_amount numeric) IS 'Incrementa o valor esperado do caixa (vendas, reforços)';


--
-- Name: increment_faq_view_count(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.increment_faq_view_count(faq_id uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
    UPDATE public.support_faq 
    SET view_count = view_count + 1 
    WHERE id = faq_id;
END;
$$;


ALTER FUNCTION public.increment_faq_view_count(faq_id uuid) OWNER TO postgres;

--
-- Name: log_delivery_person_status_change(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.log_delivery_person_status_change() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF OLD.status IS DISTINCT FROM NEW.status THEN
        INSERT INTO delivery_person_status_history (
            delivery_person_id,
            previous_status,
            new_status
        ) VALUES (
            NEW.id,
            OLD.status,
            NEW.status
        );
    END IF;
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.log_delivery_person_status_change() OWNER TO postgres;

--
-- Name: mark_all_notifications_as_read(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mark_all_notifications_as_read(p_user_id uuid) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    rows_affected INTEGER;
BEGIN
    UPDATE public.notification_recipients
    SET 
        is_read = true,
        read_at = NOW()
    WHERE 
        user_id = p_user_id
        AND is_read = false;
    
    GET DIAGNOSTICS rows_affected = ROW_COUNT;
    RETURN rows_affected;
END;
$$;


ALTER FUNCTION public.mark_all_notifications_as_read(p_user_id uuid) OWNER TO postgres;

--
-- Name: mark_notification_as_read(uuid, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mark_notification_as_read(p_notification_id uuid, p_user_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    UPDATE public.notification_recipients
    SET 
        is_read = true,
        read_at = NOW()
    WHERE 
        notification_id = p_notification_id 
        AND user_id = p_user_id
        AND is_read = false;
    
    RETURN FOUND;
END;
$$;


ALTER FUNCTION public.mark_notification_as_read(p_notification_id uuid, p_user_id uuid) OWNER TO postgres;

--
-- Name: match_documents(public.vector, integer, jsonb); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.match_documents(query_embedding public.vector, match_count integer DEFAULT NULL::integer, filter jsonb DEFAULT '{}'::jsonb) RETURNS TABLE(id bigint, content text, metadata jsonb, similarity double precision)
    LANGUAGE plpgsql
    AS $$
#variable_conflict use_column
begin
  return query
  select
    id,
    content,
    metadata,
    1 - (documents.embedding <=> query_embedding) as similarity
  from documents
  where metadata @> filter
  order by documents.embedding <=> query_embedding
  limit match_count;
end;
$$;


ALTER FUNCTION public.match_documents(query_embedding public.vector, match_count integer, filter jsonb) OWNER TO postgres;

--
-- Name: refresh_product_reviews_stats(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.refresh_product_reviews_stats() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Atualizar view materializada
    REFRESH MATERIALIZED VIEW CONCURRENTLY public.product_reviews_stats;
    RETURN NULL;
END;
$$;


ALTER FUNCTION public.refresh_product_reviews_stats() OWNER TO postgres;

--
-- Name: register_product_purchase(uuid, integer, numeric, uuid, text, timestamp with time zone, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.register_product_purchase(p_product_id uuid, p_quantity integer, p_unit_cost numeric, p_supplier_id uuid DEFAULT NULL::uuid, p_reference_number text DEFAULT NULL::text, p_expiry_date timestamp with time zone DEFAULT NULL::timestamp with time zone, p_notes text DEFAULT NULL::text) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_movement_id uuid;
  v_batch_id uuid;
  v_total_cost NUMERIC(10, 2);
  v_batch_number TEXT;
BEGIN
  -- Gerar número do lote
  v_batch_number := 'LOT-' || EXTRACT(YEAR FROM now()) || '-' || LPAD(EXTRACT(DOY FROM now())::TEXT, 3, '0') || '-' || LPAD(nextval('batch_sequence')::TEXT, 4, '0');
  
  -- Calcular custo total
  v_total_cost := p_quantity * p_unit_cost;
  
  -- Criar movimentação
  INSERT INTO product_stock_movements (
    product_id, movement_type, quantity, unit_cost, total_cost,
    reference_number, supplier_id, notes, movement_date
  )
  VALUES (
    p_product_id, 'purchase', p_quantity, p_unit_cost, v_total_cost,
    p_reference_number, p_supplier_id, p_notes, now()
  )
  RETURNING id INTO v_movement_id;
  
  -- Criar lote
  INSERT INTO product_stock_batches (
    product_id, movement_id, batch_number, purchase_date, expiry_date,
    original_quantity, current_quantity, unit_cost, supplier_id
  )
  VALUES (
    p_product_id, v_movement_id, v_batch_number, now(), p_expiry_date,
    p_quantity, p_quantity, p_unit_cost, p_supplier_id
  )
  RETURNING id INTO v_batch_id;
  
  -- Atualizar quantidade em estoque do produto
  UPDATE product_stock
  SET quantity = quantity + p_quantity,
      updated_at = now()
  WHERE product_id = p_product_id;
  
  -- Se não existe registro de estoque, criar
  IF NOT FOUND THEN
    INSERT INTO product_stock (product_id, quantity, track_stock, stock_status)
    VALUES (p_product_id, p_quantity, true, 'in_stock');
  END IF;
  
  -- Registrar no histórico de custos
  INSERT INTO product_cost_history (product_id, unit_cost, supplier_id, notes)
  VALUES (p_product_id, p_unit_cost, p_supplier_id, 'Custo registrado na compra');
  
  RETURN v_movement_id;
END;
$$;


ALTER FUNCTION public.register_product_purchase(p_product_id uuid, p_quantity integer, p_unit_cost numeric, p_supplier_id uuid, p_reference_number text, p_expiry_date timestamp with time zone, p_notes text) OWNER TO postgres;

--
-- Name: register_search(uuid, uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.register_search(p_user_id uuid, p_tenant_id uuid, p_search_term text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Limpar o termo de busca (remover espaços extras, converter para lowercase)
    p_search_term := trim(lower(p_search_term));
    
    -- Ignorar termos muito curtos
    IF length(p_search_term) < 2 THEN
        RETURN;
    END IF;
    
    -- Atualizar ou inserir no histórico do usuário
    INSERT INTO public.search_history (user_id, tenant_id, search_term, search_count, last_searched_at)
    VALUES (p_user_id, p_tenant_id, p_search_term, 1, now())
    ON CONFLICT (user_id, tenant_id, search_term)
    DO UPDATE SET 
        search_count = search_history.search_count + 1,
        last_searched_at = now();
    
    -- Atualizar ou inserir nos termos populares do tenant
    INSERT INTO public.search_terms (tenant_id, term, search_count)
    VALUES (p_tenant_id, p_search_term, 1)
    ON CONFLICT (tenant_id, term)
    DO UPDATE SET 
        search_count = search_terms.search_count + 1,
        updated_at = now();
END;
$$;


ALTER FUNCTION public.register_search(p_user_id uuid, p_tenant_id uuid, p_search_term text) OWNER TO postgres;

--
-- Name: register_stock_purchase(uuid, numeric, uuid, numeric, uuid, text, timestamp with time zone, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.register_stock_purchase(p_ingredient_id uuid, p_quantity numeric, p_unit_id uuid, p_unit_cost numeric, p_supplier_id uuid DEFAULT NULL::uuid, p_batch_number text DEFAULT NULL::text, p_expiry_date timestamp with time zone DEFAULT NULL::timestamp with time zone, p_reference_number text DEFAULT NULL::text, p_notes text DEFAULT NULL::text) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_movement_id uuid;
  v_batch_id uuid;
  v_total_cost NUMERIC(10, 2);
  v_old_cost NUMERIC(10, 4);
  v_new_cost NUMERIC(10, 4);
  v_converted_quantity NUMERIC;
  v_converted_cost NUMERIC;
BEGIN
  v_total_cost := p_quantity * p_unit_cost;
  
  SELECT unit_cost INTO v_old_cost FROM ingredients WHERE id = p_ingredient_id;
  
  -- Criar movimentação (trigger vai converter)
  INSERT INTO stock_movements (
    ingredient_id, movement_type, quantity, unit_id, unit_cost, total_cost,
    reference_number, supplier_id, notes, movement_date
  )
  VALUES (
    p_ingredient_id, 'purchase', p_quantity, p_unit_id, p_unit_cost, v_total_cost,
    p_reference_number, p_supplier_id, p_notes, now()
  )
  RETURNING id, quantity, unit_cost INTO v_movement_id, v_converted_quantity, v_converted_cost;
  
  -- Criar lote com valores convertidos
  INSERT INTO stock_batches (
    ingredient_id, movement_id, batch_number, purchase_date, expiry_date,
    original_quantity, current_quantity, unit_id, unit_cost, supplier_id
  )
  SELECT 
    p_ingredient_id, v_movement_id, p_batch_number, now(), p_expiry_date,
    sm.quantity, sm.quantity, sm.unit_id, sm.unit_cost, p_supplier_id
  FROM stock_movements sm
  WHERE sm.id = v_movement_id
  RETURNING id INTO v_batch_id;
  
  -- Atualizar estoque com quantidade já convertida
  UPDATE ingredients
  SET stock_quantity = stock_quantity + v_converted_quantity,
      updated_at = now()
  WHERE id = p_ingredient_id;
  
  v_new_cost := calculate_weighted_average_cost(p_ingredient_id);
  
  UPDATE ingredients
  SET unit_cost = v_new_cost, updated_at = now()
  WHERE id = p_ingredient_id;
  
  IF v_old_cost IS DISTINCT FROM v_new_cost THEN
    INSERT INTO ingredient_cost_history (ingredient_id, unit_cost, supplier_id, notes)
    VALUES (p_ingredient_id, v_new_cost, p_supplier_id, 'Custo médio atualizado após compra');
  END IF;
  
  RETURN v_movement_id;
END;
$$;


ALTER FUNCTION public.register_stock_purchase(p_ingredient_id uuid, p_quantity numeric, p_unit_id uuid, p_unit_cost numeric, p_supplier_id uuid, p_batch_number text, p_expiry_date timestamp with time zone, p_reference_number text, p_notes text) OWNER TO postgres;

--
-- Name: FUNCTION register_stock_purchase(p_ingredient_id uuid, p_quantity numeric, p_unit_id uuid, p_unit_cost numeric, p_supplier_id uuid, p_batch_number text, p_expiry_date timestamp with time zone, p_reference_number text, p_notes text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.register_stock_purchase(p_ingredient_id uuid, p_quantity numeric, p_unit_id uuid, p_unit_cost numeric, p_supplier_id uuid, p_batch_number text, p_expiry_date timestamp with time zone, p_reference_number text, p_notes text) IS 'Registra entrada de estoque com lote e atualiza custo médio';


--
-- Name: search_products(uuid, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.search_products(p_tenant_id uuid, p_search_term text, p_limit integer DEFAULT 50) RETURNS TABLE(id uuid, name_pt text, description_pt text, image_url text, price numeric, promotional_price numeric, has_offer boolean, category_name text, search_rank numeric)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Limpar o termo de busca
    p_search_term := trim(lower(p_search_term));
    
    -- Ignorar termos muito curtos
    IF length(p_search_term) < 2 THEN
        RETURN;
    END IF;
    
    RETURN QUERY
    SELECT 
        p.id,
        p.name_pt,
        p.description_pt,
        p.image_url,
        p.price,
        pp.promotional_price,
        (pp.promotional_price IS NOT NULL AND pp.promotional_price > 0) as has_offer,
        pc.name_pt as category_name,
        -- Ranking baseado na relevância do termo
        CASE 
            WHEN lower(p.name_pt) LIKE '%' || p_search_term || '%' THEN 1.0
            WHEN lower(p.description_pt) LIKE '%' || p_search_term || '%' THEN 0.8
            WHEN lower(pc.name_pt) LIKE '%' || p_search_term || '%' THEN 0.6
            ELSE 0.4
        END as search_rank
    FROM public.products p
    LEFT JOIN public.product_categories pc ON p.product_category_id = pc.id
    LEFT JOIN public.product_prices pp ON p.id = pp.product_id 
        AND pp.is_active = true 
        AND (pp.date_start IS NULL OR pp.date_start <= now())
        AND (pp.date_end IS NULL OR pp.date_end >= now())
    WHERE p.tenant_id = p_tenant_id
        AND p.is_active = true
        AND p.is_published = true
        AND (
            lower(p.name_pt) LIKE '%' || p_search_term || '%'
            OR lower(p.description_pt) LIKE '%' || p_search_term || '%'
            OR lower(pc.name_pt) LIKE '%' || p_search_term || '%'
        )
    ORDER BY search_rank DESC, p.name_pt ASC
    LIMIT p_limit;
END;
$$;


ALTER FUNCTION public.search_products(p_tenant_id uuid, p_search_term text, p_limit integer) OWNER TO postgres;

--
-- Name: set_order_number(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.set_order_number() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.order_number IS NULL OR NEW.order_number = '' THEN
    NEW.order_number := generate_order_number();
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.set_order_number() OWNER TO postgres;

--
-- Name: set_tenant_id_for_group_relations(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.set_tenant_id_for_group_relations() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.tenant_id IS NULL THEN
    NEW.tenant_id := get_current_tenant_id();
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.set_tenant_id_for_group_relations() OWNER TO postgres;

--
-- Name: set_tenant_id_for_modifier_groups(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.set_tenant_id_for_modifier_groups() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.tenant_id IS NULL THEN
    NEW.tenant_id := get_current_tenant_id();
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.set_tenant_id_for_modifier_groups() OWNER TO postgres;

--
-- Name: set_tenant_id_for_modifiers(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.set_tenant_id_for_modifiers() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NEW.tenant_id IS NULL THEN
    NEW.tenant_id := get_current_tenant_id();
  END IF;
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.set_tenant_id_for_modifiers() OWNER TO postgres;

--
-- Name: subscription_has_module_access(uuid, character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.subscription_has_module_access(subscription_uuid uuid, module_code character varying) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 
    FROM subscription_modules sm
    JOIN modules m ON sm.module_id = m.id
    WHERE sm.subscription_id = subscription_uuid 
      AND m.code = module_code
      AND sm.is_enabled = true
      AND (sm.expires_at IS NULL OR sm.expires_at > now())
  );
END;
$$;


ALTER FUNCTION public.subscription_has_module_access(subscription_uuid uuid, module_code character varying) OWNER TO postgres;

--
-- Name: FUNCTION subscription_has_module_access(subscription_uuid uuid, module_code character varying); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.subscription_has_module_access(subscription_uuid uuid, module_code character varying) IS 'Check if subscription has access to a specific module';


--
-- Name: sync_plan_modules_to_subscription(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sync_plan_modules_to_subscription(subscription_uuid uuid) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  plan_uuid uuid;
BEGIN
  -- Get the plan for this subscription
  SELECT plan_id INTO plan_uuid 
  FROM subscriptions 
  WHERE id = subscription_uuid;
  
  -- Insert plan modules into subscription modules
  INSERT INTO subscription_modules (subscription_id, module_id, is_enabled)
  SELECT subscription_uuid, pm.module_id, pm.is_included
  FROM plan_modules pm
  WHERE pm.plan_id = plan_uuid
  ON CONFLICT (subscription_id, module_id) DO UPDATE SET
    is_enabled = EXCLUDED.is_enabled,
    updated_at = now();
END;
$$;


ALTER FUNCTION public.sync_plan_modules_to_subscription(subscription_uuid uuid) OWNER TO postgres;

--
-- Name: FUNCTION sync_plan_modules_to_subscription(subscription_uuid uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.sync_plan_modules_to_subscription(subscription_uuid uuid) IS 'Sync plan modules to subscription when plan changes';


--
-- Name: trigger_set_timestamp_search_terms(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.trigger_set_timestamp_search_terms() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.trigger_set_timestamp_search_terms() OWNER TO postgres;

--
-- Name: update_account_balance(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_account_balance() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP = 'INSERT' AND NEW.status = 'completed' THEN
    IF NEW.type = 'income' THEN
      UPDATE public.accounts SET current_balance = current_balance + NEW.amount WHERE id = NEW.account_id;
    ELSIF NEW.type = 'expense' THEN
      UPDATE public.accounts SET current_balance = current_balance - NEW.amount WHERE id = NEW.account_id;
    END IF;
  ELSIF TG_OP = 'UPDATE' THEN
    IF OLD.status != 'completed' AND NEW.status = 'completed' THEN
      IF NEW.type = 'income' THEN
        UPDATE public.accounts SET current_balance = current_balance + NEW.amount WHERE id = NEW.account_id;
      ELSIF NEW.type = 'expense' THEN
        UPDATE public.accounts SET current_balance = current_balance - NEW.amount WHERE id = NEW.account_id;
      END IF;
    ELSIF OLD.status = 'completed' AND NEW.status != 'completed' THEN
      IF OLD.type = 'income' THEN
        UPDATE public.accounts SET current_balance = current_balance - OLD.amount WHERE id = OLD.account_id;
      ELSIF OLD.type = 'expense' THEN
        UPDATE public.accounts SET current_balance = current_balance + OLD.amount WHERE id = OLD.account_id;
      END IF;
    END IF;
  ELSIF TG_OP = 'DELETE' AND OLD.status = 'completed' THEN
    IF OLD.type = 'income' THEN
      UPDATE public.accounts SET current_balance = current_balance - OLD.amount WHERE id = OLD.account_id;
    ELSIF OLD.type = 'expense' THEN
      UPDATE public.accounts SET current_balance = current_balance + OLD.amount WHERE id = OLD.account_id;
    END IF;
  END IF;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_account_balance() OWNER TO postgres;

--
-- Name: update_cart_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_cart_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_cart_updated_at() OWNER TO postgres;

--
-- Name: update_company_vehicle_current_user(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_company_vehicle_current_user() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF TG_OP = 'INSERT' AND NEW.end_date IS NULL THEN
    -- Novo uso iniciado
    UPDATE company_vehicles
    SET current_delivery_person_id = NEW.delivery_person_id,
        is_available = false
    WHERE id = NEW.company_vehicle_id;
  ELSIF TG_OP = 'UPDATE' AND NEW.end_date IS NOT NULL AND OLD.end_date IS NULL THEN
    -- Uso finalizado
    UPDATE company_vehicles
    SET current_delivery_person_id = NULL,
        is_available = true,
        odometer_reading = NEW.odometer_end
    WHERE id = NEW.company_vehicle_id;
  END IF;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_company_vehicle_current_user() OWNER TO postgres;

--
-- Name: update_delivery_person_rating_stats(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_delivery_person_rating_stats() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    UPDATE delivery_persons
    SET 
        total_ratings = total_ratings + 1,
        average_rating = (
            SELECT AVG(rating)::DECIMAL(3,2)
            FROM delivery_person_ratings
            WHERE delivery_person_id = NEW.delivery_person_id
        )
    WHERE id = NEW.delivery_person_id;
    
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_delivery_person_rating_stats() OWNER TO postgres;

--
-- Name: update_delivery_person_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_delivery_person_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_delivery_person_updated_at() OWNER TO postgres;

--
-- Name: update_delivery_person_wallet_balance(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_delivery_person_wallet_balance() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF NEW.status = 'completed' AND OLD.status != 'completed' THEN
        UPDATE delivery_person_wallet
        SET 
            balance = CASE 
                WHEN NEW.type IN ('earning', 'bonus', 'adjustment') THEN balance + NEW.amount
                WHEN NEW.type IN ('withdrawal', 'penalty') THEN balance - NEW.amount
                ELSE balance
            END,
            pending_balance = CASE 
                WHEN NEW.type IN ('earning', 'bonus') THEN pending_balance - NEW.amount
                ELSE pending_balance
            END,
            total_earned = CASE 
                WHEN NEW.type IN ('earning', 'bonus') THEN total_earned + NEW.amount
                ELSE total_earned
            END,
            total_withdrawn = CASE 
                WHEN NEW.type = 'withdrawal' THEN total_withdrawn + NEW.amount
                ELSE total_withdrawn
            END,
            updated_at = NOW()
        WHERE id = NEW.wallet_id;
    END IF;
    
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_delivery_person_wallet_balance() OWNER TO postgres;

--
-- Name: update_modifier_availability(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_modifier_availability() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Atualizar disponibilidade de todos os modificadores que usam este ingrediente
  UPDATE product_modifiers 
  SET is_available = check_modifier_availability(id)
  WHERE ingredient_id = COALESCE(NEW.ingredient_id, OLD.ingredient_id)
    AND use_ingredient_stock = TRUE;

  RETURN COALESCE(NEW, OLD);
END;
$$;


ALTER FUNCTION public.update_modifier_availability() OWNER TO postgres;

--
-- Name: update_notifications_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_notifications_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_notifications_updated_at() OWNER TO postgres;

--
-- Name: update_product_cost_trigger(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_product_cost_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_new_cost NUMERIC(10, 2);
  v_product_id uuid;
BEGIN
  -- Determinar o product_id baseado na operação
  v_product_id := CASE 
    WHEN TG_OP = 'DELETE' THEN OLD.product_id
    ELSE NEW.product_id
  END;
  
  -- Calcular novo custo
  v_new_cost := calculate_product_cost(v_product_id);
  
  -- Atualizar na tabela product_prices (verificar se existe primeiro)
  UPDATE product_prices
  SET cost_price = v_new_cost,
      updated_at = now()
  WHERE product_id = v_product_id;
  
  -- Se não atualizou nenhuma linha, é porque não existe, então inserir
  IF NOT FOUND THEN
    INSERT INTO product_prices (product_id, price, cost_price)
    VALUES (v_product_id, 0, v_new_cost);
  END IF;
  
  RETURN COALESCE(NEW, OLD);
END;
$$;


ALTER FUNCTION public.update_product_cost_trigger() OWNER TO postgres;

--
-- Name: update_reviews_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_reviews_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_reviews_updated_at() OWNER TO postgres;

--
-- Name: update_support_categories_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_support_categories_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_support_categories_updated_at() OWNER TO postgres;

--
-- Name: update_support_faq_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_support_faq_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_support_faq_updated_at() OWNER TO postgres;

--
-- Name: update_support_tickets_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_support_tickets_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_support_tickets_updated_at() OWNER TO postgres;

--
-- Name: update_tenant_customer_stats(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_tenant_customer_stats() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  customer_exists BOOLEAN;
  customer_record tenant_customers%ROWTYPE;
BEGIN
  -- Verificar se é um pedido finalizado (não draft)
  IF NEW.is_draft = false AND (OLD IS NULL OR OLD.is_draft = true) THEN
    -- Verificar se o cliente já existe nesta empresa
    SELECT EXISTS(
      SELECT 1 FROM tenant_customers 
      WHERE tenant_id = NEW.tenant_id 
      AND user_id = NEW.user_id
    ) INTO customer_exists;
    
    -- Se não existe, criar automaticamente
    IF NOT customer_exists THEN
      INSERT INTO tenant_customers (
        tenant_id,
        user_id,
        customer_name,
        customer_email,
        customer_phone,
        address_street,
        address_number,
        address_complement,
        address_neighborhood,
        address_city,
        address_state,
        address_zip_code,
        first_order_date,
        last_order_date,
        total_orders,
        total_spent,
        average_order_value
      )
      SELECT 
        NEW.tenant_id,
        NEW.user_id,
        COALESCE(u.display_name, u.email),
        u.email,
        u.phone,
        (NEW.shipping_address->>'street'),
        (NEW.shipping_address->>'number'),
        (NEW.shipping_address->>'complement'),
        (NEW.shipping_address->>'neighborhood'),
        (NEW.shipping_address->>'city'),
        (NEW.shipping_address->>'state'),
        (NEW.shipping_address->>'zip_code'),
        NOW(),
        NOW(),
        1,
        NEW.total_amount,
        NEW.total_amount
      FROM users u
      WHERE u.id = NEW.user_id;
    ELSE
      -- Atualizar estatísticas do cliente existente
      UPDATE tenant_customers 
      SET 
        total_orders = total_orders + 1,
        total_spent = total_spent + NEW.total_amount,
        last_order_date = NOW(),
        average_order_value = (total_spent + NEW.total_amount) / (total_orders + 1),
        updated_at = NOW()
      WHERE tenant_id = NEW.tenant_id 
      AND user_id = NEW.user_id;
    END IF;
  END IF;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_tenant_customer_stats() OWNER TO postgres;

--
-- Name: update_tenant_customer_stats_on_order(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_tenant_customer_stats_on_order() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  customer_record RECORD;
BEGIN
  -- Só processar se o pedido não for draft e tiver user_id
  IF NEW.is_draft = FALSE AND NEW.status != 'draft' AND NEW.user_id IS NOT NULL THEN
    
    -- Verificar se já existe tenant_customer
    SELECT * INTO customer_record
    FROM tenant_customers
    WHERE tenant_id = NEW.tenant_id 
      AND user_id = NEW.user_id;
    
    IF FOUND THEN
      -- Atualizar estatísticas do cliente existente
      UPDATE tenant_customers SET
        total_orders = total_orders + 1,
        total_spent = total_spent + NEW.total_amount,
        average_order_value = (total_spent + NEW.total_amount) / (total_orders + 1),
        last_order_date = NEW.created_at,
        updated_at = NOW()
      WHERE tenant_id = NEW.tenant_id 
        AND user_id = NEW.user_id;
    ELSE
      -- Criar novo tenant_customer automaticamente
      INSERT INTO tenant_customers (
        tenant_id,
        user_id,
        customer_name,
        customer_email,
        customer_phone,
        total_orders,
        total_spent,
        average_order_value,
        first_order_date,
        last_order_date
      )
      SELECT
        NEW.tenant_id,
        NEW.user_id,
        u.display_name,
        u.email,
        u.phone,
        1,
        NEW.total_amount,
        NEW.total_amount,
        NEW.created_at,
        NEW.created_at
      FROM users u
      WHERE u.id = NEW.user_id;
    END IF;
  END IF;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_tenant_customer_stats_on_order() OWNER TO postgres;

--
-- Name: update_testimonials_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_testimonials_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_testimonials_updated_at() OWNER TO postgres;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_updated_at_column() OWNER TO postgres;

--
-- Name: update_user_settings_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_user_settings_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_user_settings_updated_at() OWNER TO postgres;

--
-- Name: user_has_tenant_role(uuid, uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.user_has_tenant_role(user_uuid uuid, tenant_uuid uuid, required_role text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM tenant_users
    WHERE user_id = user_uuid
    AND tenant_id = tenant_uuid
    AND role = required_role
    AND is_active = true
  );
END;
$$;


ALTER FUNCTION public.user_has_tenant_role(user_uuid uuid, tenant_uuid uuid, required_role text) OWNER TO postgres;

--
-- Name: FUNCTION user_has_tenant_role(user_uuid uuid, tenant_uuid uuid, required_role text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.user_has_tenant_role(user_uuid uuid, tenant_uuid uuid, required_role text) IS 'Checks if user has specific role in tenant';


--
-- Name: user_is_tenant_admin(uuid, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.user_is_tenant_admin(user_uuid uuid, tenant_uuid uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM tenant_users
    WHERE user_id = user_uuid
    AND tenant_id = tenant_uuid
    AND role IN ('owner', 'admin')
    AND is_active = true
  );
END;
$$;


ALTER FUNCTION public.user_is_tenant_admin(user_uuid uuid, tenant_uuid uuid) OWNER TO postgres;

--
-- Name: FUNCTION user_is_tenant_admin(user_uuid uuid, tenant_uuid uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.user_is_tenant_admin(user_uuid uuid, tenant_uuid uuid) IS 'Checks if user has admin role in tenant';


--
-- Name: validate_tenant_access(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.validate_tenant_access(p_tenant_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 
    FROM user_profile 
    WHERE user_id = auth.uid() 
    AND tenant_id = p_tenant_id
  );
END;
$$;


ALTER FUNCTION public.validate_tenant_access(p_tenant_id uuid) OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      RAISE WARNING 'ErrorSendingBroadcastMessage: %', SQLERRM;
  END;
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: add_prefixes(text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.add_prefixes(_bucket_id text, _name text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    prefixes text[];
BEGIN
    prefixes := "storage"."get_prefixes"("_name");

    IF array_length(prefixes, 1) > 0 THEN
        INSERT INTO storage.prefixes (name, bucket_id)
        SELECT UNNEST(prefixes) as name, "_bucket_id" ON CONFLICT DO NOTHING;
    END IF;
END;
$$;


ALTER FUNCTION storage.add_prefixes(_bucket_id text, _name text) OWNER TO supabase_storage_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: delete_leaf_prefixes(text[], text[]); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.delete_leaf_prefixes(bucket_ids text[], names text[]) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_rows_deleted integer;
BEGIN
    LOOP
        WITH candidates AS (
            SELECT DISTINCT
                t.bucket_id,
                unnest(storage.get_prefixes(t.name)) AS name
            FROM unnest(bucket_ids, names) AS t(bucket_id, name)
        ),
        uniq AS (
             SELECT
                 bucket_id,
                 name,
                 storage.get_level(name) AS level
             FROM candidates
             WHERE name <> ''
             GROUP BY bucket_id, name
        ),
        leaf AS (
             SELECT
                 p.bucket_id,
                 p.name,
                 p.level
             FROM storage.prefixes AS p
                  JOIN uniq AS u
                       ON u.bucket_id = p.bucket_id
                           AND u.name = p.name
                           AND u.level = p.level
             WHERE NOT EXISTS (
                 SELECT 1
                 FROM storage.objects AS o
                 WHERE o.bucket_id = p.bucket_id
                   AND o.level = p.level + 1
                   AND o.name COLLATE "C" LIKE p.name || '/%'
             )
             AND NOT EXISTS (
                 SELECT 1
                 FROM storage.prefixes AS c
                 WHERE c.bucket_id = p.bucket_id
                   AND c.level = p.level + 1
                   AND c.name COLLATE "C" LIKE p.name || '/%'
             )
        )
        DELETE
        FROM storage.prefixes AS p
            USING leaf AS l
        WHERE p.bucket_id = l.bucket_id
          AND p.name = l.name
          AND p.level = l.level;

        GET DIAGNOSTICS v_rows_deleted = ROW_COUNT;
        EXIT WHEN v_rows_deleted = 0;
    END LOOP;
END;
$$;


ALTER FUNCTION storage.delete_leaf_prefixes(bucket_ids text[], names text[]) OWNER TO supabase_storage_admin;

--
-- Name: delete_prefix(text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.delete_prefix(_bucket_id text, _name text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Check if we can delete the prefix
    IF EXISTS(
        SELECT FROM "storage"."prefixes"
        WHERE "prefixes"."bucket_id" = "_bucket_id"
          AND level = "storage"."get_level"("_name") + 1
          AND "prefixes"."name" COLLATE "C" LIKE "_name" || '/%'
        LIMIT 1
    )
    OR EXISTS(
        SELECT FROM "storage"."objects"
        WHERE "objects"."bucket_id" = "_bucket_id"
          AND "storage"."get_level"("objects"."name") = "storage"."get_level"("_name") + 1
          AND "objects"."name" COLLATE "C" LIKE "_name" || '/%'
        LIMIT 1
    ) THEN
    -- There are sub-objects, skip deletion
    RETURN false;
    ELSE
        DELETE FROM "storage"."prefixes"
        WHERE "prefixes"."bucket_id" = "_bucket_id"
          AND level = "storage"."get_level"("_name")
          AND "prefixes"."name" = "_name";
        RETURN true;
    END IF;
END;
$$;


ALTER FUNCTION storage.delete_prefix(_bucket_id text, _name text) OWNER TO supabase_storage_admin;

--
-- Name: delete_prefix_hierarchy_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.delete_prefix_hierarchy_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    prefix text;
BEGIN
    prefix := "storage"."get_prefix"(OLD."name");

    IF coalesce(prefix, '') != '' THEN
        PERFORM "storage"."delete_prefix"(OLD."bucket_id", prefix);
    END IF;

    RETURN OLD;
END;
$$;


ALTER FUNCTION storage.delete_prefix_hierarchy_trigger() OWNER TO supabase_storage_admin;

--
-- Name: enforce_bucket_name_length(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.enforce_bucket_name_length() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    if length(new.name) > 100 then
        raise exception 'bucket name "%" is too long (% characters). Max is 100.', new.name, length(new.name);
    end if;
    return new;
end;
$$;


ALTER FUNCTION storage.enforce_bucket_name_length() OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
    _parts text[];
    _filename text;
BEGIN
    SELECT string_to_array(name, '/') INTO _parts;
    SELECT _parts[array_length(_parts,1)] INTO _filename;
    RETURN reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
    _parts text[];
BEGIN
    -- Split on "/" to get path segments
    SELECT string_to_array(name, '/') INTO _parts;
    -- Return everything except the last segment
    RETURN _parts[1 : array_length(_parts,1) - 1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_level(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_level(name text) RETURNS integer
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
SELECT array_length(string_to_array("name", '/'), 1);
$$;


ALTER FUNCTION storage.get_level(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_prefix(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_prefix(name text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
SELECT
    CASE WHEN strpos("name", '/') > 0 THEN
             regexp_replace("name", '[\/]{1}[^\/]+\/?$', '')
         ELSE
             ''
        END;
$_$;


ALTER FUNCTION storage.get_prefix(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_prefixes(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_prefixes(name text) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    parts text[];
    prefixes text[];
    prefix text;
BEGIN
    -- Split the name into parts by '/'
    parts := string_to_array("name", '/');
    prefixes := '{}';

    -- Construct the prefixes, stopping one level below the last part
    FOR i IN 1..array_length(parts, 1) - 1 LOOP
            prefix := array_to_string(parts[1:i], '/');
            prefixes := array_append(prefixes, prefix);
    END LOOP;

    RETURN prefixes;
END;
$$;


ALTER FUNCTION storage.get_prefixes(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::bigint) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: lock_top_prefixes(text[], text[]); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.lock_top_prefixes(bucket_ids text[], names text[]) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_bucket text;
    v_top text;
BEGIN
    FOR v_bucket, v_top IN
        SELECT DISTINCT t.bucket_id,
            split_part(t.name, '/', 1) AS top
        FROM unnest(bucket_ids, names) AS t(bucket_id, name)
        WHERE t.name <> ''
        ORDER BY 1, 2
        LOOP
            PERFORM pg_advisory_xact_lock(hashtextextended(v_bucket || '/' || v_top, 0));
        END LOOP;
END;
$$;


ALTER FUNCTION storage.lock_top_prefixes(bucket_ids text[], names text[]) OWNER TO supabase_storage_admin;

--
-- Name: objects_delete_cleanup(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.objects_delete_cleanup() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_bucket_ids text[];
    v_names      text[];
BEGIN
    IF current_setting('storage.gc.prefixes', true) = '1' THEN
        RETURN NULL;
    END IF;

    PERFORM set_config('storage.gc.prefixes', '1', true);

    SELECT COALESCE(array_agg(d.bucket_id), '{}'),
           COALESCE(array_agg(d.name), '{}')
    INTO v_bucket_ids, v_names
    FROM deleted AS d
    WHERE d.name <> '';

    PERFORM storage.lock_top_prefixes(v_bucket_ids, v_names);
    PERFORM storage.delete_leaf_prefixes(v_bucket_ids, v_names);

    RETURN NULL;
END;
$$;


ALTER FUNCTION storage.objects_delete_cleanup() OWNER TO supabase_storage_admin;

--
-- Name: objects_insert_prefix_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.objects_insert_prefix_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    PERFORM "storage"."add_prefixes"(NEW."bucket_id", NEW."name");
    NEW.level := "storage"."get_level"(NEW."name");

    RETURN NEW;
END;
$$;


ALTER FUNCTION storage.objects_insert_prefix_trigger() OWNER TO supabase_storage_admin;

--
-- Name: objects_update_cleanup(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.objects_update_cleanup() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    -- NEW - OLD (destinations to create prefixes for)
    v_add_bucket_ids text[];
    v_add_names      text[];

    -- OLD - NEW (sources to prune)
    v_src_bucket_ids text[];
    v_src_names      text[];
BEGIN
    IF TG_OP <> 'UPDATE' THEN
        RETURN NULL;
    END IF;

    -- 1) Compute NEW−OLD (added paths) and OLD−NEW (moved-away paths)
    WITH added AS (
        SELECT n.bucket_id, n.name
        FROM new_rows n
        WHERE n.name <> '' AND position('/' in n.name) > 0
        EXCEPT
        SELECT o.bucket_id, o.name FROM old_rows o WHERE o.name <> ''
    ),
    moved AS (
         SELECT o.bucket_id, o.name
         FROM old_rows o
         WHERE o.name <> ''
         EXCEPT
         SELECT n.bucket_id, n.name FROM new_rows n WHERE n.name <> ''
    )
    SELECT
        -- arrays for ADDED (dest) in stable order
        COALESCE( (SELECT array_agg(a.bucket_id ORDER BY a.bucket_id, a.name) FROM added a), '{}' ),
        COALESCE( (SELECT array_agg(a.name      ORDER BY a.bucket_id, a.name) FROM added a), '{}' ),
        -- arrays for MOVED (src) in stable order
        COALESCE( (SELECT array_agg(m.bucket_id ORDER BY m.bucket_id, m.name) FROM moved m), '{}' ),
        COALESCE( (SELECT array_agg(m.name      ORDER BY m.bucket_id, m.name) FROM moved m), '{}' )
    INTO v_add_bucket_ids, v_add_names, v_src_bucket_ids, v_src_names;

    -- Nothing to do?
    IF (array_length(v_add_bucket_ids, 1) IS NULL) AND (array_length(v_src_bucket_ids, 1) IS NULL) THEN
        RETURN NULL;
    END IF;

    -- 2) Take per-(bucket, top) locks: ALL prefixes in consistent global order to prevent deadlocks
    DECLARE
        v_all_bucket_ids text[];
        v_all_names text[];
    BEGIN
        -- Combine source and destination arrays for consistent lock ordering
        v_all_bucket_ids := COALESCE(v_src_bucket_ids, '{}') || COALESCE(v_add_bucket_ids, '{}');
        v_all_names := COALESCE(v_src_names, '{}') || COALESCE(v_add_names, '{}');

        -- Single lock call ensures consistent global ordering across all transactions
        IF array_length(v_all_bucket_ids, 1) IS NOT NULL THEN
            PERFORM storage.lock_top_prefixes(v_all_bucket_ids, v_all_names);
        END IF;
    END;

    -- 3) Create destination prefixes (NEW−OLD) BEFORE pruning sources
    IF array_length(v_add_bucket_ids, 1) IS NOT NULL THEN
        WITH candidates AS (
            SELECT DISTINCT t.bucket_id, unnest(storage.get_prefixes(t.name)) AS name
            FROM unnest(v_add_bucket_ids, v_add_names) AS t(bucket_id, name)
            WHERE name <> ''
        )
        INSERT INTO storage.prefixes (bucket_id, name)
        SELECT c.bucket_id, c.name
        FROM candidates c
        ON CONFLICT DO NOTHING;
    END IF;

    -- 4) Prune source prefixes bottom-up for OLD−NEW
    IF array_length(v_src_bucket_ids, 1) IS NOT NULL THEN
        -- re-entrancy guard so DELETE on prefixes won't recurse
        IF current_setting('storage.gc.prefixes', true) <> '1' THEN
            PERFORM set_config('storage.gc.prefixes', '1', true);
        END IF;

        PERFORM storage.delete_leaf_prefixes(v_src_bucket_ids, v_src_names);
    END IF;

    RETURN NULL;
END;
$$;


ALTER FUNCTION storage.objects_update_cleanup() OWNER TO supabase_storage_admin;

--
-- Name: objects_update_level_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.objects_update_level_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Ensure this is an update operation and the name has changed
    IF TG_OP = 'UPDATE' AND (NEW."name" <> OLD."name" OR NEW."bucket_id" <> OLD."bucket_id") THEN
        -- Set the new level
        NEW."level" := "storage"."get_level"(NEW."name");
    END IF;
    RETURN NEW;
END;
$$;


ALTER FUNCTION storage.objects_update_level_trigger() OWNER TO supabase_storage_admin;

--
-- Name: objects_update_prefix_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.objects_update_prefix_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    old_prefixes TEXT[];
BEGIN
    -- Ensure this is an update operation and the name has changed
    IF TG_OP = 'UPDATE' AND (NEW."name" <> OLD."name" OR NEW."bucket_id" <> OLD."bucket_id") THEN
        -- Retrieve old prefixes
        old_prefixes := "storage"."get_prefixes"(OLD."name");

        -- Remove old prefixes that are only used by this object
        WITH all_prefixes as (
            SELECT unnest(old_prefixes) as prefix
        ),
        can_delete_prefixes as (
             SELECT prefix
             FROM all_prefixes
             WHERE NOT EXISTS (
                 SELECT 1 FROM "storage"."objects"
                 WHERE "bucket_id" = OLD."bucket_id"
                   AND "name" <> OLD."name"
                   AND "name" LIKE (prefix || '%')
             )
         )
        DELETE FROM "storage"."prefixes" WHERE name IN (SELECT prefix FROM can_delete_prefixes);

        -- Add new prefixes
        PERFORM "storage"."add_prefixes"(NEW."bucket_id", NEW."name");
    END IF;
    -- Set the new level
    NEW."level" := "storage"."get_level"(NEW."name");

    RETURN NEW;
END;
$$;


ALTER FUNCTION storage.objects_update_prefix_trigger() OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: prefixes_delete_cleanup(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.prefixes_delete_cleanup() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_bucket_ids text[];
    v_names      text[];
BEGIN
    IF current_setting('storage.gc.prefixes', true) = '1' THEN
        RETURN NULL;
    END IF;

    PERFORM set_config('storage.gc.prefixes', '1', true);

    SELECT COALESCE(array_agg(d.bucket_id), '{}'),
           COALESCE(array_agg(d.name), '{}')
    INTO v_bucket_ids, v_names
    FROM deleted AS d
    WHERE d.name <> '';

    PERFORM storage.lock_top_prefixes(v_bucket_ids, v_names);
    PERFORM storage.delete_leaf_prefixes(v_bucket_ids, v_names);

    RETURN NULL;
END;
$$;


ALTER FUNCTION storage.prefixes_delete_cleanup() OWNER TO supabase_storage_admin;

--
-- Name: prefixes_insert_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.prefixes_insert_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    PERFORM "storage"."add_prefixes"(NEW."bucket_id", NEW."name");
    RETURN NEW;
END;
$$;


ALTER FUNCTION storage.prefixes_insert_trigger() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql
    AS $$
declare
    can_bypass_rls BOOLEAN;
begin
    SELECT rolbypassrls
    INTO can_bypass_rls
    FROM pg_roles
    WHERE rolname = coalesce(nullif(current_setting('role', true), 'none'), current_user);

    IF can_bypass_rls THEN
        RETURN QUERY SELECT * FROM storage.search_v1_optimised(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);
    ELSE
        RETURN QUERY SELECT * FROM storage.search_legacy_v1(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);
    END IF;
end;
$$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: search_legacy_v1(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
    v_order_by text;
    v_sort_order text;
begin
    case
        when sortcolumn = 'name' then
            v_order_by = 'name';
        when sortcolumn = 'updated_at' then
            v_order_by = 'updated_at';
        when sortcolumn = 'created_at' then
            v_order_by = 'created_at';
        when sortcolumn = 'last_accessed_at' then
            v_order_by = 'last_accessed_at';
        else
            v_order_by = 'name';
        end case;

    case
        when sortorder = 'asc' then
            v_sort_order = 'asc';
        when sortorder = 'desc' then
            v_sort_order = 'desc';
        else
            v_sort_order = 'asc';
        end case;

    v_order_by = v_order_by || ' ' || v_sort_order;

    return query execute
        'with folders as (
           select path_tokens[$1] as folder
           from storage.objects
             where objects.name ilike $2 || $3 || ''%''
               and bucket_id = $4
               and array_length(objects.path_tokens, 1) <> $1
           group by folder
           order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: search_v1_optimised(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
    v_order_by text;
    v_sort_order text;
begin
    case
        when sortcolumn = 'name' then
            v_order_by = 'name';
        when sortcolumn = 'updated_at' then
            v_order_by = 'updated_at';
        when sortcolumn = 'created_at' then
            v_order_by = 'created_at';
        when sortcolumn = 'last_accessed_at' then
            v_order_by = 'last_accessed_at';
        else
            v_order_by = 'name';
        end case;

    case
        when sortorder = 'asc' then
            v_sort_order = 'asc';
        when sortorder = 'desc' then
            v_sort_order = 'desc';
        else
            v_sort_order = 'asc';
        end case;

    v_order_by = v_order_by || ' ' || v_sort_order;

    return query execute
        'with folders as (
           select (string_to_array(name, ''/''))[level] as name
           from storage.prefixes
             where lower(prefixes.name) like lower($2 || $3) || ''%''
               and bucket_id = $4
               and level = $1
           order by name ' || v_sort_order || '
     )
     (select name,
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[level] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where lower(objects.name) like lower($2 || $3) || ''%''
       and bucket_id = $4
       and level = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: search_v2(text, text, integer, integer, text, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer DEFAULT 100, levels integer DEFAULT 1, start_after text DEFAULT ''::text, sort_order text DEFAULT 'asc'::text, sort_column text DEFAULT 'name'::text, sort_column_after text DEFAULT ''::text) RETURNS TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
DECLARE
    sort_col text;
    sort_ord text;
    cursor_op text;
    cursor_expr text;
    sort_expr text;
BEGIN
    -- Validate sort_order
    sort_ord := lower(sort_order);
    IF sort_ord NOT IN ('asc', 'desc') THEN
        sort_ord := 'asc';
    END IF;

    -- Determine cursor comparison operator
    IF sort_ord = 'asc' THEN
        cursor_op := '>';
    ELSE
        cursor_op := '<';
    END IF;
    
    sort_col := lower(sort_column);
    -- Validate sort column  
    IF sort_col IN ('updated_at', 'created_at') THEN
        cursor_expr := format(
            '($5 = '''' OR ROW(date_trunc(''milliseconds'', %I), name COLLATE "C") %s ROW(COALESCE(NULLIF($6, '''')::timestamptz, ''epoch''::timestamptz), $5))',
            sort_col, cursor_op
        );
        sort_expr := format(
            'COALESCE(date_trunc(''milliseconds'', %I), ''epoch''::timestamptz) %s, name COLLATE "C" %s',
            sort_col, sort_ord, sort_ord
        );
    ELSE
        cursor_expr := format('($5 = '''' OR name COLLATE "C" %s $5)', cursor_op);
        sort_expr := format('name COLLATE "C" %s', sort_ord);
    END IF;

    RETURN QUERY EXECUTE format(
        $sql$
        SELECT * FROM (
            (
                SELECT
                    split_part(name, '/', $4) AS key,
                    name,
                    NULL::uuid AS id,
                    updated_at,
                    created_at,
                    NULL::timestamptz AS last_accessed_at,
                    NULL::jsonb AS metadata
                FROM storage.prefixes
                WHERE name COLLATE "C" LIKE $1 || '%%'
                    AND bucket_id = $2
                    AND level = $4
                    AND %s
                ORDER BY %s
                LIMIT $3
            )
            UNION ALL
            (
                SELECT
                    split_part(name, '/', $4) AS key,
                    name,
                    id,
                    updated_at,
                    created_at,
                    last_accessed_at,
                    metadata
                FROM storage.objects
                WHERE name COLLATE "C" LIKE $1 || '%%'
                    AND bucket_id = $2
                    AND level = $4
                    AND %s
                ORDER BY %s
                LIMIT $3
            )
        ) obj
        ORDER BY %s
        LIMIT $3
        $sql$,
        cursor_expr,    -- prefixes WHERE
        sort_expr,      -- prefixes ORDER BY
        cursor_expr,    -- objects WHERE
        sort_expr,      -- objects ORDER BY
        sort_expr       -- final ORDER BY
    )
    USING prefix, bucket_name, limits, levels, start_after, sort_column_after;
END;
$_$;


ALTER FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer, levels integer, start_after text, sort_order text, sort_column text, sort_column_after text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: oauth_authorizations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.oauth_authorizations (
    id uuid NOT NULL,
    authorization_id text NOT NULL,
    client_id uuid NOT NULL,
    user_id uuid,
    redirect_uri text NOT NULL,
    scope text NOT NULL,
    state text,
    resource text,
    code_challenge text,
    code_challenge_method auth.code_challenge_method,
    response_type auth.oauth_response_type DEFAULT 'code'::auth.oauth_response_type NOT NULL,
    status auth.oauth_authorization_status DEFAULT 'pending'::auth.oauth_authorization_status NOT NULL,
    authorization_code text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    expires_at timestamp with time zone DEFAULT (now() + '00:03:00'::interval) NOT NULL,
    approved_at timestamp with time zone,
    CONSTRAINT oauth_authorizations_authorization_code_length CHECK ((char_length(authorization_code) <= 255)),
    CONSTRAINT oauth_authorizations_code_challenge_length CHECK ((char_length(code_challenge) <= 128)),
    CONSTRAINT oauth_authorizations_expires_at_future CHECK ((expires_at > created_at)),
    CONSTRAINT oauth_authorizations_redirect_uri_length CHECK ((char_length(redirect_uri) <= 2048)),
    CONSTRAINT oauth_authorizations_resource_length CHECK ((char_length(resource) <= 2048)),
    CONSTRAINT oauth_authorizations_scope_length CHECK ((char_length(scope) <= 4096)),
    CONSTRAINT oauth_authorizations_state_length CHECK ((char_length(state) <= 4096))
);


ALTER TABLE auth.oauth_authorizations OWNER TO supabase_auth_admin;

--
-- Name: oauth_clients; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.oauth_clients (
    id uuid NOT NULL,
    client_secret_hash text,
    registration_type auth.oauth_registration_type NOT NULL,
    redirect_uris text NOT NULL,
    grant_types text NOT NULL,
    client_name text,
    client_uri text,
    logo_uri text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    deleted_at timestamp with time zone,
    client_type auth.oauth_client_type DEFAULT 'confidential'::auth.oauth_client_type NOT NULL,
    CONSTRAINT oauth_clients_client_name_length CHECK ((char_length(client_name) <= 1024)),
    CONSTRAINT oauth_clients_client_uri_length CHECK ((char_length(client_uri) <= 2048)),
    CONSTRAINT oauth_clients_logo_uri_length CHECK ((char_length(logo_uri) <= 2048))
);


ALTER TABLE auth.oauth_clients OWNER TO supabase_auth_admin;

--
-- Name: oauth_consents; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.oauth_consents (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    client_id uuid NOT NULL,
    scopes text NOT NULL,
    granted_at timestamp with time zone DEFAULT now() NOT NULL,
    revoked_at timestamp with time zone,
    CONSTRAINT oauth_consents_revoked_after_granted CHECK (((revoked_at IS NULL) OR (revoked_at >= granted_at))),
    CONSTRAINT oauth_consents_scopes_length CHECK ((char_length(scopes) <= 2048)),
    CONSTRAINT oauth_consents_scopes_not_empty CHECK ((char_length(TRIM(BOTH FROM scopes)) > 0))
);


ALTER TABLE auth.oauth_consents OWNER TO supabase_auth_admin;

--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text,
    oauth_client_id uuid
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    disabled boolean,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: accounts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.accounts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    description text,
    account_type text NOT NULL,
    bank_name text,
    account_number text,
    agency text,
    initial_balance numeric(10,2) DEFAULT 0 NOT NULL,
    current_balance numeric(10,2) DEFAULT 0 NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.accounts OWNER TO postgres;

--
-- Name: TABLE accounts; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.accounts IS 'Contas bancárias e caixas da empresa';


--
-- Name: orders; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.orders (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    order_number text,
    status public.order_status DEFAULT 'pending'::public.order_status NOT NULL,
    total_amount numeric(10,2) NOT NULL,
    shipping_amount numeric(10,2) DEFAULT 0,
    discount_amount numeric(10,2) DEFAULT 0,
    payment_status public.payment_status DEFAULT 'pending'::public.payment_status NOT NULL,
    payment_method public.payment_method_type,
    shipping_address jsonb,
    billing_address jsonb,
    notes text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    tenant_id uuid NOT NULL,
    is_draft boolean DEFAULT true NOT NULL,
    draft_expires_at timestamp with time zone
);


ALTER TABLE public.orders OWNER TO postgres;

--
-- Name: TABLE orders; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.orders IS 'Tabela de pedidos (incluindo rascunhos/carrinho) - Reloaded';


--
-- Name: COLUMN orders.order_number; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.orders.order_number IS 'Número do pedido (gerado apenas quando finalizado, NULL para drafts)';


--
-- Name: COLUMN orders.is_draft; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.orders.is_draft IS 'true = carrinho temporário (draft), false = pedido finalizado';


--
-- Name: COLUMN orders.draft_expires_at; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.orders.draft_expires_at IS 'Data de expiração automática para drafts (carrinhos abandonados)';


--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id uuid NOT NULL,
    display_name text NOT NULL,
    email text NOT NULL,
    phone text,
    document text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    last_name text,
    birthday date,
    preferred_language character varying(2) DEFAULT 'pt'::character varying,
    image_url text,
    CONSTRAINT users_preferred_language_check CHECK (((preferred_language)::text = ANY ((ARRAY['pt'::character varying, 'en'::character varying, 'es'::character varying])::text[])))
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: TABLE users; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.users IS 'Extended user information beyond auth.users';


--
-- Name: COLUMN users.preferred_language; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.users.preferred_language IS 'Idioma preferido do usuário: pt (Português), en (English), es (Español)';


--
-- Name: active_orders; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.active_orders AS
 SELECT o.id,
    o.user_id,
    o.order_number,
    o.status,
    o.total_amount,
    o.shipping_amount,
    o.discount_amount,
    o.payment_status,
    o.payment_method,
    o.shipping_address,
    o.billing_address,
    o.notes,
    o.created_at,
    o.updated_at,
    o.tenant_id,
    o.is_draft,
    o.draft_expires_at,
    u.email AS user_email,
    u.display_name AS user_name
   FROM (public.orders o
     LEFT JOIN public.users u ON ((o.user_id = u.id)))
  WHERE ((o.is_draft = false) AND (o.status <> ALL (ARRAY['delivered'::public.order_status, 'cancelled'::public.order_status])))
  ORDER BY o.created_at DESC;


ALTER VIEW public.active_orders OWNER TO postgres;

--
-- Name: VIEW active_orders; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW public.active_orders IS 'Pedidos ativos (confirmados mas não finalizados)';


--
-- Name: api_keys; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.api_keys (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid,
    service_name character varying(100) NOT NULL,
    api_key text NOT NULL,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.api_keys OWNER TO postgres;

--
-- Name: TABLE api_keys; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.api_keys IS 'Armazena API keys de serviços externos de forma segura';


--
-- Name: company_vehicles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.company_vehicles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    vehicle_type public.vehicle_type NOT NULL,
    vehicle_plate character varying(10) NOT NULL,
    vehicle_model character varying(100) NOT NULL,
    vehicle_color character varying(50),
    vehicle_year integer,
    registration_number character varying(20),
    registration_expiry date,
    has_insurance boolean DEFAULT false,
    insurance_company character varying(100),
    insurance_policy character varying(50),
    insurance_expiry date,
    last_maintenance_date date,
    next_maintenance_date date,
    maintenance_notes text,
    odometer_reading integer,
    is_active boolean DEFAULT true,
    is_available boolean DEFAULT true,
    current_delivery_person_id uuid,
    acquisition_cost numeric(10,2),
    acquisition_date date,
    monthly_cost numeric(10,2),
    notes text,
    photos jsonb DEFAULT '[]'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.company_vehicles OWNER TO postgres;

--
-- Name: TABLE company_vehicles; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.company_vehicles IS 'Veículos pertencentes à empresa que podem ser usados por entregadores';


--
-- Name: COLUMN company_vehicles.is_available; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.company_vehicles.is_available IS 'Indica se o veículo está disponível para uso (não está sendo usado por ninguém)';


--
-- Name: COLUMN company_vehicles.current_delivery_person_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.company_vehicles.current_delivery_person_id IS 'Entregador que está usando o veículo atualmente';


--
-- Name: delivery_persons; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_persons (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_profile_id uuid NOT NULL,
    full_name character varying(255) NOT NULL,
    phone character varying(20) NOT NULL,
    email character varying(255) NOT NULL,
    document character varying(20) NOT NULL,
    birth_date date,
    street character varying(255),
    number character varying(20),
    complement character varying(255),
    neighborhood character varying(255),
    city character varying(255),
    state character varying(2),
    zip_code character varying(8),
    vehicle_type public.vehicle_type DEFAULT 'motorcycle'::public.vehicle_type NOT NULL,
    vehicle_plate character varying(10),
    vehicle_model character varying(100),
    vehicle_color character varying(50),
    driver_license character varying(20),
    driver_license_category character varying(5),
    driver_license_expiry date,
    has_vehicle_insurance boolean DEFAULT false,
    vehicle_insurance_expiry date,
    photo_url text,
    documents jsonb DEFAULT '[]'::jsonb,
    status public.delivery_person_status DEFAULT 'offline'::public.delivery_person_status,
    is_active boolean DEFAULT true,
    is_verified boolean DEFAULT false,
    current_latitude numeric(10,8),
    current_longitude numeric(11,8),
    last_location_update timestamp with time zone,
    total_deliveries integer DEFAULT 0,
    successful_deliveries integer DEFAULT 0,
    failed_deliveries integer DEFAULT 0,
    average_rating numeric(3,2) DEFAULT 0,
    total_ratings integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.delivery_persons OWNER TO postgres;

--
-- Name: TABLE delivery_persons; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_persons IS 'Entregadores da plataforma. Um usuário pode ser entregador E cliente ao mesmo tempo através do sistema de perfis.';


--
-- Name: COLUMN delivery_persons.user_profile_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.delivery_persons.user_profile_id IS 'Referência ao user_profile com perfil delivery_person';


--
-- Name: COLUMN delivery_persons.vehicle_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.delivery_persons.vehicle_type IS 'Tipo de veículo: motorcycle, bike, car, scooter, on_foot';


--
-- Name: COLUMN delivery_persons.status; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.delivery_persons.status IS 'Status atual: available, busy, offline, on_break, inactive';


--
-- Name: tenants; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tenants (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    slug character varying(100) NOT NULL,
    logo_url text,
    primary_color character varying(7) DEFAULT '#ef4444'::character varying,
    secondary_color character varying(7) DEFAULT '#f97316'::character varying,
    delivery_time_min integer DEFAULT 30 NOT NULL,
    delivery_time_max integer DEFAULT 45 NOT NULL,
    rating numeric(2,1) DEFAULT 4.8 NOT NULL,
    minimum_order_value numeric(10,2) DEFAULT 25.00 NOT NULL,
    phone character varying(20),
    address text,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    admin_user_id uuid,
    terms_use text,
    privacy_policy text,
    return_policy text
);


ALTER TABLE public.tenants OWNER TO postgres;

--
-- Name: TABLE tenants; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.tenants IS 'Tabela de estabelecimentos/empresas para sistema multi-tenant';


--
-- Name: COLUMN tenants.slug; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.tenants.slug IS 'Identificador único do tenant na URL (ex: /delivery/pizzaria-centro)';


--
-- Name: COLUMN tenants.primary_color; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.tenants.primary_color IS 'Cor primária do tenant em formato hexadecimal';


--
-- Name: COLUMN tenants.secondary_color; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.tenants.secondary_color IS 'Cor secundária do tenant em formato hexadecimal';


--
-- Name: available_company_vehicles; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.available_company_vehicles AS
 SELECT cv.id,
    cv.tenant_id,
    cv.vehicle_type,
    cv.vehicle_plate,
    cv.vehicle_model,
    cv.vehicle_color,
    cv.vehicle_year,
    cv.registration_number,
    cv.registration_expiry,
    cv.has_insurance,
    cv.insurance_company,
    cv.insurance_policy,
    cv.insurance_expiry,
    cv.last_maintenance_date,
    cv.next_maintenance_date,
    cv.maintenance_notes,
    cv.odometer_reading,
    cv.is_active,
    cv.is_available,
    cv.current_delivery_person_id,
    cv.acquisition_cost,
    cv.acquisition_date,
    cv.monthly_cost,
    cv.notes,
    cv.photos,
    cv.created_at,
    cv.updated_at,
    t.name AS tenant_name,
    dp.full_name AS current_user_name
   FROM ((public.company_vehicles cv
     JOIN public.tenants t ON ((t.id = cv.tenant_id)))
     LEFT JOIN public.delivery_persons dp ON ((dp.id = cv.current_delivery_person_id)))
  WHERE (cv.is_active = true);


ALTER VIEW public.available_company_vehicles OWNER TO postgres;

--
-- Name: banners; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.banners (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone,
    title_pt text,
    description_pt text,
    image_url text,
    date_initial timestamp with time zone,
    date_end timestamp with time zone,
    redirect_url text,
    status public.status,
    sub_title_pt text,
    text_buttom_pt text,
    tag_id uuid,
    title_en text,
    sub_title_en text,
    description_en text,
    text_buttom_en text,
    title_es text,
    sub_title_es text,
    description_es text,
    text_buttom_es text,
    tenant_id uuid NOT NULL,
    location public.banner_location,
    color_one text,
    color_two text,
    color boolean
);


ALTER TABLE public.banners OWNER TO postgres;

--
-- Name: TABLE banners; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.banners IS 'Banners com suporte multilíngue (PT, EN, ES)';


--
-- Name: batch_sequence; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.batch_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.batch_sequence OWNER TO postgres;

--
-- Name: brands; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.brands (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    description text,
    is_active boolean DEFAULT true NOT NULL,
    sankhya_code text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    sort_order integer DEFAULT 0,
    logo_url text,
    website_url text,
    country text,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.brands OWNER TO postgres;

--
-- Name: business_settings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.business_settings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    delivery_time_min integer DEFAULT 30 NOT NULL,
    delivery_time_max integer DEFAULT 45 NOT NULL,
    minimum_order_value numeric(10,2) DEFAULT 25.00 NOT NULL,
    business_type character varying(20) DEFAULT 'delivery'::character varying NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    terms_use text,
    privacy_policy text,
    return_policy text
);


ALTER TABLE public.business_settings OWNER TO postgres;

--
-- Name: TABLE business_settings; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.business_settings IS 'Configurações de negócio - Reloaded';


--
-- Name: COLUMN business_settings.tenant_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.business_settings.tenant_id IS 'Reference to the tenant';


--
-- Name: COLUMN business_settings.delivery_time_min; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.business_settings.delivery_time_min IS 'Minimum delivery time in minutes';


--
-- Name: COLUMN business_settings.delivery_time_max; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.business_settings.delivery_time_max IS 'Maximum delivery time in minutes';


--
-- Name: COLUMN business_settings.minimum_order_value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.business_settings.minimum_order_value IS 'Minimum order value for delivery';


--
-- Name: COLUMN business_settings.business_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.business_settings.business_type IS 'Type of business (delivery, ecommerce, etc.)';


--
-- Name: business_types; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.business_types (
    id uuid NOT NULL,
    code character varying(50),
    name_pt character varying(100),
    name_en character varying(100),
    name_es character varying(100),
    description_pt text,
    description_en text,
    description_es text,
    icon character varying(100),
    color character varying(7),
    features jsonb,
    is_active boolean,
    sort_order integer,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE public.business_types OWNER TO postgres;

--
-- Name: TABLE business_types; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.business_types IS 'Types of businesses supported by the platform';


--
-- Name: COLUMN business_types.code; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.business_types.code IS 'Unique code identifier for the business type';


--
-- Name: COLUMN business_types.features; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.business_types.features IS 'JSON array of features supported by this business type';


--
-- Name: order_item_modifiers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.order_item_modifiers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    order_item_id uuid NOT NULL,
    modifier_id uuid NOT NULL,
    modifier_name text NOT NULL,
    quantity integer DEFAULT 1 NOT NULL,
    unit_price numeric(10,2) NOT NULL,
    total_price numeric(10,2) NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT order_item_modifiers_quantity_positive CHECK ((quantity > 0)),
    CONSTRAINT order_item_modifiers_total_price_positive CHECK ((total_price >= (0)::numeric)),
    CONSTRAINT order_item_modifiers_unit_price_positive CHECK ((unit_price >= (0)::numeric))
);


ALTER TABLE public.order_item_modifiers OWNER TO postgres;

--
-- Name: TABLE order_item_modifiers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.order_item_modifiers IS 'Modificadores dos itens - Reloaded';


--
-- Name: COLUMN order_item_modifiers.modifier_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.order_item_modifiers.modifier_name IS 'Nome do modificador no momento da compra (para histórico)';


--
-- Name: COLUMN order_item_modifiers.quantity; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.order_item_modifiers.quantity IS 'Quantidade do adicional (ex: 2x bacon)';


--
-- Name: COLUMN order_item_modifiers.unit_price; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.order_item_modifiers.unit_price IS 'Preço unitário do adicional no momento do pedido';


--
-- Name: COLUMN order_item_modifiers.total_price; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.order_item_modifiers.total_price IS 'Preço total (quantity * unit_price)';


--
-- Name: order_items; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.order_items (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    order_id uuid NOT NULL,
    product_id uuid NOT NULL,
    quantity integer NOT NULL,
    unit_price numeric(10,2) NOT NULL,
    total_price numeric(10,2) NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    customizations jsonb,
    CONSTRAINT order_items_quantity_positive CHECK ((quantity > 0))
);


ALTER TABLE public.order_items OWNER TO postgres;

--
-- Name: TABLE order_items; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.order_items IS 'Itens dos pedidos - Reloaded';


--
-- Name: COLUMN order_items.customizations; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.order_items.customizations IS 'Customizações em JSON (legado, usar order_item_modifiers)';


--
-- Name: products; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name_pt text NOT NULL,
    name_en text NOT NULL,
    name_es text NOT NULL,
    description_pt text,
    description_en text,
    description_es text,
    short_description_pt text,
    short_description_en text,
    short_description_es text,
    sku text NOT NULL,
    barcode text,
    brand text,
    model text,
    weight numeric(10,3),
    dimensions text,
    material text,
    color text,
    size text,
    tags text[],
    is_digital boolean DEFAULT false,
    is_featured boolean DEFAULT false,
    is_published boolean DEFAULT true,
    is_active boolean DEFAULT true,
    meta_title_pt text,
    meta_title_en text,
    meta_title_es text,
    meta_description_pt text,
    meta_description_en text,
    meta_description_es text,
    sankhya_code text,
    sankhya_synced boolean DEFAULT false,
    sankhya_cod_prod text,
    sankhya_cod_vol text DEFAULT 'UN'::text,
    sankhya_ref_forn text,
    sankhya_marca text,
    sankhya_uso_prod text DEFAULT 'B'::text,
    sankhya_ncm text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    brand_id uuid,
    price numeric(10,2) DEFAULT 0.00,
    product_category_id uuid,
    is_best_seller boolean DEFAULT false,
    image_url text,
    is_produced boolean,
    tenant_id uuid NOT NULL,
    product_type public.product_type_enum DEFAULT 'ecommerce'::public.product_type_enum,
    unit public.product_unit_enum DEFAULT 'un'::public.product_unit_enum NOT NULL
);


ALTER TABLE public.products OWNER TO postgres;

--
-- Name: TABLE products; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.products IS 'Tabela de produtos populada com itens de delivery (pastéis, salgados, bebidas)';


--
-- Name: COLUMN products.is_best_seller; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.products.is_best_seller IS 'Marca produto como "Mais Vendido" para exibir na home';


--
-- Name: COLUMN products.image_url; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.products.image_url IS 'URL da imagem principal do produto. Imagens adicionais devem usar gallery_images.';


--
-- Name: COLUMN products.product_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.products.product_type IS 'Tipo do produto (ecommerce ou delivery)';


--
-- Name: COLUMN products.unit; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.products.unit IS 'Unidade de medida para venda (kg, un, l, etc)';


--
-- Name: cart_with_modifiers; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.cart_with_modifiers AS
 SELECT o.id AS cart_id,
    o.user_id,
    o.tenant_id,
    o.total_amount,
    o.created_at,
    o.updated_at,
    oi.id AS item_id,
    oi.product_id,
    oi.quantity AS item_quantity,
    oi.unit_price AS item_unit_price,
    oi.total_price AS item_total_price,
    p.name_pt AS product_name_pt,
    p.name_en AS product_name_en,
    p.name_es AS product_name_es,
    p.image_url AS product_image,
    oim.id AS modifier_id,
    oim.modifier_name,
    oim.quantity AS modifier_quantity,
    oim.unit_price AS modifier_unit_price,
    oim.total_price AS modifier_total_price
   FROM (((public.orders o
     JOIN public.order_items oi ON ((o.id = oi.order_id)))
     LEFT JOIN public.products p ON ((oi.product_id = p.id)))
     LEFT JOIN public.order_item_modifiers oim ON ((oi.id = oim.order_item_id)))
  WHERE (o.is_draft = true);


ALTER VIEW public.cart_with_modifiers OWNER TO postgres;

--
-- Name: VIEW cart_with_modifiers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW public.cart_with_modifiers IS 'Carrinho com todos os modificadores/complementos dos itens';


--
-- Name: cash_register_sessions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cash_register_sessions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    opened_by uuid NOT NULL,
    closed_by uuid,
    opening_amount numeric(10,2) DEFAULT 0 NOT NULL,
    expected_amount numeric(10,2) DEFAULT 0,
    actual_amount numeric(10,2) DEFAULT 0,
    difference numeric(10,2) DEFAULT 0,
    opened_at timestamp with time zone DEFAULT now() NOT NULL,
    closed_at timestamp with time zone,
    notes text,
    is_closed boolean DEFAULT false NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.cash_register_sessions OWNER TO postgres;

--
-- Name: TABLE cash_register_sessions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.cash_register_sessions IS 'Sessões de abertura/fechamento de caixa';


--
-- Name: cash_register_transactions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cash_register_transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_id uuid NOT NULL,
    transaction_type text NOT NULL,
    payment_method public.payment_method NOT NULL,
    amount numeric(10,2) NOT NULL,
    service_session_id uuid,
    description text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.cash_register_transactions OWNER TO postgres;

--
-- Name: categories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.categories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    code character varying(50) NOT NULL,
    name_pt text NOT NULL,
    name_en text NOT NULL,
    name_es text NOT NULL,
    description_pt text,
    description_en text,
    description_es text,
    color character varying(7) DEFAULT '#3B82F6'::character varying,
    icon character varying(50),
    is_active boolean DEFAULT true,
    sort_order integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    parent_id uuid,
    category_type character varying(20) DEFAULT 'ecommerce'::character varying,
    tenant_id uuid NOT NULL,
    CONSTRAINT categories_category_type_check CHECK (((category_type)::text = ANY ((ARRAY['ecommerce'::character varying, 'delivery'::character varying, 'both'::character varying])::text[])))
);


ALTER TABLE public.categories OWNER TO postgres;

--
-- Name: COLUMN categories.category_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.categories.category_type IS 'Tipo da categoria: ecommerce (produtos normais), delivery (com adicionais) ou both (ambos)';


--
-- Name: COLUMN categories.tenant_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.categories.tenant_id IS 'ID do tenant proprietário da categoria';


--
-- Name: category_printer_mapping; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.category_printer_mapping (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    category_id uuid NOT NULL,
    printer_station_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.category_printer_mapping OWNER TO postgres;

--
-- Name: chat_messages; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.chat_messages (
    id bigint NOT NULL,
    created_at timestamp with time zone,
    phone text,
    nomewpp text,
    bot_message text,
    user_message text,
    message_type text,
    active boolean DEFAULT true
);


ALTER TABLE public.chat_messages OWNER TO postgres;

--
-- Name: chat_messages_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.chat_messages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.chat_messages_id_seq OWNER TO postgres;

--
-- Name: chat_messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.chat_messages_id_seq OWNED BY public.chat_messages.id;


--
-- Name: chats; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.chats (
    id bigint NOT NULL,
    created_at timestamp with time zone,
    phone text,
    updated_at text
);


ALTER TABLE public.chats OWNER TO postgres;

--
-- Name: chats_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.chats_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.chats_id_seq OWNER TO postgres;

--
-- Name: chats_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.chats_id_seq OWNED BY public.chats.id;


--
-- Name: company_vehicle_usage; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.company_vehicle_usage (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    company_vehicle_id uuid NOT NULL,
    delivery_person_id uuid NOT NULL,
    tenant_id uuid NOT NULL,
    start_date timestamp with time zone DEFAULT now() NOT NULL,
    end_date timestamp with time zone,
    odometer_start integer,
    odometer_end integer,
    distance_traveled integer GENERATED ALWAYS AS ((odometer_end - odometer_start)) STORED,
    fuel_cost numeric(10,2) DEFAULT 0,
    compensation_amount numeric(10,2) DEFAULT 0,
    notes text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.company_vehicle_usage OWNER TO postgres;

--
-- Name: TABLE company_vehicle_usage; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.company_vehicle_usage IS 'Histórico de uso de veículos da empresa por entregadores';


--
-- Name: COLUMN company_vehicle_usage.distance_traveled; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.company_vehicle_usage.distance_traveled IS 'Distância percorrida calculada automaticamente (odometer_end - odometer_start)';


--
-- Name: company_vehicle_usage_summary; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.company_vehicle_usage_summary AS
 SELECT cvu.id,
    cvu.company_vehicle_id,
    cvu.delivery_person_id,
    cvu.tenant_id,
    cvu.start_date,
    cvu.end_date,
    cvu.odometer_start,
    cvu.odometer_end,
    cvu.distance_traveled,
    cvu.fuel_cost,
    cvu.compensation_amount,
    cvu.notes,
    cvu.created_at,
    cvu.updated_at,
    cv.vehicle_plate,
    cv.vehicle_model,
    cv.vehicle_type,
    dp.full_name AS delivery_person_name,
    t.name AS tenant_name,
    (EXTRACT(epoch FROM (COALESCE(cvu.end_date, now()) - cvu.start_date)) / (3600)::numeric) AS hours_used
   FROM (((public.company_vehicle_usage cvu
     JOIN public.company_vehicles cv ON ((cv.id = cvu.company_vehicle_id)))
     JOIN public.delivery_persons dp ON ((dp.id = cvu.delivery_person_id)))
     JOIN public.tenants t ON ((t.id = cvu.tenant_id)));


ALTER VIEW public.company_vehicle_usage_summary OWNER TO postgres;

--
-- Name: countries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.countries (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name_pt text NOT NULL,
    name_en text NOT NULL,
    name_es text NOT NULL,
    code text NOT NULL,
    flag_emoji text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.countries OWNER TO postgres;

--
-- Name: dados_cliente; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.dados_cliente (
    id bigint NOT NULL,
    created_at timestamp with time zone,
    telefone text,
    nomewpp text,
    atendimento_ia text
);


ALTER TABLE public.dados_cliente OWNER TO postgres;

--
-- Name: dados_cliente_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.dados_cliente_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.dados_cliente_id_seq OWNER TO postgres;

--
-- Name: dados_cliente_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.dados_cliente_id_seq OWNED BY public.dados_cliente.id;


--
-- Name: delivery_addresses; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_addresses (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    street character varying(255) NOT NULL,
    number character varying(20) NOT NULL,
    complement character varying(255),
    neighborhood character varying(255) NOT NULL,
    city character varying(255) NOT NULL,
    state character varying(2) NOT NULL,
    zip_code character varying(8) NOT NULL,
    latitude numeric(10,8),
    longitude numeric(11,8),
    is_default boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.delivery_addresses OWNER TO postgres;

--
-- Name: TABLE delivery_addresses; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_addresses IS 'Endereços de entrega dos usuários';


--
-- Name: delivery_orders; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_orders (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    order_id uuid NOT NULL,
    delivery_address_id uuid NOT NULL,
    delivery_zone_id uuid,
    status public.delivery_status DEFAULT 'pending'::public.delivery_status,
    estimated_delivery_time timestamp with time zone,
    actual_delivery_time timestamp with time zone,
    freight_price numeric(10,2) DEFAULT 0 NOT NULL,
    distance_km numeric(8,2),
    delivery_person_name character varying(255),
    delivery_person_phone character varying(20),
    delivery_notes text,
    customer_notes text,
    shipping_provider_id uuid,
    shipping_service_id uuid,
    tracking_code character varying(255),
    freight_quote_id uuid,
    package_weight_kg numeric(8,2),
    package_dimensions jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    delivery_person_id uuid,
    assigned_at timestamp with time zone,
    picked_up_at timestamp with time zone,
    delivered_at timestamp with time zone
);


ALTER TABLE public.delivery_orders OWNER TO postgres;

--
-- Name: TABLE delivery_orders; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_orders IS 'Pedidos de entrega vinculados aos pedidos principais';


--
-- Name: delivery_person_ratings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_person_ratings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    delivery_order_id uuid NOT NULL,
    delivery_person_id uuid NOT NULL,
    user_id uuid NOT NULL,
    rating integer NOT NULL,
    comment text,
    punctuality_rating integer,
    professionalism_rating integer,
    care_rating integer,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT delivery_person_ratings_care_rating_check CHECK (((care_rating >= 1) AND (care_rating <= 5))),
    CONSTRAINT delivery_person_ratings_professionalism_rating_check CHECK (((professionalism_rating >= 1) AND (professionalism_rating <= 5))),
    CONSTRAINT delivery_person_ratings_punctuality_rating_check CHECK (((punctuality_rating >= 1) AND (punctuality_rating <= 5))),
    CONSTRAINT delivery_person_ratings_rating_check CHECK (((rating >= 1) AND (rating <= 5)))
);


ALTER TABLE public.delivery_person_ratings OWNER TO postgres;

--
-- Name: TABLE delivery_person_ratings; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_person_ratings IS 'Avaliações dos entregadores pelos clientes';


--
-- Name: delivery_person_stats; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.delivery_person_stats AS
SELECT
    NULL::uuid AS id,
    NULL::character varying(255) AS full_name,
    NULL::public.delivery_person_status AS status,
    NULL::public.vehicle_type AS vehicle_type,
    NULL::integer AS total_deliveries,
    NULL::integer AS successful_deliveries,
    NULL::integer AS failed_deliveries,
    NULL::numeric AS success_rate,
    NULL::numeric(3,2) AS average_rating,
    NULL::integer AS total_ratings,
    NULL::bigint AS active_tenants,
    NULL::numeric AS total_balance,
    NULL::numeric AS lifetime_earnings;


ALTER VIEW public.delivery_person_stats OWNER TO postgres;

--
-- Name: delivery_person_status_history; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_person_status_history (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    delivery_person_id uuid NOT NULL,
    previous_status public.delivery_person_status,
    new_status public.delivery_person_status NOT NULL,
    reason text,
    changed_by uuid,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.delivery_person_status_history OWNER TO postgres;

--
-- Name: delivery_person_transactions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_person_transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    delivery_order_id uuid,
    type character varying(20) NOT NULL,
    amount numeric(10,2) NOT NULL,
    description text,
    status character varying(20) DEFAULT 'pending'::character varying,
    created_at timestamp with time zone DEFAULT now(),
    completed_at timestamp with time zone
);


ALTER TABLE public.delivery_person_transactions OWNER TO postgres;

--
-- Name: TABLE delivery_person_transactions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_person_transactions IS 'Histórico de transações financeiras dos entregadores';


--
-- Name: COLUMN delivery_person_transactions.type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.delivery_person_transactions.type IS 'Tipo: earning, withdrawal, adjustment, bonus, penalty';


--
-- Name: delivery_person_vehicles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_person_vehicles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    delivery_person_id uuid NOT NULL,
    vehicle_type public.vehicle_type NOT NULL,
    vehicle_plate character varying(10) NOT NULL,
    vehicle_model character varying(100) NOT NULL,
    vehicle_color character varying(50),
    vehicle_year integer,
    registration_number character varying(20),
    registration_expiry date,
    has_insurance boolean DEFAULT false,
    insurance_company character varying(100),
    insurance_policy character varying(50),
    insurance_expiry date,
    driver_license character varying(20),
    driver_license_category character varying(5),
    driver_license_expiry date,
    is_active boolean DEFAULT true,
    is_primary boolean DEFAULT false,
    notes text,
    photos jsonb DEFAULT '[]'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.delivery_person_vehicles OWNER TO postgres;

--
-- Name: TABLE delivery_person_vehicles; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_person_vehicles IS 'Veículos próprios dos entregadores';


--
-- Name: COLUMN delivery_person_vehicles.is_primary; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.delivery_person_vehicles.is_primary IS 'Veículo principal do entregador (usado por padrão)';


--
-- Name: delivery_person_vehicles_summary; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.delivery_person_vehicles_summary AS
 SELECT dpv.id,
    dpv.delivery_person_id,
    dpv.vehicle_type,
    dpv.vehicle_plate,
    dpv.vehicle_model,
    dpv.vehicle_color,
    dpv.vehicle_year,
    dpv.registration_number,
    dpv.registration_expiry,
    dpv.has_insurance,
    dpv.insurance_company,
    dpv.insurance_policy,
    dpv.insurance_expiry,
    dpv.driver_license,
    dpv.driver_license_category,
    dpv.driver_license_expiry,
    dpv.is_active,
    dpv.is_primary,
    dpv.notes,
    dpv.photos,
    dpv.created_at,
    dpv.updated_at,
    dp.full_name AS delivery_person_name,
    dp.phone AS delivery_person_phone,
        CASE
            WHEN (dpv.insurance_expiry < CURRENT_DATE) THEN 'expired'::text
            WHEN (dpv.insurance_expiry < (CURRENT_DATE + '30 days'::interval)) THEN 'expiring_soon'::text
            ELSE 'valid'::text
        END AS insurance_status,
        CASE
            WHEN (dpv.driver_license_expiry < CURRENT_DATE) THEN 'expired'::text
            WHEN (dpv.driver_license_expiry < (CURRENT_DATE + '30 days'::interval)) THEN 'expiring_soon'::text
            ELSE 'valid'::text
        END AS license_status
   FROM (public.delivery_person_vehicles dpv
     JOIN public.delivery_persons dp ON ((dp.id = dpv.delivery_person_id)));


ALTER VIEW public.delivery_person_vehicles_summary OWNER TO postgres;

--
-- Name: delivery_person_wallet; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_person_wallet (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    delivery_person_id uuid NOT NULL,
    tenant_id uuid NOT NULL,
    balance numeric(10,2) DEFAULT 0,
    pending_balance numeric(10,2) DEFAULT 0,
    total_earned numeric(10,2) DEFAULT 0,
    total_withdrawn numeric(10,2) DEFAULT 0,
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.delivery_person_wallet OWNER TO postgres;

--
-- Name: TABLE delivery_person_wallet; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_person_wallet IS 'Carteira financeira dos entregadores por tenant';


--
-- Name: delivery_persons_with_tenants; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.delivery_persons_with_tenants AS
SELECT
    NULL::uuid AS id,
    NULL::uuid AS user_id,
    NULL::character varying(255) AS full_name,
    NULL::character varying(20) AS phone,
    NULL::character varying(255) AS email,
    NULL::character varying(20) AS document,
    NULL::date AS birth_date,
    NULL::character varying(255) AS street,
    NULL::character varying(20) AS number,
    NULL::character varying(255) AS complement,
    NULL::character varying(255) AS neighborhood,
    NULL::character varying(255) AS city,
    NULL::character varying(2) AS state,
    NULL::character varying(8) AS zip_code,
    NULL::public.vehicle_type AS vehicle_type,
    NULL::character varying(10) AS vehicle_plate,
    NULL::character varying(100) AS vehicle_model,
    NULL::character varying(50) AS vehicle_color,
    NULL::character varying(20) AS driver_license,
    NULL::character varying(5) AS driver_license_category,
    NULL::date AS driver_license_expiry,
    NULL::boolean AS has_vehicle_insurance,
    NULL::date AS vehicle_insurance_expiry,
    NULL::text AS photo_url,
    NULL::jsonb AS documents,
    NULL::public.delivery_person_status AS status,
    NULL::boolean AS is_active,
    NULL::boolean AS is_verified,
    NULL::numeric(10,8) AS current_latitude,
    NULL::numeric(11,8) AS current_longitude,
    NULL::timestamp with time zone AS last_location_update,
    NULL::integer AS total_deliveries,
    NULL::integer AS successful_deliveries,
    NULL::integer AS failed_deliveries,
    NULL::numeric(3,2) AS average_rating,
    NULL::integer AS total_ratings,
    NULL::timestamp with time zone AS created_at,
    NULL::timestamp with time zone AS updated_at,
    NULL::json AS tenants;


ALTER VIEW public.delivery_persons_with_tenants OWNER TO postgres;

--
-- Name: delivery_settings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_settings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    is_delivery_enabled boolean DEFAULT true NOT NULL,
    minimum_order_value numeric(10,2) DEFAULT 0,
    free_delivery_above numeric(10,2) DEFAULT NULL::numeric,
    freight_calculation_type public.freight_calculation_type DEFAULT 'fixed_price'::public.freight_calculation_type NOT NULL,
    base_freight_price numeric(10,2) DEFAULT 0,
    price_per_km numeric(10,2) DEFAULT 0,
    estimated_delivery_time_min integer DEFAULT 30,
    estimated_delivery_time_max integer DEFAULT 60,
    delivery_radius_km integer DEFAULT 10,
    delivery_start_time time without time zone DEFAULT '08:00:00'::time without time zone,
    delivery_end_time time without time zone DEFAULT '18:00:00'::time without time zone,
    delivery_days integer[] DEFAULT '{1,2,3,4,5,6,7}'::integer[],
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.delivery_settings OWNER TO postgres;

--
-- Name: TABLE delivery_settings; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_settings IS 'Configurações de entrega por empresa/tenant';


--
-- Name: delivery_vehicle_assignments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_vehicle_assignments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    delivery_order_id uuid,
    delivery_person_id uuid NOT NULL,
    company_vehicle_id uuid,
    personal_vehicle_id uuid,
    assignment_date timestamp with time zone DEFAULT now(),
    completion_date timestamp with time zone,
    distance_traveled numeric(10,2),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT check_one_vehicle_type CHECK ((((company_vehicle_id IS NOT NULL) AND (personal_vehicle_id IS NULL)) OR ((company_vehicle_id IS NULL) AND (personal_vehicle_id IS NOT NULL))))
);


ALTER TABLE public.delivery_vehicle_assignments OWNER TO postgres;

--
-- Name: TABLE delivery_vehicle_assignments; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_vehicle_assignments IS 'Vinculação de veículos (empresa ou pessoal) a entregas específicas';


--
-- Name: delivery_zone_ceps; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_zone_ceps (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    delivery_zone_id uuid NOT NULL,
    cep_start character varying(8) NOT NULL,
    cep_end character varying(8) NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.delivery_zone_ceps OWNER TO postgres;

--
-- Name: TABLE delivery_zone_ceps; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_zone_ceps IS 'Ranges de CEP para cada zona de entrega';


--
-- Name: delivery_zones; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.delivery_zones (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    freight_price numeric(10,2) DEFAULT 0 NOT NULL,
    is_free boolean DEFAULT false,
    estimated_time_min integer DEFAULT 30,
    estimated_time_max integer DEFAULT 60,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.delivery_zones OWNER TO postgres;

--
-- Name: TABLE delivery_zones; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.delivery_zones IS 'Zonas de entrega com configurações específicas';


--
-- Name: discounts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.discounts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    code text NOT NULL,
    name text NOT NULL,
    type public.discount_type NOT NULL,
    value numeric(10,2) NOT NULL,
    minimum_amount numeric(10,2),
    usage_limit integer,
    used_count integer DEFAULT 0,
    valid_from timestamp with time zone NOT NULL,
    valid_until timestamp with time zone,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    image_url text,
    title_pt text,
    title_en text,
    title_es text,
    description_pt text,
    description_en text,
    description_es text,
    category_id uuid,
    order_index integer DEFAULT 0,
    discount_percentage integer,
    terms_pt text,
    terms_en text,
    terms_es text,
    max_uses_per_user integer,
    applies_to_first_purchase_only boolean DEFAULT false,
    stackable boolean DEFAULT false,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.discounts OWNER TO postgres;

--
-- Name: COLUMN discounts.title_pt; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.title_pt IS 'Título da oferta em português (para exibição visual)';


--
-- Name: COLUMN discounts.title_en; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.title_en IS 'Título da oferta em inglês';


--
-- Name: COLUMN discounts.title_es; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.title_es IS 'Título da oferta em espanhol';


--
-- Name: COLUMN discounts.description_pt; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.description_pt IS 'Descrição da oferta em português';


--
-- Name: COLUMN discounts.description_en; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.description_en IS 'Descrição da oferta em inglês';


--
-- Name: COLUMN discounts.description_es; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.description_es IS 'Descrição da oferta em espanhol';


--
-- Name: COLUMN discounts.category_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.category_id IS 'Categoria à qual o desconto se aplica (NULL = todas)';


--
-- Name: COLUMN discounts.order_index; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.order_index IS 'Ordem de exibição nas listagens de ofertas';


--
-- Name: COLUMN discounts.discount_percentage; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.discount_percentage IS 'Percentual de desconto (quando type = percentage)';


--
-- Name: COLUMN discounts.terms_pt; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.terms_pt IS 'Regulamento/termos e condições em português';


--
-- Name: COLUMN discounts.terms_en; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.terms_en IS 'Regulamento/termos e condições em inglês';


--
-- Name: COLUMN discounts.terms_es; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.terms_es IS 'Regulamento/termos e condições em espanhol';


--
-- Name: COLUMN discounts.max_uses_per_user; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.max_uses_per_user IS 'Máximo de usos por usuário (NULL = ilimitado)';


--
-- Name: COLUMN discounts.applies_to_first_purchase_only; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.applies_to_first_purchase_only IS 'Desconto válido apenas na primeira compra';


--
-- Name: COLUMN discounts.stackable; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.discounts.stackable IS 'Pode ser combinado com outros descontos';


--
-- Name: documents; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.documents (
    id bigint NOT NULL,
    content text,
    metadata jsonb,
    embedding public.vector(1536)
);


ALTER TABLE public.documents OWNER TO postgres;

--
-- Name: documents_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.documents_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.documents_id_seq OWNER TO postgres;

--
-- Name: documents_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.documents_id_seq OWNED BY public.documents.id;


--
-- Name: event_images; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.event_images (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    event_id uuid,
    image_url text NOT NULL,
    caption_pt text,
    caption_en text,
    caption_es text,
    display_order integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.event_images OWNER TO postgres;

--
-- Name: events; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.events (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    title_pt text NOT NULL,
    title_en text NOT NULL,
    title_es text NOT NULL,
    description_pt text NOT NULL,
    description_en text NOT NULL,
    description_es text NOT NULL,
    event_date date NOT NULL,
    event_time time without time zone,
    location_pt text NOT NULL,
    location_en text NOT NULL,
    location_es text NOT NULL,
    venue text,
    type_pt text NOT NULL,
    type_en text NOT NULL,
    type_es text NOT NULL,
    max_attendees integer,
    current_attendees integer DEFAULT 0,
    registration_url text,
    is_virtual boolean DEFAULT false,
    is_featured boolean DEFAULT false,
    is_published boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.events OWNER TO postgres;

--
-- Name: financial_categories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.financial_categories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name_pt text NOT NULL,
    name_en text,
    name_es text,
    description text,
    type public.transaction_type NOT NULL,
    parent_id uuid,
    color text,
    icon text,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.financial_categories OWNER TO postgres;

--
-- Name: TABLE financial_categories; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.financial_categories IS 'Categorias de receitas e despesas';


--
-- Name: financial_transactions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.financial_transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    type public.transaction_type NOT NULL,
    category_id uuid,
    account_id uuid NOT NULL,
    supplier_id uuid,
    order_id uuid,
    description text NOT NULL,
    amount numeric(10,2) NOT NULL,
    payment_method public.payment_method,
    transaction_date date DEFAULT CURRENT_DATE NOT NULL,
    due_date date,
    paid_date date,
    status public.transaction_status DEFAULT 'pending'::public.transaction_status NOT NULL,
    reference_number text,
    attachment_url text,
    notes text,
    created_by uuid,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT financial_transactions_amount_positive CHECK ((amount > (0)::numeric))
);


ALTER TABLE public.financial_transactions OWNER TO postgres;

--
-- Name: TABLE financial_transactions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.financial_transactions IS 'Todas as transações financeiras (entrada/saída)';


--
-- Name: freight_quotes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.freight_quotes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    shipping_service_id uuid NOT NULL,
    order_id uuid,
    origin_cep character varying(8) NOT NULL,
    destination_cep character varying(8) NOT NULL,
    weight_kg numeric(8,2) NOT NULL,
    length_cm numeric(8,2) DEFAULT 0,
    width_cm numeric(8,2) DEFAULT 0,
    height_cm numeric(8,2) DEFAULT 0,
    base_price numeric(10,2) NOT NULL,
    additional_fees numeric(10,2) DEFAULT 0,
    total_price numeric(10,2) NOT NULL,
    currency character varying(3) DEFAULT 'BRL'::character varying,
    estimated_days_min integer NOT NULL,
    estimated_days_max integer NOT NULL,
    api_response jsonb,
    api_quote_id character varying(255),
    is_valid boolean DEFAULT true,
    expires_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.freight_quotes OWNER TO postgres;

--
-- Name: TABLE freight_quotes; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.freight_quotes IS 'Cotações de frete obtidas das APIs ou calculadas';


--
-- Name: gallery_images; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gallery_images (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    entity_id uuid NOT NULL,
    media_item_id uuid NOT NULL,
    sort_order integer DEFAULT 0 NOT NULL,
    alt_text text,
    caption text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    entity_type text DEFAULT 'news'::text NOT NULL
);


ALTER TABLE public.gallery_images OWNER TO postgres;

--
-- Name: TABLE gallery_images; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.gallery_images IS 'Galeria de imagens para múltiplas entidades (news, products, events, etc)';


--
-- Name: COLUMN gallery_images.entity_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gallery_images.entity_id IS 'ID da entidade correspondente ao entity_type';


--
-- Name: COLUMN gallery_images.sort_order; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gallery_images.sort_order IS 'Ordem de exibição das imagens na galeria';


--
-- Name: COLUMN gallery_images.alt_text; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gallery_images.alt_text IS 'Texto alternativo específico para esta notícia';


--
-- Name: COLUMN gallery_images.caption; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gallery_images.caption IS 'Legenda da imagem na galeria';


--
-- Name: COLUMN gallery_images.entity_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.gallery_images.entity_type IS 'Tipo de entidade: news, products, events, offices, etc';


--
-- Name: group_discounts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.group_discounts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    sankhya_group_code character varying(50) NOT NULL,
    sankhya_promotion_number character varying(50),
    sankhya_company_code character varying(50),
    group_name character varying(255) NOT NULL,
    discount_percentage numeric(5,2),
    discount_amount numeric(10,2),
    discount_type character varying(20) DEFAULT 'percentage'::character varying,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone NOT NULL,
    description text,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.group_discounts OWNER TO postgres;

--
-- Name: TABLE group_discounts; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.group_discounts IS 'Descontos por grupo de produtos sincronizados com a Sankhya';


--
-- Name: COLUMN group_discounts.sankhya_group_code; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.group_discounts.sankhya_group_code IS 'Código do grupo de desconto na Sankhya (GRUPODESCPROD)';


--
-- Name: COLUMN group_discounts.sankhya_promotion_number; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.group_discounts.sankhya_promotion_number IS 'Número da promoção na Sankhya (NUPROMOCAO)';


--
-- Name: COLUMN group_discounts.sankhya_company_code; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.group_discounts.sankhya_company_code IS 'Código da empresa na Sankhya (CODEMP)';


--
-- Name: COLUMN group_discounts.group_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.group_discounts.group_name IS 'Nome descritivo do grupo de produtos';


--
-- Name: COLUMN group_discounts.discount_percentage; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.group_discounts.discount_percentage IS 'Percentual de desconto (VLRDESC quando tipo = percentage)';


--
-- Name: COLUMN group_discounts.discount_amount; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.group_discounts.discount_amount IS 'Valor fixo do desconto (VLRDESC quando tipo = fixed)';


--
-- Name: COLUMN group_discounts.discount_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.group_discounts.discount_type IS 'Tipo de desconto: percentage ou fixed';


--
-- Name: COLUMN group_discounts.start_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.group_discounts.start_date IS 'Data inicial da promoção (DTINICIAL)';


--
-- Name: COLUMN group_discounts.end_date; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.group_discounts.end_date IS 'Data final da promoção (DTFINAL)';


--
-- Name: COLUMN group_discounts.description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.group_discounts.description IS 'Descrição da promoção (DESCRPROMOCAO)';


--
-- Name: ingredient_cost_history; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ingredient_cost_history (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    ingredient_id uuid NOT NULL,
    unit_cost numeric(10,4) NOT NULL,
    effective_date timestamp with time zone DEFAULT now() NOT NULL,
    supplier_id uuid,
    notes text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.ingredient_cost_history OWNER TO postgres;

--
-- Name: TABLE ingredient_cost_history; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.ingredient_cost_history IS 'Histórico de custos dos ingredientes';


--
-- Name: ingredients; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ingredients (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    unit_id uuid NOT NULL,
    unit_cost numeric(10,6) DEFAULT 0 NOT NULL,
    stock_quantity numeric(10,2) DEFAULT 0,
    min_stock_quantity numeric(10,2) DEFAULT 0,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    item_type public.item_type DEFAULT 'ingredient'::public.item_type NOT NULL,
    name_pt text NOT NULL,
    name_en text NOT NULL,
    name_es text NOT NULL,
    description_pt text,
    description_en text,
    description_es text,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.ingredients OWNER TO postgres;

--
-- Name: TABLE ingredients; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.ingredients IS 'Ingredientes do sistema. Fornecedor é registrado na compra, não no ingrediente.';


--
-- Name: COLUMN ingredients.item_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.ingredients.item_type IS 'Tipo do item: ingredient (receitas), product (revenda), material (consumo)';


--
-- Name: installments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.installments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    transaction_id uuid NOT NULL,
    installment_number integer NOT NULL,
    total_installments integer NOT NULL,
    amount numeric(10,2) NOT NULL,
    due_date date NOT NULL,
    paid_date date,
    status public.transaction_status DEFAULT 'pending'::public.transaction_status NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT installments_installment_positive CHECK ((installment_number > 0)),
    CONSTRAINT installments_total_positive CHECK ((total_installments > 0))
);


ALTER TABLE public.installments OWNER TO postgres;

--
-- Name: TABLE installments; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.installments IS 'Parcelas de transações parceladas';


--
-- Name: languages; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.languages (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    code character varying(5) NOT NULL,
    name text NOT NULL,
    native_name text NOT NULL,
    flag_emoji text,
    is_active boolean DEFAULT true NOT NULL,
    is_default boolean DEFAULT false NOT NULL,
    sort_order integer DEFAULT 0 NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.languages OWNER TO postgres;

--
-- Name: TABLE languages; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.languages IS 'Idiomas disponíveis no sistema. Novos idiomas podem ser adicionados facilmente.';


--
-- Name: COLUMN languages.code; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.languages.code IS 'Código ISO do idioma (pt, en, es, pt-BR, en-US, etc)';


--
-- Name: COLUMN languages.is_default; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.languages.is_default IS 'Apenas um idioma deve ser marcado como padrão';


--
-- Name: measurement_units; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.measurement_units (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    abbreviation text NOT NULL,
    type public.unit_type NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    conversion_factor numeric(15,6) DEFAULT 1.0,
    base_unit_id uuid
);


ALTER TABLE public.measurement_units OWNER TO postgres;

--
-- Name: TABLE measurement_units; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.measurement_units IS 'Unidades de medida (kg, g, l, ml, un)';


--
-- Name: COLUMN measurement_units.type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.measurement_units.type IS 'Tipo de unidade: mass (peso), volume, length (comprimento), unit (unidade), other';


--
-- Name: COLUMN measurement_units.conversion_factor; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.measurement_units.conversion_factor IS 'Fator de conversão para a unidade base do tipo. Ex: 1kg = 1000g (fator: 1000)';


--
-- Name: COLUMN measurement_units.base_unit_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.measurement_units.base_unit_id IS 'Referência para a unidade base. Ex: kg -> g (g é a base)';


--
-- Name: media_items; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.media_items (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    url text NOT NULL,
    filename text NOT NULL,
    size bigint NOT NULL,
    type text NOT NULL,
    alt_text text,
    description text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.media_items OWNER TO postgres;

--
-- Name: menu_items; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.menu_items (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    label text NOT NULL,
    url text NOT NULL,
    icon text DEFAULT 'link'::text,
    type text DEFAULT 'link'::text,
    category_id uuid,
    order_index integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT menu_items_type_check CHECK ((type = ANY (ARRAY['link'::text, 'category'::text, 'page'::text])))
);


ALTER TABLE public.menu_items OWNER TO postgres;

--
-- Name: product_modifiers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_modifiers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name_pt character varying(255) NOT NULL,
    name_en character varying(255) NOT NULL,
    name_es character varying(255) NOT NULL,
    description_pt text,
    description_en text,
    description_es text,
    price_adjustment numeric(10,2) DEFAULT 0.00,
    price_adjustment_type character varying(20) DEFAULT 'fixed'::character varying,
    has_stock boolean DEFAULT true,
    stock_quantity integer DEFAULT 0,
    is_available boolean DEFAULT true,
    image_url text,
    is_default boolean DEFAULT false,
    sort_order integer DEFAULT 0,
    is_active boolean DEFAULT true,
    sankhya_code text,
    sankhya_product_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    ingredient_id uuid,
    use_ingredient_stock boolean DEFAULT false,
    ingredient_quantity numeric(10,3) DEFAULT 1.0,
    ingredient_unit_id uuid,
    tenant_id uuid NOT NULL,
    CONSTRAINT check_ingredient_stock_consistency CHECK (((use_ingredient_stock = false) OR ((use_ingredient_stock = true) AND (ingredient_id IS NOT NULL)))),
    CONSTRAINT product_modifiers_price_adjustment_type_check CHECK (((price_adjustment_type)::text = ANY ((ARRAY['fixed'::character varying, 'percentage'::character varying])::text[])))
);


ALTER TABLE public.product_modifiers OWNER TO postgres;

--
-- Name: TABLE product_modifiers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_modifiers IS 'Opções dentro dos grupos: Grande, Bacon, Mussarela Extra, etc';


--
-- Name: COLUMN product_modifiers.ingredient_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_modifiers.ingredient_id IS 'ID do ingrediente associado a este modificador (opcional)';


--
-- Name: COLUMN product_modifiers.use_ingredient_stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_modifiers.use_ingredient_stock IS 'Se true, consome estoque do ingrediente quando o modificador é usado';


--
-- Name: COLUMN product_modifiers.ingredient_quantity; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_modifiers.ingredient_quantity IS 'Quantidade do ingrediente usada por porção do modificador';


--
-- Name: COLUMN product_modifiers.ingredient_unit_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_modifiers.ingredient_unit_id IS 'Unidade de medida da quantidade do ingrediente';


--
-- Name: modifiers_with_ingredients; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.modifiers_with_ingredients AS
 SELECT pm.id,
    pm.name_pt,
    pm.name_en,
    pm.name_es,
    pm.description_pt,
    pm.description_en,
    pm.description_es,
    pm.price_adjustment,
    pm.price_adjustment_type,
    pm.has_stock,
    pm.stock_quantity,
    pm.is_available,
    pm.image_url,
    pm.is_default,
    pm.sort_order,
    pm.is_active,
    pm.sankhya_code,
    pm.sankhya_product_id,
    pm.created_at,
    pm.updated_at,
    pm.ingredient_id,
    pm.use_ingredient_stock,
    pm.ingredient_quantity,
    pm.ingredient_unit_id,
    i.name_pt AS ingredient_name_pt,
    i.name_en AS ingredient_name_en,
    i.name_es AS ingredient_name_es,
    i.unit_cost AS ingredient_cost,
    mu.name AS ingredient_unit_name,
    mu.abbreviation AS ingredient_unit_abbreviation,
    public.check_modifier_availability(pm.id) AS stock_available
   FROM ((public.product_modifiers pm
     LEFT JOIN public.ingredients i ON ((pm.ingredient_id = i.id)))
     LEFT JOIN public.measurement_units mu ON ((pm.ingredient_unit_id = mu.id)));


ALTER VIEW public.modifiers_with_ingredients OWNER TO postgres;

--
-- Name: VIEW modifiers_with_ingredients; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW public.modifiers_with_ingredients IS 'View que combina modificadores com dados dos ingredientes associados e verifica disponibilidade de estoque';


--
-- Name: modules; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.modules (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    code character varying(50) NOT NULL,
    name_pt character varying(100) NOT NULL,
    name_en character varying(100),
    name_es character varying(100),
    description_pt text,
    description_en text,
    description_es text,
    icon character varying(100),
    color character varying(7) DEFAULT '#3b82f6'::character varying,
    is_active boolean DEFAULT true,
    sort_order integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.modules OWNER TO postgres;

--
-- Name: TABLE modules; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.modules IS 'Available modules in the system';


--
-- Name: n8n_chat_histories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.n8n_chat_histories (
    id integer NOT NULL,
    session_id character varying(255) NOT NULL,
    message jsonb NOT NULL
);


ALTER TABLE public.n8n_chat_histories OWNER TO postgres;

--
-- Name: n8n_chat_histories_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.n8n_chat_histories_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.n8n_chat_histories_id_seq OWNER TO postgres;

--
-- Name: n8n_chat_histories_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.n8n_chat_histories_id_seq OWNED BY public.n8n_chat_histories.id;


--
-- Name: news; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.news (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    title_pt text NOT NULL,
    title_en text NOT NULL,
    title_es text NOT NULL,
    summary_pt text NOT NULL,
    summary_en text NOT NULL,
    summary_es text NOT NULL,
    content_pt text,
    content_en text,
    content_es text,
    image_url text,
    published_date date NOT NULL,
    is_featured boolean DEFAULT false,
    is_published boolean DEFAULT true,
    author text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    video_url text,
    category_id uuid
);


ALTER TABLE public.news OWNER TO postgres;

--
-- Name: TABLE news; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.news IS 'Tabela de notícias - galeria de imagens agora é gerenciada via tabela news_gallery_images';


--
-- Name: notification_recipients; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.notification_recipients (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    notification_id uuid NOT NULL,
    user_id uuid NOT NULL,
    is_read boolean DEFAULT false,
    read_at timestamp with time zone
);


ALTER TABLE public.notification_recipients OWNER TO postgres;

--
-- Name: TABLE notification_recipients; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.notification_recipients IS 'Destinatários das notificações e status de leitura';


--
-- Name: COLUMN notification_recipients.is_read; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.notification_recipients.is_read IS 'Indica se a notificação foi lida';


--
-- Name: COLUMN notification_recipients.read_at; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.notification_recipients.read_at IS 'Data/hora em que foi lida';


--
-- Name: notifications; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.notifications (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    tenant_id uuid NOT NULL,
    title text NOT NULL,
    content text NOT NULL,
    big_image text,
    url text,
    param_name text,
    item_id text,
    notification_type character varying(50) DEFAULT 'general'::character varying,
    priority character varying(20) DEFAULT 'normal'::character varying,
    is_active boolean DEFAULT true,
    scheduled_at timestamp with time zone,
    expires_at timestamp with time zone,
    CONSTRAINT notifications_notification_type_check CHECK (((notification_type)::text = ANY ((ARRAY['general'::character varying, 'order'::character varying, 'promotion'::character varying, 'system'::character varying, 'support'::character varying])::text[]))),
    CONSTRAINT notifications_priority_check CHECK (((priority)::text = ANY ((ARRAY['low'::character varying, 'normal'::character varying, 'high'::character varying, 'urgent'::character varying])::text[])))
);


ALTER TABLE public.notifications OWNER TO postgres;

--
-- Name: TABLE notifications; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.notifications IS 'Notificações do sistema para usuários';


--
-- Name: COLUMN notifications.param_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.notifications.param_name IS 'Nome do parâmetro para navegação (ex: orderId, productId)';


--
-- Name: COLUMN notifications.item_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.notifications.item_id IS 'ID do item relacionado à notificação';


--
-- Name: COLUMN notifications.notification_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.notifications.notification_type IS 'Tipo: general, order, promotion, system, support';


--
-- Name: COLUMN notifications.priority; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.notifications.priority IS 'Prioridade: low, normal, high, urgent';


--
-- Name: COLUMN notifications.scheduled_at; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.notifications.scheduled_at IS 'Data/hora para envio agendado';


--
-- Name: COLUMN notifications.expires_at; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.notifications.expires_at IS 'Data/hora de expiração da notificação';


--
-- Name: notifications_stats; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.notifications_stats AS
 SELECT n.id,
    n.tenant_id,
    n.title,
    n.notification_type,
    n.created_at,
    count(nr.id) AS total_recipients,
    count(
        CASE
            WHEN (nr.is_read = true) THEN 1
            ELSE NULL::integer
        END) AS total_read,
    count(
        CASE
            WHEN (nr.is_read = false) THEN 1
            ELSE NULL::integer
        END) AS total_unread,
    round(
        CASE
            WHEN (count(nr.id) > 0) THEN (((count(
            CASE
                WHEN (nr.is_read = true) THEN 1
                ELSE NULL::integer
            END))::numeric / (count(nr.id))::numeric) * (100)::numeric)
            ELSE (0)::numeric
        END, 2) AS read_percentage
   FROM (public.notifications n
     LEFT JOIN public.notification_recipients nr ON ((n.id = nr.notification_id)))
  GROUP BY n.id, n.tenant_id, n.title, n.notification_type, n.created_at;


ALTER VIEW public.notifications_stats OWNER TO postgres;

--
-- Name: office_especialities; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.office_especialities (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    office_id uuid,
    specialitie_id uuid
);


ALTER TABLE public.office_especialities OWNER TO postgres;

--
-- Name: offices; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.offices (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    country_id uuid,
    city text NOT NULL,
    address text NOT NULL,
    latitude numeric(10,8),
    longitude numeric(11,8),
    phone text,
    email text,
    website text,
    description_pt text,
    description_en text,
    description_es text,
    contact_person text,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    instagram text,
    facebook text,
    linkedin text,
    youtube text,
    tiktok text,
    whatsapp text,
    image_url text,
    image_cover_url text
);


ALTER TABLE public.offices OWNER TO postgres;

--
-- Name: order_sequence; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.order_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.order_sequence OWNER TO postgres;

--
-- Name: order_session_item_modifiers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.order_session_item_modifiers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    order_item_id uuid NOT NULL,
    modifier_id uuid NOT NULL,
    modifier_name text NOT NULL,
    quantity integer DEFAULT 1 NOT NULL,
    unit_price numeric(10,2) NOT NULL,
    total_price numeric(10,2) NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.order_session_item_modifiers OWNER TO postgres;

--
-- Name: TABLE order_session_item_modifiers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.order_session_item_modifiers IS 'Modifiers for items in restaurant table sessions';


--
-- Name: order_session_items; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.order_session_items (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_id uuid NOT NULL,
    product_id uuid NOT NULL,
    quantity integer DEFAULT 1 NOT NULL,
    unit_price numeric(10,2) NOT NULL,
    total_price numeric(10,2) NOT NULL,
    kitchen_status public.kitchen_status DEFAULT 'pending'::public.kitchen_status NOT NULL,
    notes text,
    sent_to_kitchen_at timestamp with time zone,
    prepared_at timestamp with time zone,
    delivered_at timestamp with time zone,
    cancelled_at timestamp with time zone,
    cancellation_reason text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT order_session_items_quantity_positive CHECK ((quantity > 0))
);


ALTER TABLE public.order_session_items OWNER TO postgres;

--
-- Name: TABLE order_session_items; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.order_session_items IS 'Items in restaurant table sessions';


--
-- Name: order_sessions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.order_sessions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_number text NOT NULL,
    table_id uuid,
    waiter_id uuid,
    service_type public.service_type DEFAULT 'dine_in'::public.service_type NOT NULL,
    customer_name text,
    customer_count integer DEFAULT 1,
    opened_at timestamp with time zone DEFAULT now() NOT NULL,
    closed_at timestamp with time zone,
    total_amount numeric(10,2) DEFAULT 0,
    discount_amount numeric(10,2) DEFAULT 0,
    service_charge numeric(10,2) DEFAULT 0,
    final_amount numeric(10,2) DEFAULT 0,
    notes text,
    is_closed boolean DEFAULT false NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.order_sessions OWNER TO postgres;

--
-- Name: TABLE order_sessions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.order_sessions IS 'Restaurant table sessions (dine-in orders)';


--
-- Name: order_summary; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.order_summary AS
SELECT
    NULL::uuid AS id,
    NULL::text AS order_number,
    NULL::uuid AS user_id,
    NULL::uuid AS tenant_id,
    NULL::public.order_status AS status,
    NULL::public.payment_status AS payment_status,
    NULL::public.payment_method_type AS payment_method,
    NULL::numeric(10,2) AS total_amount,
    NULL::numeric(10,2) AS shipping_amount,
    NULL::numeric(10,2) AS discount_amount,
    NULL::boolean AS is_draft,
    NULL::timestamp with time zone AS created_at,
    NULL::timestamp with time zone AS updated_at,
    NULL::bigint AS items_count,
    NULL::bigint AS modifiers_count,
    NULL::bigint AS total_items_quantity,
    NULL::text AS user_email,
    NULL::text AS user_name;


ALTER VIEW public.order_summary OWNER TO postgres;

--
-- Name: VIEW order_summary; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW public.order_summary IS 'Resumo completo dos pedidos com contagem de itens e modificadores';


--
-- Name: payments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.payments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    order_id uuid NOT NULL,
    payment_method public.payment_method_type NOT NULL,
    amount numeric(10,2) NOT NULL,
    status public.payment_status DEFAULT 'pending'::public.payment_status NOT NULL,
    transaction_id text,
    gateway_response jsonb,
    processed_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.payments OWNER TO postgres;

--
-- Name: plan_modules; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.plan_modules (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    plan_id uuid NOT NULL,
    module_id uuid NOT NULL,
    is_included boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.plan_modules OWNER TO postgres;

--
-- Name: TABLE plan_modules; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.plan_modules IS 'Default modules included in each plan';


--
-- Name: plans; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.plans (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    price numeric(10,2) NOT NULL,
    features jsonb DEFAULT '{}'::jsonb NOT NULL,
    max_tenants integer DEFAULT 1 NOT NULL,
    max_products integer,
    max_orders_per_month integer,
    max_users integer,
    storage_limit_gb integer,
    api_calls_per_month integer,
    is_active boolean DEFAULT true NOT NULL,
    is_popular boolean DEFAULT false NOT NULL,
    sort_order integer DEFAULT 0 NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    business_type character varying(20) DEFAULT 'delivery'::character varying NOT NULL,
    billing_cycle public.billing_cycle_enum NOT NULL,
    support_level public.support_level_enum NOT NULL,
    CONSTRAINT plans_business_type_check CHECK (((business_type)::text = ANY ((ARRAY['delivery'::character varying, 'ecommerce'::character varying, 'pos'::character varying, 'mixed'::character varying, 'market'::character varying, 'petshop'::character varying])::text[])))
);


ALTER TABLE public.plans OWNER TO postgres;

--
-- Name: TABLE plans; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.plans IS 'Planos de assinatura disponíveis';


--
-- Name: COLUMN plans.features; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.plans.features IS 'Recursos disponíveis no plano em formato JSON';


--
-- Name: COLUMN plans.max_tenants; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.plans.max_tenants IS 'Número máximo de tenants (-1 = ilimitado)';


--
-- Name: COLUMN plans.max_products; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.plans.max_products IS 'Número máximo de produtos (-1 = ilimitado)';


--
-- Name: COLUMN plans.max_orders_per_month; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.plans.max_orders_per_month IS 'Número máximo de pedidos por mês (-1 = ilimitado)';


--
-- Name: COLUMN plans.max_users; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.plans.max_users IS 'Número máximo de usuários (-1 = ilimitado)';


--
-- Name: COLUMN plans.storage_limit_gb; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.plans.storage_limit_gb IS 'Limite de armazenamento em GB (-1 = ilimitado)';


--
-- Name: COLUMN plans.api_calls_per_month; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.plans.api_calls_per_month IS 'Número máximo de chamadas API por mês (-1 = ilimitado)';


--
-- Name: COLUMN plans.business_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.plans.business_type IS 'Type of business this plan is designed for';


--
-- Name: printer_stations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.printer_stations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    type text NOT NULL,
    ip_address text,
    printer_model text,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.printer_stations OWNER TO postgres;

--
-- Name: TABLE printer_stations; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.printer_stations IS 'Impressoras e estações de trabalho (cozinha, bar, etc)';


--
-- Name: product_categories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_categories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name_pt text NOT NULL,
    name_en text NOT NULL,
    name_es text NOT NULL,
    description_pt text,
    description_en text,
    description_es text,
    parent_id uuid,
    slug_pt text NOT NULL,
    slug_en text NOT NULL,
    slug_es text NOT NULL,
    image_url text,
    icon text,
    color text,
    sort_order integer DEFAULT 0,
    is_active boolean DEFAULT true,
    sankhya_code text,
    sankhya_synced boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    category_type public.category_type,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.product_categories OWNER TO postgres;

--
-- Name: TABLE product_categories; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_categories IS 'Categorias hierárquicas de produtos';


--
-- Name: product_composition_eligibility; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_composition_eligibility (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    composition_id uuid NOT NULL,
    product_id uuid NOT NULL,
    category_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT check_product_or_category CHECK ((((product_id IS NOT NULL) AND (category_id IS NULL)) OR ((product_id IS NULL) AND (category_id IS NOT NULL))))
);


ALTER TABLE public.product_composition_eligibility OWNER TO postgres;

--
-- Name: TABLE product_composition_eligibility; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_composition_eligibility IS 'Produtos/categorias elegíveis para composições';


--
-- Name: product_compositions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_compositions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    min_products integer DEFAULT 2,
    max_products integer DEFAULT 2,
    allow_different_sizes boolean DEFAULT false,
    price_calculation_type character varying(20) DEFAULT 'average'::character varying,
    fixed_price numeric(10,2),
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT product_compositions_price_calculation_type_check CHECK (((price_calculation_type)::text = ANY ((ARRAY['average'::character varying, 'highest'::character varying, 'lowest'::character varying, 'sum'::character varying, 'fixed'::character varying])::text[])))
);


ALTER TABLE public.product_compositions OWNER TO postgres;

--
-- Name: TABLE product_compositions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_compositions IS 'Configuração de combos (ex: pizza meio a meio)';


--
-- Name: product_cost_history; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_cost_history (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    unit_cost numeric(10,2) NOT NULL,
    supplier_id uuid,
    movement_date timestamp with time zone DEFAULT now() NOT NULL,
    notes text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.product_cost_history OWNER TO postgres;

--
-- Name: product_images; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_images (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    image_url text NOT NULL,
    filename text,
    alt_text text,
    description text,
    sort_order integer DEFAULT 0 NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.product_images OWNER TO postgres;

--
-- Name: TABLE product_images; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_images IS 'Galeria de imagens dos produtos';


--
-- Name: COLUMN product_images.product_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_images.product_id IS 'ID do produto';


--
-- Name: COLUMN product_images.image_url; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_images.image_url IS 'URL da imagem';


--
-- Name: COLUMN product_images.sort_order; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_images.sort_order IS 'Ordem de exibição das imagens na galeria';


--
-- Name: product_ingredient_compositions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_ingredient_compositions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    ingredient_id uuid NOT NULL,
    quantity numeric(10,4) NOT NULL,
    unit_id uuid NOT NULL,
    cost_per_unit numeric(10,4),
    notes text,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.product_ingredient_compositions OWNER TO postgres;

--
-- Name: TABLE product_ingredient_compositions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_ingredient_compositions IS 'Composição/Receita dos produtos com ingredientes';


--
-- Name: product_ingredient_quantities; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_ingredient_quantities (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    ingredient_id uuid NOT NULL,
    modifier_id uuid,
    quantity numeric(10,3) DEFAULT 0 NOT NULL,
    unit_id uuid NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.product_ingredient_quantities OWNER TO postgres;

--
-- Name: TABLE product_ingredient_quantities; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_ingredient_quantities IS 'Armazena quantidades específicas de ingredientes por produto e modificador (tamanho)';


--
-- Name: COLUMN product_ingredient_quantities.modifier_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_ingredient_quantities.modifier_id IS 'NULL = quantidade base, NOT NULL = quantidade para modificador específico (tamanho)';


--
-- Name: COLUMN product_ingredient_quantities.quantity; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_ingredient_quantities.quantity IS 'Quantidade na unidade base do ingrediente';


--
-- Name: COLUMN product_ingredient_quantities.unit_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_ingredient_quantities.unit_id IS 'Unidade de medida para a quantidade';


--
-- Name: product_modifier_group_modifiers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_modifier_group_modifiers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    group_id uuid NOT NULL,
    modifier_id uuid NOT NULL,
    sort_order integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.product_modifier_group_modifiers OWNER TO postgres;

--
-- Name: TABLE product_modifier_group_modifiers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_modifier_group_modifiers IS 'Relacionamento N:N entre grupos de modificadores e modificadores individuais';


--
-- Name: COLUMN product_modifier_group_modifiers.sort_order; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_modifier_group_modifiers.sort_order IS 'Ordem do modificador dentro do grupo específico';


--
-- Name: product_modifier_group_relations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_modifier_group_relations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    group_id uuid NOT NULL,
    min_selections integer,
    max_selections integer,
    is_required boolean,
    sort_order integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    tenant_id uuid
);


ALTER TABLE public.product_modifier_group_relations OWNER TO postgres;

--
-- Name: TABLE product_modifier_group_relations; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_modifier_group_relations IS 'Relacionamento entre produtos e grupos de modificadores';


--
-- Name: product_modifier_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_modifier_groups (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name_pt character varying(255) NOT NULL,
    name_en character varying(255) NOT NULL,
    name_es character varying(255) NOT NULL,
    description_pt text,
    description_en text,
    description_es text,
    min_selections integer DEFAULT 0,
    max_selections integer DEFAULT 1,
    is_required boolean DEFAULT false,
    sort_order integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    tenant_id uuid NOT NULL,
    selection_type public.selection_type_enum DEFAULT 'single'::public.selection_type_enum,
    modifier_type public.modifier_type_enum DEFAULT 'single_choice'::public.modifier_type_enum
);


ALTER TABLE public.product_modifier_groups OWNER TO postgres;

--
-- Name: TABLE product_modifier_groups; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_modifier_groups IS 'Grupos de modificadores: Tamanhos, Adicionais, Sabores, etc';


--
-- Name: COLUMN product_modifier_groups.selection_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_modifier_groups.selection_type IS 'Tipo de seleção (single ou multiple)';


--
-- Name: COLUMN product_modifier_groups.modifier_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_modifier_groups.modifier_type IS 'Tipo de modificador (single_choice, multiple_choice ou quantity_based)';


--
-- Name: product_modifier_prices; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_modifier_prices (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    modifier_id uuid NOT NULL,
    price_adjustment numeric(10,2) DEFAULT 0 NOT NULL,
    price_adjustment_type text DEFAULT 'fixed'::text NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT product_modifier_prices_price_adjustment_type_check CHECK ((price_adjustment_type = ANY (ARRAY['fixed'::text, 'percentage'::text])))
);


ALTER TABLE public.product_modifier_prices OWNER TO postgres;

--
-- Name: TABLE product_modifier_prices; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_modifier_prices IS 'Stores specific price adjustments for modifiers per product';


--
-- Name: COLUMN product_modifier_prices.price_adjustment; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_modifier_prices.price_adjustment IS 'Price adjustment amount (positive or negative)';


--
-- Name: COLUMN product_modifier_prices.price_adjustment_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_modifier_prices.price_adjustment_type IS 'Type of price adjustment: fixed amount or percentage';


--
-- Name: product_prices; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_prices (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    price numeric(10,2) NOT NULL,
    compare_price numeric(10,2),
    cost_price numeric(10,2),
    currency text DEFAULT 'BRL'::text,
    is_promotional boolean DEFAULT false,
    promotional_price numeric(10,2),
    promotional_start_date timestamp with time zone,
    promotional_end_date timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    discount_percentage numeric(5,2) DEFAULT 0,
    is_on_sale boolean DEFAULT false,
    sale_start_date timestamp with time zone,
    sale_end_date timestamp with time zone,
    sankhya_promotion_number character varying(50),
    sankhya_company_code character varying(50),
    discount_amount numeric(10,2),
    discount_type character varying(20) DEFAULT 'percentage'::character varying
);


ALTER TABLE public.product_prices OWNER TO postgres;

--
-- Name: TABLE product_prices; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_prices IS 'Preços e promoções dos produtos';


--
-- Name: COLUMN product_prices.sankhya_promotion_number; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_prices.sankhya_promotion_number IS 'Número da promoção no sistema Sankhya (NUPROMOCAO)';


--
-- Name: COLUMN product_prices.sankhya_company_code; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_prices.sankhya_company_code IS 'Código da empresa no sistema Sankhya (CODEMP)';


--
-- Name: COLUMN product_prices.discount_amount; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_prices.discount_amount IS 'Valor fixo do desconto (VLRDESC)';


--
-- Name: COLUMN product_prices.discount_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.product_prices.discount_type IS 'Tipo de desconto: percentage (percentual) ou fixed (valor fixo)';


--
-- Name: reviews; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.reviews (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    user_id uuid NOT NULL,
    rating integer NOT NULL,
    title character varying(255),
    comment text,
    is_verified boolean DEFAULT false,
    is_approved boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT reviews_rating_check CHECK (((rating >= 1) AND (rating <= 5)))
);


ALTER TABLE public.reviews OWNER TO postgres;

--
-- Name: TABLE reviews; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.reviews IS 'Avaliações e comentários dos usuários sobre produtos';


--
-- Name: COLUMN reviews.product_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.reviews.product_id IS 'ID do produto sendo avaliado';


--
-- Name: COLUMN reviews.user_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.reviews.user_id IS 'ID do usuário que fez a avaliação';


--
-- Name: COLUMN reviews.rating; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.reviews.rating IS 'Nota de 1 a 5 estrelas';


--
-- Name: COLUMN reviews.title; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.reviews.title IS 'Título da avaliação (opcional)';


--
-- Name: COLUMN reviews.comment; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.reviews.comment IS 'Comentário detalhado da avaliação';


--
-- Name: COLUMN reviews.is_verified; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.reviews.is_verified IS 'Se a compra foi verificada';


--
-- Name: COLUMN reviews.is_approved; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.reviews.is_approved IS 'Se a avaliação foi aprovada para exibição';


--
-- Name: product_reviews_stats; Type: MATERIALIZED VIEW; Schema: public; Owner: postgres
--

CREATE MATERIALIZED VIEW public.product_reviews_stats AS
 SELECT product_id,
    count(*) AS total_reviews,
    round(avg(rating), 1) AS average_rating,
    count(
        CASE
            WHEN (rating = 5) THEN 1
            ELSE NULL::integer
        END) AS five_star_count,
    count(
        CASE
            WHEN (rating = 4) THEN 1
            ELSE NULL::integer
        END) AS four_star_count,
    count(
        CASE
            WHEN (rating = 3) THEN 1
            ELSE NULL::integer
        END) AS three_star_count,
    count(
        CASE
            WHEN (rating = 2) THEN 1
            ELSE NULL::integer
        END) AS two_star_count,
    count(
        CASE
            WHEN (rating = 1) THEN 1
            ELSE NULL::integer
        END) AS one_star_count,
    max(created_at) AS last_review_at
   FROM public.reviews
  WHERE (is_approved = true)
  GROUP BY product_id
  WITH NO DATA;


ALTER MATERIALIZED VIEW public.product_reviews_stats OWNER TO postgres;

--
-- Name: product_stock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_stock (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    quantity integer DEFAULT 0,
    reserved_quantity integer DEFAULT 0,
    min_stock_level integer DEFAULT 0,
    max_stock_level integer,
    track_stock boolean DEFAULT true,
    allow_backorder boolean DEFAULT false,
    stock_status text DEFAULT 'in_stock'::text,
    location text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    tenant_id uuid NOT NULL
);


ALTER TABLE public.product_stock OWNER TO postgres;

--
-- Name: TABLE product_stock; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_stock IS 'Controle de estoque dos produtos';


--
-- Name: product_stock_batches; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_stock_batches (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    movement_id uuid NOT NULL,
    batch_number text,
    purchase_date timestamp with time zone DEFAULT now() NOT NULL,
    expiry_date timestamp with time zone,
    original_quantity integer NOT NULL,
    current_quantity integer NOT NULL,
    unit_cost numeric(10,2) NOT NULL,
    supplier_id uuid,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.product_stock_batches OWNER TO postgres;

--
-- Name: product_stock_movements; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_stock_movements (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    movement_type public.product_stock_movement_type NOT NULL,
    quantity integer NOT NULL,
    unit_cost numeric(10,2),
    total_cost numeric(10,2),
    reference_number text,
    supplier_id uuid,
    user_id uuid,
    notes text,
    movement_date timestamp with time zone DEFAULT now() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.product_stock_movements OWNER TO postgres;

--
-- Name: product_variants; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.product_variants (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    name_pt character varying(255) NOT NULL,
    name_en character varying(255) NOT NULL,
    name_es character varying(255) NOT NULL,
    sku character varying(255),
    price numeric(10,2) NOT NULL,
    compare_price numeric(10,2),
    cost_price numeric(10,2),
    size character varying(50),
    weight numeric(10,3),
    dimensions character varying(255),
    serves_people integer,
    stock_quantity integer DEFAULT 0,
    track_stock boolean DEFAULT true,
    is_default boolean DEFAULT false,
    is_available boolean DEFAULT true,
    sort_order integer DEFAULT 0,
    sankhya_code text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.product_variants OWNER TO postgres;

--
-- Name: TABLE product_variants; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.product_variants IS 'Variações de produto: tamanhos, versões diferentes';


--
-- Name: profiles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.profiles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name text,
    description text
);


ALTER TABLE public.profiles OWNER TO postgres;

--
-- Name: TABLE profiles; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.profiles IS 'User profile types that define capabilities';


--
-- Name: COLUMN profiles.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.profiles.name IS 'Nome único do perfil (admin, moderator, customer, vip_customer)';


--
-- Name: COLUMN profiles.description; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.profiles.description IS 'Descrição do perfil e suas permissões';


--
-- Name: search_history; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.search_history (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    tenant_id uuid NOT NULL,
    search_term text NOT NULL,
    search_count integer DEFAULT 1 NOT NULL,
    last_searched_at timestamp with time zone DEFAULT now() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.search_history OWNER TO postgres;

--
-- Name: TABLE search_history; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.search_history IS 'Armazena histórico de pesquisas dos usuários';


--
-- Name: COLUMN search_history.search_term; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.search_history.search_term IS 'Termo pesquisado pelo usuário';


--
-- Name: COLUMN search_history.search_count; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.search_history.search_count IS 'Número de vezes que o usuário pesquisou este termo';


--
-- Name: COLUMN search_history.last_searched_at; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.search_history.last_searched_at IS 'Última vez que o usuário pesquisou este termo';


--
-- Name: search_terms; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.search_terms (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    term text NOT NULL,
    search_count integer DEFAULT 1 NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.search_terms OWNER TO postgres;

--
-- Name: TABLE search_terms; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.search_terms IS 'Armazena termos de busca populares por tenant';


--
-- Name: COLUMN search_terms.term; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.search_terms.term IS 'Termo de busca';


--
-- Name: COLUMN search_terms.search_count; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.search_terms.search_count IS 'Número de vezes que o termo foi pesquisado';


--
-- Name: COLUMN search_terms.is_active; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.search_terms.is_active IS 'Se o termo está ativo para exibição';


--
-- Name: service_availability; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_availability (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    provider_id uuid NOT NULL,
    day_of_week integer NOT NULL,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    is_available boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT service_availability_day_of_week_check CHECK (((day_of_week >= 0) AND (day_of_week <= 6)))
);


ALTER TABLE public.service_availability OWNER TO postgres;

--
-- Name: TABLE service_availability; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.service_availability IS 'When providers are available to work';


--
-- Name: service_booking_items; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_booking_items (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    booking_id uuid NOT NULL,
    service_id uuid NOT NULL,
    quantity integer DEFAULT 1,
    unit_price numeric(10,2) NOT NULL,
    total_price numeric(10,2) NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.service_booking_items OWNER TO postgres;

--
-- Name: TABLE service_booking_items; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.service_booking_items IS 'Individual service items within a booking';


--
-- Name: service_bookings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_bookings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    service_id uuid NOT NULL,
    provider_id uuid,
    customer_id uuid,
    customer_name character varying(255) NOT NULL,
    customer_email character varying(255),
    customer_phone character varying(20),
    booking_date date NOT NULL,
    start_time time without time zone NOT NULL,
    end_time time without time zone NOT NULL,
    status character varying(20) DEFAULT 'pending'::character varying,
    total_price numeric(10,2) NOT NULL,
    deposit_paid numeric(10,2) DEFAULT 0.00,
    payment_status character varying(20) DEFAULT 'pending'::character varying,
    notes text,
    internal_notes text,
    cancellation_reason text,
    cancelled_at timestamp with time zone,
    completed_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT service_bookings_payment_status_check CHECK (((payment_status)::text = ANY ((ARRAY['pending'::character varying, 'partial'::character varying, 'paid'::character varying, 'refunded'::character varying])::text[]))),
    CONSTRAINT service_bookings_status_check CHECK (((status)::text = ANY ((ARRAY['pending'::character varying, 'confirmed'::character varying, 'in_progress'::character varying, 'completed'::character varying, 'cancelled'::character varying, 'no_show'::character varying])::text[])))
);


ALTER TABLE public.service_bookings OWNER TO postgres;

--
-- Name: TABLE service_bookings; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.service_bookings IS 'Customer appointments and bookings';


--
-- Name: service_categories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_categories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    name_pt character varying(255) NOT NULL,
    name_en character varying(255),
    name_es character varying(255),
    description_pt text,
    description_en text,
    description_es text,
    icon character varying(100),
    color character varying(7),
    sort_order integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.service_categories OWNER TO postgres;

--
-- Name: TABLE service_categories; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.service_categories IS 'Categories for organizing services (e.g., Grooming, Medical, Training)';


--
-- Name: service_provider_services; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_provider_services (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    provider_id uuid NOT NULL,
    service_id uuid NOT NULL,
    price_override numeric(10,2),
    duration_override integer,
    is_available boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.service_provider_services OWNER TO postgres;

--
-- Name: TABLE service_provider_services; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.service_provider_services IS 'Junction table linking providers to services they can perform';


--
-- Name: service_providers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_providers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    user_id uuid,
    name character varying(255) NOT NULL,
    email character varying(255),
    phone character varying(20),
    specialties text[],
    bio text,
    avatar_url text,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.service_providers OWNER TO postgres;

--
-- Name: TABLE service_providers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.service_providers IS 'Staff members who provide services (groomers, vets, trainers)';


--
-- Name: service_reviews; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.service_reviews (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    booking_id uuid NOT NULL,
    service_id uuid NOT NULL,
    provider_id uuid,
    customer_id uuid,
    rating integer NOT NULL,
    comment text,
    is_public boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT service_reviews_rating_check CHECK (((rating >= 1) AND (rating <= 5)))
);


ALTER TABLE public.service_reviews OWNER TO postgres;

--
-- Name: TABLE service_reviews; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.service_reviews IS 'Customer reviews and ratings for services';


--
-- Name: services; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.services (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    category_id uuid,
    name_pt character varying(255) NOT NULL,
    name_en character varying(255),
    name_es character varying(255),
    description_pt text,
    description_en text,
    description_es text,
    price numeric(10,2) DEFAULT 0.00 NOT NULL,
    duration_minutes integer DEFAULT 30 NOT NULL,
    requires_booking boolean DEFAULT true,
    is_recurring boolean DEFAULT false,
    max_advance_days integer DEFAULT 30,
    min_advance_hours integer DEFAULT 2,
    max_capacity integer DEFAULT 1,
    is_group_service boolean DEFAULT false,
    requires_deposit boolean DEFAULT false,
    deposit_amount numeric(10,2) DEFAULT 0.00,
    cancellation_policy text,
    preparation_notes text,
    is_active boolean DEFAULT true,
    sort_order integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.services OWNER TO postgres;

--
-- Name: TABLE services; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.services IS 'Individual services that can be booked (e.g., Dog Grooming, Vet Consultation)';


--
-- Name: shipping; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.shipping (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    order_id uuid NOT NULL,
    method text NOT NULL,
    tracking_code text,
    status public.shipping_status DEFAULT 'pending'::public.shipping_status NOT NULL,
    estimated_delivery date,
    delivered_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.shipping OWNER TO postgres;

--
-- Name: shipping_providers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.shipping_providers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    name character varying(255) NOT NULL,
    provider_type public.shipping_provider_type NOT NULL,
    is_active boolean DEFAULT true,
    api_credentials jsonb,
    api_endpoint character varying(500),
    base_price numeric(10,2) DEFAULT 0,
    price_per_kg numeric(10,2) DEFAULT 0,
    price_per_km numeric(10,2) DEFAULT 0,
    estimated_days_min integer DEFAULT 1,
    estimated_days_max integer DEFAULT 3,
    max_weight_kg numeric(8,2) DEFAULT 30,
    max_dimensions jsonb,
    coverage_ceps text[],
    coverage_zones uuid[],
    pickup_start_time time without time zone DEFAULT '08:00:00'::time without time zone,
    pickup_end_time time without time zone DEFAULT '17:00:00'::time without time zone,
    pickup_days integer[] DEFAULT '{1,2,3,4,5}'::integer[],
    freight_calculation_type character varying(50) DEFAULT 'api_based'::character varying,
    calculation_config jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.shipping_providers OWNER TO postgres;

--
-- Name: TABLE shipping_providers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.shipping_providers IS 'Transportadoras (Correios, Jadlog, entrega própria, etc.)';


--
-- Name: COLUMN shipping_providers.coverage_ceps; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.shipping_providers.coverage_ceps IS 'Array de CEPs ou ranges de CEP atendidos pela transportadora:
Ex: ["01000-000", "02000-000", "03000-000 a 03999-999"]';


--
-- Name: COLUMN shipping_providers.coverage_zones; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.shipping_providers.coverage_zones IS 'Array de UUIDs das zonas de entrega atendidas:
Ex: ["zone-uuid-1", "zone-uuid-2"] - referência manual às delivery_zones';


--
-- Name: COLUMN shipping_providers.freight_calculation_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.shipping_providers.freight_calculation_type IS 'Tipos de cálculo: 
- api_based: Usa API da transportadora (Correios, Jadlog)
- fixed_price: Preço fixo
- per_kg: Por quilograma
- per_km: Por quilômetro
- per_zone: Por zona de entrega
- hybrid: Combina múltiplos fatores
- inherit_from_settings: Usa configuração da delivery_settings';


--
-- Name: COLUMN shipping_providers.calculation_config; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.shipping_providers.calculation_config IS 'Configurações específicas de cálculo em JSON:
{
  "base_price": 5.00,
  "price_per_kg": 2.50,
  "price_per_km": 1.20,
  "minimum_price": 8.00,
  "maximum_price": 50.00,
  "api_provider": "correios",
  "services": ["PAC", "SEDEX"]
}';


--
-- Name: shipping_services; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.shipping_services (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    shipping_provider_id uuid NOT NULL,
    name character varying(255) NOT NULL,
    external_code character varying(50),
    base_price numeric(10,2) DEFAULT 0,
    price_per_kg numeric(10,2) DEFAULT 0,
    price_per_km numeric(10,2) DEFAULT 0,
    minimum_price numeric(10,2) DEFAULT 0,
    estimated_days_min integer DEFAULT 1,
    estimated_days_max integer DEFAULT 3,
    max_weight_kg numeric(8,2) DEFAULT 30,
    max_dimensions jsonb,
    service_config jsonb,
    is_active boolean DEFAULT true,
    is_available_weekend boolean DEFAULT false,
    is_available_holiday boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.shipping_services OWNER TO postgres;

--
-- Name: TABLE shipping_services; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.shipping_services IS 'Serviços específicos de cada transportadora (PAC, SEDEX, Expresso, etc.)';


--
-- Name: site_settings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.site_settings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    key text NOT NULL,
    value text NOT NULL,
    description text,
    category text DEFAULT 'general'::text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.site_settings OWNER TO postgres;

--
-- Name: TABLE site_settings; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.site_settings IS 'Configurações gerais do site em formato chave-valor flexível usando JSONB.';


--
-- Name: COLUMN site_settings.value; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.site_settings.value IS 'Valor em formato JSONB para flexibilidade (pode ser string, array, objeto, etc)';


--
-- Name: social_media; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.social_media (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    platform character varying(50) NOT NULL,
    url text NOT NULL,
    icon character varying(10) DEFAULT '🔗'::character varying NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    order_index integer DEFAULT 0 NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.social_media OWNER TO postgres;

--
-- Name: specialities; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.specialities (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    name_pt text,
    name_en text,
    name_es text,
    description_pt text,
    description_en text,
    description_es text
);


ALTER TABLE public.specialities OWNER TO postgres;

--
-- Name: stock_batches; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_batches (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    ingredient_id uuid NOT NULL,
    movement_id uuid NOT NULL,
    batch_number text,
    purchase_date timestamp with time zone NOT NULL,
    expiry_date timestamp with time zone,
    original_quantity numeric(10,4) NOT NULL,
    current_quantity numeric(10,4) NOT NULL,
    unit_id uuid NOT NULL,
    unit_cost numeric(10,6) NOT NULL,
    supplier_id uuid,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.stock_batches OWNER TO postgres;

--
-- Name: TABLE stock_batches; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock_batches IS 'Lotes de estoque com custo individual (FIFO)';


--
-- Name: stock_movements; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock_movements (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    ingredient_id uuid NOT NULL,
    movement_type public.stock_movement_type NOT NULL,
    quantity numeric(10,4) NOT NULL,
    unit_id uuid NOT NULL,
    unit_cost numeric(10,6),
    total_cost numeric(15,2),
    reference_number text,
    supplier_id uuid,
    product_id uuid,
    user_id uuid,
    notes text,
    movement_date timestamp with time zone DEFAULT now() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.stock_movements OWNER TO postgres;

--
-- Name: TABLE stock_movements; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.stock_movements IS 'Movimentações de estoque (entradas e saídas)';


--
-- Name: subscription_modules; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.subscription_modules (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    subscription_id uuid NOT NULL,
    module_id uuid NOT NULL,
    is_enabled boolean DEFAULT true,
    expires_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.subscription_modules OWNER TO postgres;

--
-- Name: TABLE subscription_modules; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.subscription_modules IS 'Modules enabled for each subscription';


--
-- Name: subscriptions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.subscriptions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    plan_id uuid NOT NULL,
    price numeric(10,2) NOT NULL,
    currency character varying(3) DEFAULT 'BRL'::character varying NOT NULL,
    trial_start_date timestamp with time zone,
    trial_end_date timestamp with time zone,
    current_period_start timestamp with time zone NOT NULL,
    current_period_end timestamp with time zone NOT NULL,
    cancelled_at timestamp with time zone,
    cancel_at_period_end boolean DEFAULT false NOT NULL,
    payment_method character varying(50),
    external_subscription_id character varying(255),
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    billing_cycle public.billing_cycle_enum NOT NULL,
    status public.subscription_status_enum NOT NULL
);


ALTER TABLE public.subscriptions OWNER TO postgres;

--
-- Name: TABLE subscriptions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.subscriptions IS 'Assinaturas dos tenants';


--
-- Name: COLUMN subscriptions.external_subscription_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.subscriptions.external_subscription_id IS 'ID da assinatura no gateway de pagamento';


--
-- Name: COLUMN subscriptions.metadata; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.subscriptions.metadata IS 'Dados adicionais da assinatura em formato JSON';


--
-- Name: suppliers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.suppliers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    trading_name text,
    document text,
    email text,
    phone text,
    address text,
    city text,
    state text,
    zip_code text,
    country text DEFAULT 'Brasil'::text,
    notes text,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.suppliers OWNER TO postgres;

--
-- Name: TABLE suppliers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.suppliers IS 'Fornecedores da empresa';


--
-- Name: support_categories; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.support_categories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    name_pt character varying(100) NOT NULL,
    name_en character varying(100),
    name_es character varying(100),
    description_pt text,
    description_en text,
    description_es text,
    icon character varying(50),
    color character varying(7),
    order_index integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.support_categories OWNER TO postgres;

--
-- Name: TABLE support_categories; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.support_categories IS 'Categorias de suporte disponíveis';


--
-- Name: support_faq; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.support_faq (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    category character varying(100) NOT NULL,
    question_pt text NOT NULL,
    answer_pt text NOT NULL,
    question_en text,
    answer_en text,
    question_es text,
    answer_es text,
    order_index integer DEFAULT 0,
    is_active boolean DEFAULT true,
    view_count integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.support_faq OWNER TO postgres;

--
-- Name: TABLE support_faq; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.support_faq IS 'Perguntas frequentes organizadas por categoria';


--
-- Name: support_ticket_ratings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.support_ticket_ratings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    ticket_id character varying(20) NOT NULL,
    user_id uuid NOT NULL,
    rating integer NOT NULL,
    comment text,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT support_ticket_ratings_rating_check CHECK (((rating >= 1) AND (rating <= 5)))
);


ALTER TABLE public.support_ticket_ratings OWNER TO postgres;

--
-- Name: TABLE support_ticket_ratings; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.support_ticket_ratings IS 'Avaliações dos tickets pelos usuários';


--
-- Name: support_ticket_responses; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.support_ticket_responses (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    ticket_id character varying(20) NOT NULL,
    user_id uuid NOT NULL,
    message text NOT NULL,
    is_internal boolean DEFAULT false,
    attachments jsonb,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.support_ticket_responses OWNER TO postgres;

--
-- Name: TABLE support_ticket_responses; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.support_ticket_responses IS 'Respostas e mensagens dos tickets';


--
-- Name: support_tickets; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.support_tickets (
    id character varying(20) NOT NULL,
    user_id uuid NOT NULL,
    tenant_id uuid NOT NULL,
    subject character varying(255) NOT NULL,
    category character varying(100) NOT NULL,
    priority character varying(20) DEFAULT 'medium'::character varying,
    status character varying(20) DEFAULT 'open'::character varying,
    description text NOT NULL,
    contact_info text,
    assigned_to uuid,
    resolution text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    resolved_at timestamp with time zone,
    closed_at timestamp with time zone,
    CONSTRAINT support_tickets_priority_check CHECK (((priority)::text = ANY ((ARRAY['low'::character varying, 'medium'::character varying, 'high'::character varying, 'urgent'::character varying])::text[]))),
    CONSTRAINT support_tickets_status_check CHECK (((status)::text = ANY ((ARRAY['open'::character varying, 'in_progress'::character varying, 'resolved'::character varying, 'closed'::character varying])::text[])))
);


ALTER TABLE public.support_tickets OWNER TO postgres;

--
-- Name: TABLE support_tickets; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.support_tickets IS 'Tickets de suporte dos usuários';


--
-- Name: COLUMN support_tickets.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.support_tickets.id IS 'Código único gerado automaticamente (ex: TKT-123456789012)';


--
-- Name: COLUMN support_tickets.priority; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.support_tickets.priority IS 'Prioridade: low, medium, high, urgent';


--
-- Name: COLUMN support_tickets.status; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.support_tickets.status IS 'Status: open, in_progress, resolved, closed';


--
-- Name: COLUMN support_tickets.contact_info; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.support_tickets.contact_info IS 'Informações de contato fornecidas pelo usuário';


--
-- Name: COLUMN support_tickets.assigned_to; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.support_tickets.assigned_to IS 'ID do usuário responsável pelo ticket (admin/suporte)';


--
-- Name: support_ticket_stats; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.support_ticket_stats AS
 SELECT tenant_id,
    status,
    count(*) AS count,
    round(avg(
        CASE
            WHEN (resolved_at IS NOT NULL) THEN (EXTRACT(epoch FROM (resolved_at - created_at)) / (3600)::numeric)
            ELSE NULL::numeric
        END), 2) AS avg_resolution_hours
   FROM public.support_tickets t
  GROUP BY tenant_id, status;


ALTER VIEW public.support_ticket_stats OWNER TO postgres;

--
-- Name: support_tickets_with_user; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.support_tickets_with_user AS
 SELECT st.id,
    st.user_id,
    st.tenant_id,
    st.subject,
    st.category,
    st.priority,
    st.status,
    st.description,
    st.contact_info,
    st.assigned_to,
    st.resolution,
    st.created_at,
    st.updated_at,
    st.resolved_at,
    st.closed_at,
    au.email AS user_email,
    (au.raw_user_meta_data ->> 'full_name'::text) AS user_name
   FROM (public.support_tickets st
     LEFT JOIN auth.users au ON ((st.user_id = au.id)));


ALTER VIEW public.support_tickets_with_user OWNER TO postgres;

--
-- Name: tables; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tables (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    number text NOT NULL,
    name text,
    capacity integer DEFAULT 4 NOT NULL,
    floor text,
    area text,
    status public.table_status DEFAULT 'available'::public.table_status NOT NULL,
    qr_code text,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.tables OWNER TO postgres;

--
-- Name: TABLE tables; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.tables IS 'Mesas do restaurante';


--
-- Name: tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tags (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    tag text,
    color text
);


ALTER TABLE public.tags OWNER TO postgres;

--
-- Name: tenant_customers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tenant_customers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    user_id uuid,
    customer_name character varying(255) NOT NULL,
    customer_email character varying(255) NOT NULL,
    customer_phone character varying(20),
    customer_document character varying(20),
    street character varying(255),
    number character varying(20),
    complement character varying(255),
    neighborhood character varying(255),
    city character varying(255),
    state character varying(2),
    zip_code character varying(8),
    latitude numeric(10,8),
    longitude numeric(11,8),
    notes text,
    preferred_payment_method character varying(50),
    customer_type character varying(50) DEFAULT 'regular'::character varying,
    total_orders integer DEFAULT 0,
    total_spent numeric(12,2) DEFAULT 0.00,
    average_order_value numeric(10,2) DEFAULT 0.00,
    last_order_date timestamp with time zone,
    first_order_date timestamp with time zone,
    is_active boolean DEFAULT true,
    is_blocked boolean DEFAULT false,
    block_reason text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.tenant_customers OWNER TO postgres;

--
-- Name: TABLE tenant_customers; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.tenant_customers IS 'Cadastro de clientes por empresa (tenant). Clientes podem ou não ter user_id (auth.users). Usado para gestão B2B onde o admin cadastra clientes manualmente.';


--
-- Name: COLUMN tenant_customers.tenant_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.tenant_customers.tenant_id IS 'ID da empresa/tenant';


--
-- Name: COLUMN tenant_customers.user_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.tenant_customers.user_id IS 'OPCIONAL: Vínculo com users(id) caso o cliente também seja um usuário autenticado. NULL para clientes B2B cadastrados manualmente.';


--
-- Name: COLUMN tenant_customers.customer_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.tenant_customers.customer_type IS 'Tipo de cliente: regular, vip, wholesale (atacado), corporate (corporativo)';


--
-- Name: COLUMN tenant_customers.total_orders; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.tenant_customers.total_orders IS 'Total de pedidos realizados nesta empresa';


--
-- Name: COLUMN tenant_customers.total_spent; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.tenant_customers.total_spent IS 'Valor total gasto nesta empresa';


--
-- Name: COLUMN tenant_customers.is_blocked; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.tenant_customers.is_blocked IS 'Cliente bloqueado por esta empresa específica (não afeta outras empresas)';


--
-- Name: tenant_delivery_persons; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tenant_delivery_persons (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    delivery_person_id uuid NOT NULL,
    commission_percentage numeric(5,2) DEFAULT 0,
    fixed_payment_per_delivery numeric(10,2) DEFAULT 0,
    coverage_zones uuid[],
    max_distance_km integer DEFAULT 10,
    is_active boolean DEFAULT true,
    is_preferred boolean DEFAULT false,
    work_schedule jsonb DEFAULT '{"friday": {"end": "18:00", "start": "08:00", "active": true}, "monday": {"end": "18:00", "start": "08:00", "active": true}, "sunday": {"end": "00:00", "start": "00:00", "active": false}, "tuesday": {"end": "18:00", "start": "08:00", "active": true}, "saturday": {"end": "14:00", "start": "08:00", "active": true}, "thursday": {"end": "18:00", "start": "08:00", "active": true}, "wednesday": {"end": "18:00", "start": "08:00", "active": true}}'::jsonb,
    hired_at timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.tenant_delivery_persons OWNER TO postgres;

--
-- Name: TABLE tenant_delivery_persons; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.tenant_delivery_persons IS 'Vinculação de entregadores com restaurantes/tenants';


--
-- Name: COLUMN tenant_delivery_persons.work_schedule; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.tenant_delivery_persons.work_schedule IS 'Horário de trabalho específico para este tenant em formato JSON';


--
-- Name: tenant_invitations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tenant_invitations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    email text NOT NULL,
    role text DEFAULT 'member'::text NOT NULL,
    invited_by uuid NOT NULL,
    token text NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    accepted_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT tenant_invitations_role_check CHECK ((role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text, 'member'::text, 'viewer'::text])))
);


ALTER TABLE public.tenant_invitations OWNER TO postgres;

--
-- Name: TABLE tenant_invitations; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.tenant_invitations IS 'Pending invitations to join tenants';


--
-- Name: tenant_users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tenant_users (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    tenant_id uuid NOT NULL,
    user_id uuid NOT NULL,
    role text DEFAULT 'member'::text NOT NULL,
    permissions jsonb DEFAULT '{}'::jsonb,
    is_active boolean DEFAULT true,
    invited_by uuid,
    invited_at timestamp with time zone,
    joined_at timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT tenant_users_role_check CHECK ((role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text, 'member'::text, 'viewer'::text])))
);


ALTER TABLE public.tenant_users OWNER TO postgres;

--
-- Name: TABLE tenant_users; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.tenant_users IS 'Junction table for user access to specific tenants';


--
-- Name: testimonials; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.testimonials (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    testimonial_type character varying(20) NOT NULL,
    product_id uuid,
    author_name character varying(255) NOT NULL,
    author_email character varying(255),
    author_position character varying(255),
    author_company character varying(255),
    author_image text,
    title character varying(255),
    content text NOT NULL,
    rating integer NOT NULL,
    is_approved boolean DEFAULT false,
    is_featured boolean DEFAULT false,
    display_order integer DEFAULT 0,
    language character varying(5) DEFAULT 'pt'::character varying,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    tenant_id uuid NOT NULL,
    CONSTRAINT testimonial_product_check CHECK (((((testimonial_type)::text = 'company'::text) AND (product_id IS NULL)) OR (((testimonial_type)::text = 'product'::text) AND (product_id IS NOT NULL)))),
    CONSTRAINT testimonials_rating_check CHECK (((rating >= 1) AND (rating <= 5))),
    CONSTRAINT testimonials_testimonial_type_check CHECK (((testimonial_type)::text = ANY ((ARRAY['company'::character varying, 'product'::character varying])::text[])))
);


ALTER TABLE public.testimonials OWNER TO postgres;

--
-- Name: TABLE testimonials; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.testimonials IS 'Customer testimonials and reviews with real-time rating calculations';


--
-- Name: COLUMN testimonials.testimonial_type; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.testimonials.testimonial_type IS 'Tipo: company (depoimento sobre a ALAE) ou product (avaliação de produto)';


--
-- Name: COLUMN testimonials.product_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.testimonials.product_id IS 'ID do produto (apenas para testimonial_type = product)';


--
-- Name: user_address; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_address (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    title text,
    address text,
    number text,
    complement text,
    district text,
    city text,
    state text,
    zip_code text,
    lat text,
    lng text,
    user_id uuid,
    is_default boolean,
    is_billing boolean,
    tenant_id uuid NOT NULL,
    is_active boolean DEFAULT true,
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.user_address OWNER TO postgres;

--
-- Name: user_cart; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.user_cart AS
 SELECT o.id AS cart_id,
    o.user_id,
    o.tenant_id,
    o.total_amount,
    o.discount_amount,
    o.shipping_amount,
    o.created_at,
    o.updated_at,
    o.draft_expires_at,
    oi.id AS item_id,
    oi.product_id,
    oi.quantity,
    oi.unit_price,
    oi.total_price,
    oi.customizations,
    p.name_pt,
    p.name_en,
    p.name_es,
    p.description_pt,
    p.description_en,
    p.description_es,
    p.image_url,
    p.price AS product_price,
    pc.name_pt AS category_name_pt,
    pc.name_en AS category_name_en,
    pc.name_es AS category_name_es
   FROM (((public.orders o
     JOIN public.order_items oi ON ((o.id = oi.order_id)))
     LEFT JOIN public.products p ON ((oi.product_id = p.id)))
     LEFT JOIN public.product_categories pc ON ((p.product_category_id = pc.id)))
  WHERE (o.is_draft = true);


ALTER VIEW public.user_cart OWNER TO postgres;

--
-- Name: VIEW user_cart; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW public.user_cart IS 'View simplificada para acessar o carrinho (orders com is_draft=true)';


--
-- Name: user_discounts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_discounts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    discount_id uuid NOT NULL,
    order_id uuid,
    used_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.user_discounts OWNER TO postgres;

--
-- Name: user_favorites; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_favorites (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid NOT NULL,
    product_id uuid NOT NULL,
    tenant_id uuid NOT NULL
);


ALTER TABLE public.user_favorites OWNER TO postgres;

--
-- Name: TABLE user_favorites; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.user_favorites IS 'Favoritos dos usuários - Sistema Multi-Tenant';


--
-- Name: COLUMN user_favorites.user_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_favorites.user_id IS 'ID do usuário que favoritou o produto';


--
-- Name: COLUMN user_favorites.product_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_favorites.product_id IS 'ID do produto favoritado';


--
-- Name: COLUMN user_favorites.tenant_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.user_favorites.tenant_id IS 'ID do tenant (estabelecimento) onde o produto foi favoritado';


--
-- Name: user_notifications; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.user_notifications AS
 SELECT n.id,
    n.tenant_id,
    n.title,
    n.content,
    n.big_image,
    n.url,
    n.param_name,
    n.item_id,
    n.notification_type,
    n.priority,
    n.created_at,
    nr.user_id,
    nr.is_read,
    nr.read_at,
    nr.id AS recipient_id
   FROM (public.notifications n
     JOIN public.notification_recipients nr ON ((n.id = nr.notification_id)))
  WHERE ((n.is_active = true) AND ((n.expires_at IS NULL) OR (n.expires_at > now())));


ALTER VIEW public.user_notifications OWNER TO postgres;

--
-- Name: user_profile; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_profile (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    profile_id uuid
);


ALTER TABLE public.user_profile OWNER TO postgres;

--
-- Name: TABLE user_profile; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.user_profile IS 'Junction table linking users to their profiles';


--
-- Name: user_roles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_roles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    role text DEFAULT 'user'::text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.user_roles OWNER TO postgres;

--
-- Name: TABLE user_roles; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.user_roles IS 'Global user roles in the system';


--
-- Name: waiters; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.waiters (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    name text NOT NULL,
    code text NOT NULL,
    phone text,
    is_active boolean DEFAULT true NOT NULL,
    commission_percentage numeric(5,2) DEFAULT 0,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.waiters OWNER TO postgres;

--
-- Name: TABLE waiters; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.waiters IS 'Garçons e atendentes';


--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text,
    type storage.buckettype DEFAULT 'STANDARD'::storage.buckettype NOT NULL
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: buckets_analytics; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets_analytics (
    id text NOT NULL,
    type storage.buckettype DEFAULT 'ANALYTICS'::storage.buckettype NOT NULL,
    format text DEFAULT 'ICEBERG'::text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.buckets_analytics OWNER TO supabase_storage_admin;

--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb,
    level integer
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: prefixes; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.prefixes (
    bucket_id text NOT NULL,
    name text NOT NULL COLLATE pg_catalog."C",
    level integer GENERATED ALWAYS AS (storage.get_level(name)) STORED NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE storage.prefixes OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: schema_migrations; Type: TABLE; Schema: supabase_migrations; Owner: postgres
--

CREATE TABLE supabase_migrations.schema_migrations (
    version text NOT NULL,
    statements text[],
    name text,
    created_by text,
    idempotency_key text
);


ALTER TABLE supabase_migrations.schema_migrations OWNER TO postgres;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: chat_messages id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat_messages ALTER COLUMN id SET DEFAULT nextval('public.chat_messages_id_seq'::regclass);


--
-- Name: chats id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chats ALTER COLUMN id SET DEFAULT nextval('public.chats_id_seq'::regclass);


--
-- Name: dados_cliente id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dados_cliente ALTER COLUMN id SET DEFAULT nextval('public.dados_cliente_id_seq'::regclass);


--
-- Name: documents id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.documents ALTER COLUMN id SET DEFAULT nextval('public.documents_id_seq'::regclass);


--
-- Name: n8n_chat_histories id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.n8n_chat_histories ALTER COLUMN id SET DEFAULT nextval('public.n8n_chat_histories_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	9c31bf7a-acc1-43b2-9b81-da95c0eb4554	{"action":"user_signedup","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-09-10 02:14:25.515456+00	
00000000-0000-0000-0000-000000000000	e8692449-741c-4c9d-a8ae-c0c398ceca6f	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-10 02:14:25.525483+00	
00000000-0000-0000-0000-000000000000	3ee313c3-9c6a-44b1-b9fa-4ae95b262a3d	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-10 02:17:36.45143+00	
00000000-0000-0000-0000-000000000000	95b35832-0b52-4d6e-9d5e-54ce55258398	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-10 02:23:28.51216+00	
00000000-0000-0000-0000-000000000000	e9709454-9977-4088-94d6-50f9139597db	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-12 17:02:46.037216+00	
00000000-0000-0000-0000-000000000000	1825cf46-6225-41fe-b3da-6cdc1c773429	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-12 17:19:44.164865+00	
00000000-0000-0000-0000-000000000000	ae05ccf4-6ddb-40a3-9458-c960c3bf2dc4	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-12 18:07:13.695001+00	
00000000-0000-0000-0000-000000000000	b7ea75a2-9d6c-48f3-925d-1c52881b7e89	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-12 18:07:13.717085+00	
00000000-0000-0000-0000-000000000000	c5b4dcf2-09b2-49ab-bbc1-208c2441c607	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-12 19:05:30.196002+00	
00000000-0000-0000-0000-000000000000	2eca7d93-7ffc-4eba-9d5e-1f44e8ef9558	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-12 19:05:30.215883+00	
00000000-0000-0000-0000-000000000000	da838d02-0fc3-45e5-9bf3-12a6c3ac2fe8	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-12 20:25:35.384788+00	
00000000-0000-0000-0000-000000000000	a37b766f-007d-4d1c-9189-6b79e95508b4	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-12 20:25:35.408595+00	
00000000-0000-0000-0000-000000000000	3dd65a56-fc94-43a9-9904-2777c5f2171c	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-13 15:19:53.713633+00	
00000000-0000-0000-0000-000000000000	850ea34c-54e5-4923-929f-d97c40cf971c	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-13 15:19:53.725669+00	
00000000-0000-0000-0000-000000000000	d3a93c31-80b4-4181-98c7-96532b3d8930	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-17 18:38:25.052733+00	
00000000-0000-0000-0000-000000000000	65d4fda4-52a5-458a-8271-9df76019c2dd	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-17 20:20:45.294813+00	
00000000-0000-0000-0000-000000000000	41393c80-09f6-4fb4-9118-6643c9c3e9f1	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-17 20:20:45.314741+00	
00000000-0000-0000-0000-000000000000	d3080e60-a32f-4e01-9d67-c6b6a6a57826	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-17 21:30:36.031964+00	
00000000-0000-0000-0000-000000000000	afe1d011-1de1-449a-b66f-8c88b8b67ab7	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-17 21:30:36.057387+00	
00000000-0000-0000-0000-000000000000	274a1684-3717-4f5a-a7a8-cdc49705902e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-17 22:29:01.629905+00	
00000000-0000-0000-0000-000000000000	a6468c35-18cd-419e-ad25-1099efffe050	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-17 22:29:01.634916+00	
00000000-0000-0000-0000-000000000000	ff966b9e-8f8b-4ea2-8c48-6325e9ce423b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-17 23:27:04.979823+00	
00000000-0000-0000-0000-000000000000	e7eee114-9db0-4ab9-a618-29b0851a3ca7	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-17 23:27:04.999881+00	
00000000-0000-0000-0000-000000000000	e03422f1-8ddb-4687-bb0d-6a5ae21fd74a	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 00:25:19.888772+00	
00000000-0000-0000-0000-000000000000	cc670d00-3332-467d-9e76-9de090e07f4d	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 00:25:19.905002+00	
00000000-0000-0000-0000-000000000000	d0a5a979-ea7e-4f58-85dc-17c88f0fbcca	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 01:33:20.954016+00	
00000000-0000-0000-0000-000000000000	599395cd-10a2-4bd8-849b-5a7c5945e682	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 01:33:20.975957+00	
00000000-0000-0000-0000-000000000000	21ff59b4-f483-4d6d-abb7-33a4900fbdf6	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 01:44:43.541539+00	
00000000-0000-0000-0000-000000000000	44478b9c-ecf1-4b60-a4a6-2e685295d419	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 01:44:43.543907+00	
00000000-0000-0000-0000-000000000000	e2a1c18e-083a-4698-b7d8-57403f63b34b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 02:48:16.179896+00	
00000000-0000-0000-0000-000000000000	dffa0ea0-e9b0-43b7-a9d6-4b9ab3ce4daf	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 02:48:16.190445+00	
00000000-0000-0000-0000-000000000000	06e85181-7c1a-4b12-b838-c11e3019092b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 09:43:18.446797+00	
00000000-0000-0000-0000-000000000000	fdadd514-f23f-4d47-b93e-90d8b0f38fb5	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 09:43:18.472085+00	
00000000-0000-0000-0000-000000000000	ae223aaa-7ff7-4b43-9784-a41eaada4f8a	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 11:10:41.408562+00	
00000000-0000-0000-0000-000000000000	9c1417d1-46cb-444f-8549-b6e4044b0aba	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 11:10:41.416001+00	
00000000-0000-0000-0000-000000000000	5a0419b7-9c72-46d7-ad63-f89b83a3fd8f	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 12:09:26.026529+00	
00000000-0000-0000-0000-000000000000	7dbd7ef2-4c0e-49a2-b63d-862306e8832f	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 12:09:26.037899+00	
00000000-0000-0000-0000-000000000000	502c26f5-687f-4bba-bd7f-51cb8a1069fb	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 13:24:38.016114+00	
00000000-0000-0000-0000-000000000000	fbda4e03-742d-47e1-a0a5-97e8bbca7b04	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 13:24:38.040348+00	
00000000-0000-0000-0000-000000000000	5bd20fe9-ec27-49a6-a446-d94fe702960b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 14:31:57.557762+00	
00000000-0000-0000-0000-000000000000	3abd916d-f709-4f1d-abc4-907e85cbd738	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 14:31:57.567315+00	
00000000-0000-0000-0000-000000000000	db7bbdd4-9aff-44dd-b035-c7d46507f4e4	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 15:30:19.868645+00	
00000000-0000-0000-0000-000000000000	2a987df5-1354-4e10-99cc-850a8b5c5513	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-18 15:30:19.926054+00	
00000000-0000-0000-0000-000000000000	c16acd59-2808-48a1-999e-14d1fd92c8c2	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-19 17:06:13.721233+00	
00000000-0000-0000-0000-000000000000	96526c77-979a-4ccc-8709-c6e3635a127c	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-19 17:06:13.748792+00	
00000000-0000-0000-0000-000000000000	b55c5508-a764-4126-aa1f-68701e033ecf	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-19 18:06:04.118277+00	
00000000-0000-0000-0000-000000000000	ec777dfe-42c1-45ed-9c02-29eb951dfb3d	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-19 18:06:04.127687+00	
00000000-0000-0000-0000-000000000000	b549d75b-4385-49e4-98e4-ad135282e565	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-19 21:38:40.850196+00	
00000000-0000-0000-0000-000000000000	3603e511-9a77-490e-9434-29661d29ea72	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-19 21:38:40.861754+00	
00000000-0000-0000-0000-000000000000	2c5c297c-37a7-4a66-ba29-f6bfdb444f75	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-19 22:36:45.070875+00	
00000000-0000-0000-0000-000000000000	562e691a-ca55-4fcf-bfbb-562c1cdca5d8	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-19 22:36:45.089085+00	
00000000-0000-0000-0000-000000000000	cbfe448a-22ea-464a-87be-7a3da9b3de8d	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-19 23:35:36.644792+00	
00000000-0000-0000-0000-000000000000	06104f8c-2652-4d32-89a8-5629bcdf33da	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-19 23:35:36.669635+00	
00000000-0000-0000-0000-000000000000	b8a9f8f8-ba4c-4993-88ce-2835c8ef9ece	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 00:34:03.790492+00	
00000000-0000-0000-0000-000000000000	0c77c02f-69af-4c2c-96b4-4284b24b1c3b	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 00:34:03.804279+00	
00000000-0000-0000-0000-000000000000	4e28ec02-aeb4-4b10-9d9c-6ac99402ad66	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 02:19:50.31278+00	
00000000-0000-0000-0000-000000000000	2e6752e7-8f0f-42a1-b3e9-59e6f2be79d3	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 02:19:50.327862+00	
00000000-0000-0000-0000-000000000000	0cfe2418-bd27-432a-93ed-68a532730fbf	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-20 03:42:24.477801+00	
00000000-0000-0000-0000-000000000000	8717b731-8616-4feb-8505-fe80fbae57a8	{"action":"logout","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-09-20 03:46:50.572332+00	
00000000-0000-0000-0000-000000000000	9580de19-7625-4f03-9101-1fd8a8282f18	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-20 03:47:19.724735+00	
00000000-0000-0000-0000-000000000000	ca9b11d4-deb1-4705-a309-fbd5f6d8a7bd	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 04:45:50.048395+00	
00000000-0000-0000-0000-000000000000	5b89dd2e-739b-4fed-9a92-3e514b3d9c05	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 04:45:50.071937+00	
00000000-0000-0000-0000-000000000000	8a2a797f-6281-4b9c-ad5e-1aac58bea0a6	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 05:44:35.014933+00	
00000000-0000-0000-0000-000000000000	866b139a-995c-4193-920c-f43afaac4cc3	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 05:44:35.03682+00	
00000000-0000-0000-0000-000000000000	e9e846ec-61e2-4938-bade-5ac951a022b7	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 06:42:54.417125+00	
00000000-0000-0000-0000-000000000000	3ca323a1-00b9-4b14-8f17-1ae9c64e9924	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 06:42:54.436443+00	
00000000-0000-0000-0000-000000000000	13540f29-c4bf-4ea8-9be0-b4271907c2ab	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 07:42:53.830536+00	
00000000-0000-0000-0000-000000000000	7e032e50-8e5b-4881-af56-71628f736748	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 07:42:53.845709+00	
00000000-0000-0000-0000-000000000000	591f1f92-8896-486d-8e67-c0a152b2eb96	{"action":"logout","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-09-20 08:02:47.19+00	
00000000-0000-0000-0000-000000000000	4c31f7a8-5a6b-4546-afc0-e647042d7b9d	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-20 08:03:06.527258+00	
00000000-0000-0000-0000-000000000000	c45d7021-42f3-4091-8ac4-884f1e1c8cff	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 14:51:41.827428+00	
00000000-0000-0000-0000-000000000000	e115b981-e7a6-4fd6-9e5b-f94bcaa47c93	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 14:51:41.853845+00	
00000000-0000-0000-0000-000000000000	e79bb38c-7a6f-4d3f-821d-4dd7009b767d	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 12:26:07.400929+00	
00000000-0000-0000-0000-000000000000	e491027b-3b4e-4176-b4ea-30fcf88767b0	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 12:26:07.430409+00	
00000000-0000-0000-0000-000000000000	b1968fa5-d104-4afa-a74a-60aefa8761ee	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-22 13:45:04.08621+00	
00000000-0000-0000-0000-000000000000	751be751-eedd-4e55-bb6a-4030c58d2cbe	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 14:43:45.813111+00	
00000000-0000-0000-0000-000000000000	3c5c4b83-347f-4c0f-9786-fcc54c25279f	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 14:43:45.845812+00	
00000000-0000-0000-0000-000000000000	c04d6656-9711-48c6-bf14-1ed751316590	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 15:42:10.768022+00	
00000000-0000-0000-0000-000000000000	e91251f8-eb05-44dd-98e3-ee34269e8628	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 15:42:10.790436+00	
00000000-0000-0000-0000-000000000000	25353230-5283-4d6e-a228-31c1f61683ea	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 16:40:38.395459+00	
00000000-0000-0000-0000-000000000000	7fe622e6-0e11-4ab3-b36f-bbe1dce3c51e	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 16:40:38.407578+00	
00000000-0000-0000-0000-000000000000	85edf147-64de-4e5f-8180-ef0484564072	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 17:39:45.577648+00	
00000000-0000-0000-0000-000000000000	7b4747e3-ddcc-433b-a04d-dc99c32507e2	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 17:39:45.60063+00	
00000000-0000-0000-0000-000000000000	683a88c0-3490-459e-8b59-a49cb05f2fbb	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-22 18:14:50.903351+00	
00000000-0000-0000-0000-000000000000	15aa83ae-0304-492a-a355-1dc6e028a7ab	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 18:38:45.634081+00	
00000000-0000-0000-0000-000000000000	00f8f508-d40b-4105-9008-861c23a7aa14	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 18:38:45.643246+00	
00000000-0000-0000-0000-000000000000	169bb14c-16f3-4338-bef0-84fda20185aa	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 19:13:06.049707+00	
00000000-0000-0000-0000-000000000000	91809a9c-1110-4144-baf0-ae37117355fe	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 19:13:06.063144+00	
00000000-0000-0000-0000-000000000000	f76286c7-8ffd-41d9-b663-48fc86b8dc49	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 20:11:27.660734+00	
00000000-0000-0000-0000-000000000000	d4c03a56-feb7-41d3-bda4-b1e0ce8ba537	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 20:11:27.685328+00	
00000000-0000-0000-0000-000000000000	4e1030e4-b267-44a5-80f2-7afebca7695e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 21:07:16.10331+00	
00000000-0000-0000-0000-000000000000	de947903-7fac-4213-8fde-ec73d5a34969	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 21:07:16.128807+00	
00000000-0000-0000-0000-000000000000	453366dd-c216-44ea-84a0-bb712949465a	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 21:09:41.541134+00	
00000000-0000-0000-0000-000000000000	50098412-4522-4d7c-a0d8-518a7bc258e0	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 21:09:41.549159+00	
00000000-0000-0000-0000-000000000000	7a4f3fd8-b22a-4d03-95a2-0727bf1da248	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 22:06:45.690444+00	
00000000-0000-0000-0000-000000000000	0118804f-89fa-4db4-8ca6-70cbd2b13462	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 22:06:45.730994+00	
00000000-0000-0000-0000-000000000000	9b752874-9a29-4cd7-bade-11a239c024e1	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 22:08:10.791119+00	
00000000-0000-0000-0000-000000000000	07772bfc-ef04-4cd1-8dfb-9ebb3336e5f3	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 22:08:10.792147+00	
00000000-0000-0000-0000-000000000000	5753fd35-6418-4d4a-878e-71ec18e7ff17	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 23:05:45.685692+00	
00000000-0000-0000-0000-000000000000	dba69846-4629-4131-9b5a-4a7f37b6edfe	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 23:05:45.722197+00	
00000000-0000-0000-0000-000000000000	ae0679c6-f53d-445e-a421-7e68e1aea855	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 23:06:40.846866+00	
00000000-0000-0000-0000-000000000000	1fc4ace5-e52f-4e02-8b9a-727b2162024b	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-22 23:06:40.847588+00	
00000000-0000-0000-0000-000000000000	eb0e34ee-9970-4763-b721-55a8ae26fdcc	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 00:04:45.718642+00	
00000000-0000-0000-0000-000000000000	0f0fb86b-c32e-4297-a2ec-7446c133831b	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 00:04:45.757503+00	
00000000-0000-0000-0000-000000000000	9380081a-62e1-4245-a901-b9d5a600fce8	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 00:04:58.586754+00	
00000000-0000-0000-0000-000000000000	b67fadf9-73c9-4012-8e38-6f39e2689088	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 00:04:58.587388+00	
00000000-0000-0000-0000-000000000000	ac922b60-6d95-4d1c-a344-d75ac7c39081	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 01:03:26.610809+00	
00000000-0000-0000-0000-000000000000	f7095301-9038-46a2-a09d-86de33a7db78	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 01:03:26.657681+00	
00000000-0000-0000-0000-000000000000	06a15723-3403-4caa-a155-6e292fd2d86b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 01:03:45.703015+00	
00000000-0000-0000-0000-000000000000	fb1f2a9d-c78c-43d6-985d-546abfc1259e	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 01:03:45.707407+00	
00000000-0000-0000-0000-000000000000	03d5ac99-da32-4565-83f8-9c3f087b3ca8	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 03:17:18.103863+00	
00000000-0000-0000-0000-000000000000	2f1d9ef1-0560-4135-a5d9-1224cc613ffc	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 03:17:18.104341+00	
00000000-0000-0000-0000-000000000000	36a209df-3832-45f9-91e2-2ecd92d03524	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 03:17:18.123715+00	
00000000-0000-0000-0000-000000000000	c3957a12-82e2-40ee-8037-97e406febe26	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 03:17:18.123712+00	
00000000-0000-0000-0000-000000000000	279f00ba-8fa7-4f66-b45e-0684f97cba7b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 04:16:13.306835+00	
00000000-0000-0000-0000-000000000000	3b11959a-3a95-4907-b1a4-70db94caad69	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 04:16:13.323261+00	
00000000-0000-0000-0000-000000000000	e775a671-1ec5-4ae1-a304-144cc5c99070	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 05:14:38.538364+00	
00000000-0000-0000-0000-000000000000	f725513f-fcba-45c2-b821-626a18e573f8	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 05:14:38.569142+00	
00000000-0000-0000-0000-000000000000	beb04b73-a91f-4a4d-ba05-8e1743d6bdd1	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 06:13:46.153037+00	
00000000-0000-0000-0000-000000000000	db98cca7-2bf8-42cc-a13e-679ff79201e5	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 06:13:46.175295+00	
00000000-0000-0000-0000-000000000000	7b33052e-b6b5-4193-a055-10808932c457	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 07:12:46.074805+00	
00000000-0000-0000-0000-000000000000	e80c6b70-2816-4990-8184-bab15fa8d5c8	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 07:12:46.098504+00	
00000000-0000-0000-0000-000000000000	3e26a11e-bed9-49a3-a824-2f32bdab91b0	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 12:19:29.691711+00	
00000000-0000-0000-0000-000000000000	975df9f0-6f9b-43dc-b001-0c76bc3951e2	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 12:19:29.71844+00	
00000000-0000-0000-0000-000000000000	3e8344d2-990d-411a-bafd-6c8cc230b360	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 13:17:39.309846+00	
00000000-0000-0000-0000-000000000000	8d1430c8-5c17-445f-ae5a-2579e71f3283	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 13:17:39.327681+00	
00000000-0000-0000-0000-000000000000	a92418da-3757-4181-92ba-a9f60a7b1715	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 14:16:41.359872+00	
00000000-0000-0000-0000-000000000000	6a9b1393-d119-4105-943a-a28e26654139	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 14:16:41.38627+00	
00000000-0000-0000-0000-000000000000	82e51b81-001d-4f07-a760-ebff9a2ed0bb	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 15:32:43.27167+00	
00000000-0000-0000-0000-000000000000	f3252aaa-1c0f-421b-8b9e-837d44977d37	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 15:32:43.295214+00	
00000000-0000-0000-0000-000000000000	cdcc8370-991c-41f1-86c6-6c62697a943d	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 18:40:45.656155+00	
00000000-0000-0000-0000-000000000000	a3d04b6c-3e53-4ac6-bbac-2c4019a6fad4	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 18:40:45.683213+00	
00000000-0000-0000-0000-000000000000	52bdea62-2e4f-41f2-a4b8-56dd55f5aee4	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 20:42:25.439289+00	
00000000-0000-0000-0000-000000000000	46aba7e8-3a4b-44a7-bccf-8986f5faa636	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 20:42:25.466898+00	
00000000-0000-0000-0000-000000000000	b06ee4df-fae8-4f69-a766-def8cef557f3	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 20:43:05.279857+00	
00000000-0000-0000-0000-000000000000	82dac309-6a36-4330-9fce-83789706c404	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 21:41:41.706178+00	
00000000-0000-0000-0000-000000000000	c1c65b36-4ce2-40d2-b523-ba78bc33e392	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 21:41:41.72189+00	
00000000-0000-0000-0000-000000000000	42954d31-da06-4608-b082-5830b3852e9c	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 22:40:41.902821+00	
00000000-0000-0000-0000-000000000000	3689bde9-c7a7-4db5-a0c0-71e6137654e8	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 22:40:41.92425+00	
00000000-0000-0000-0000-000000000000	6e097b8e-3c02-40d9-a4a7-be63e6d93594	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 23:39:41.509511+00	
00000000-0000-0000-0000-000000000000	69d8aa12-f746-4660-9f6b-2bfbee4afcf5	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-23 23:39:41.526668+00	
00000000-0000-0000-0000-000000000000	b1103e65-4148-4770-a641-f6eae129414c	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-24 00:38:41.776142+00	
00000000-0000-0000-0000-000000000000	3c343d17-37bf-4a76-9703-7389d7e01a83	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-24 00:38:41.794272+00	
00000000-0000-0000-0000-000000000000	de288f4a-084a-4e1f-b3a0-38ab3bd91836	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-24 12:13:12.877983+00	
00000000-0000-0000-0000-000000000000	7a7c91ff-9656-438f-85e7-f2006c1d935c	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-24 12:13:12.91025+00	
00000000-0000-0000-0000-000000000000	b1a92fec-821e-40da-bacf-146fbda113ec	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-01 20:08:19.637081+00	
00000000-0000-0000-0000-000000000000	c643cd14-b143-460c-bf2d-5e6e2bb664fc	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-01 21:06:28.607057+00	
00000000-0000-0000-0000-000000000000	161c1b72-df70-4f3b-99c1-3586f6b7ad94	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-01 21:06:28.644195+00	
00000000-0000-0000-0000-000000000000	e70c0579-9231-41e9-99bd-57ca771bce63	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-01 22:04:44.314372+00	
00000000-0000-0000-0000-000000000000	246e1606-95ce-456c-a54a-03997c4dd6ee	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-01 22:04:44.329121+00	
00000000-0000-0000-0000-000000000000	60d6ceda-02c5-489e-b292-d810f1bd14d3	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-01 22:31:32.240835+00	
00000000-0000-0000-0000-000000000000	18004fd7-93ea-4f93-8698-fb057a190092	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-01 22:31:32.254004+00	
00000000-0000-0000-0000-000000000000	262780d4-f0c6-4a40-8cac-a0a454e46057	{"action":"logout","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-10-01 22:31:52.424935+00	
00000000-0000-0000-0000-000000000000	708db134-964b-4ce4-a348-e111d7344e8e	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-01 22:31:58.443069+00	
00000000-0000-0000-0000-000000000000	502863dd-c21b-4c25-a25b-5e5eecce5672	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-01 22:32:53.389299+00	
00000000-0000-0000-0000-000000000000	784d2175-bb6e-4614-8ffb-aa56059e7e90	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-01 23:30:18.277246+00	
00000000-0000-0000-0000-000000000000	6cd59dfd-59de-4dee-a8e3-b83d7f208dff	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-01 23:30:18.28957+00	
00000000-0000-0000-0000-000000000000	dcee9195-0b7a-44ee-a4bd-4ad5784087b1	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 00:28:44.128771+00	
00000000-0000-0000-0000-000000000000	d00bbcfe-536d-4df8-98b7-8b4e1fc17593	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 00:28:44.152196+00	
00000000-0000-0000-0000-000000000000	3c292dfa-617f-46f6-b871-3ea5116362f8	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 04:03:44.119195+00	
00000000-0000-0000-0000-000000000000	7c93136d-c4e7-4e8f-9dff-c90f8aad9dbb	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 04:03:44.141251+00	
00000000-0000-0000-0000-000000000000	440fdb60-d7fc-4cbd-b3cf-867a95a7788f	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 05:01:57.590809+00	
00000000-0000-0000-0000-000000000000	250d034e-b5b4-4bff-baa2-921ecf1ab258	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 05:01:57.617838+00	
00000000-0000-0000-0000-000000000000	84ff1046-6c86-4911-801f-251258ac6a4f	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 13:47:51.93421+00	
00000000-0000-0000-0000-000000000000	bae1ec0c-4c07-4d94-85f8-e934167169d6	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 13:47:51.961093+00	
00000000-0000-0000-0000-000000000000	3768207d-6e39-4f64-941d-469beb390d5e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 14:46:53.834865+00	
00000000-0000-0000-0000-000000000000	554399f4-c660-4551-a107-967232b95d92	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 14:46:53.863501+00	
00000000-0000-0000-0000-000000000000	15d6d453-4105-4dda-9073-5d22b0dc278e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 15:45:18.977495+00	
00000000-0000-0000-0000-000000000000	fda92282-c087-429f-91ad-fd122b0ed22b	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 15:45:18.999434+00	
00000000-0000-0000-0000-000000000000	cca0afc1-ae0d-4f6d-89a1-f17029749a25	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 16:43:30.995933+00	
00000000-0000-0000-0000-000000000000	033e3783-cd33-4814-b2ce-7251323987f8	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 16:43:31.028905+00	
00000000-0000-0000-0000-000000000000	b2101f6f-0907-47d8-9eaa-377600d42626	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 20:07:07.527652+00	
00000000-0000-0000-0000-000000000000	fb90a812-4b27-4fa4-962a-ef41289a3819	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 20:07:07.536595+00	
00000000-0000-0000-0000-000000000000	9afac892-3ae2-42d8-bb73-0830f3e95daf	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-02 20:27:48.629086+00	
00000000-0000-0000-0000-000000000000	3700d20a-1960-429e-9779-c73cebbba198	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 21:05:53.836035+00	
00000000-0000-0000-0000-000000000000	62d8e0d7-9444-404a-ae56-96aa8cd45e4a	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 21:05:53.865871+00	
00000000-0000-0000-0000-000000000000	0eb1d6c1-a3bf-4c0c-b350-af3e07fbb14a	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 22:04:53.939098+00	
00000000-0000-0000-0000-000000000000	4899259c-9148-4230-a60f-c008f2f67ef9	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 22:04:53.960739+00	
00000000-0000-0000-0000-000000000000	847ba5ad-2f68-4b7c-91b7-9548c9895a5a	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-02 22:27:52.199522+00	
00000000-0000-0000-0000-000000000000	1a1e4e26-087d-48de-9f8f-f54abc37d7e0	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 23:03:53.774019+00	
00000000-0000-0000-0000-000000000000	f2d5b336-04cd-4abe-94bd-5fdc03b217d8	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-02 23:03:53.796661+00	
00000000-0000-0000-0000-000000000000	57fe3e5c-c18c-4dc5-ac2a-97d26e8ca8a7	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 03:24:17.791214+00	
00000000-0000-0000-0000-000000000000	2a691a24-adbe-4183-8d9c-11c22b15dd18	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 03:24:17.813323+00	
00000000-0000-0000-0000-000000000000	c17eeeb3-4549-4e88-b2a9-6b299ce15d54	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 03:24:20.212854+00	
00000000-0000-0000-0000-000000000000	5b667f56-da53-484b-afe0-f6b275b4ad62	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 03:24:20.213542+00	
00000000-0000-0000-0000-000000000000	9b77f5d0-491a-4711-a401-fa0e645c7c43	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 04:14:59.723005+00	
00000000-0000-0000-0000-000000000000	be87b528-f300-48e0-b066-2aa679fd985c	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 04:14:59.751943+00	
00000000-0000-0000-0000-000000000000	d99ea97d-7677-4c35-aa9f-691fac68c53e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 04:22:56.342666+00	
00000000-0000-0000-0000-000000000000	59d69e3a-b4ad-4c7b-9676-7d9e2e8f8ffa	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 04:22:56.345659+00	
00000000-0000-0000-0000-000000000000	f240354b-5758-4a27-856c-20f7414198bd	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 09:41:19.00581+00	
00000000-0000-0000-0000-000000000000	07fbcdd3-77aa-4014-b3ab-5ce09d55ca18	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 09:41:19.039604+00	
00000000-0000-0000-0000-000000000000	4789326b-c83b-4569-8b70-4e07a590192d	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 09:49:34.388572+00	
00000000-0000-0000-0000-000000000000	74de4eb4-55dd-4123-8ec5-073551050e05	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 09:49:34.396126+00	
00000000-0000-0000-0000-000000000000	b5a5f625-a540-4126-9ce3-bfc4c59ed2f8	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 09:49:37.726385+00	
00000000-0000-0000-0000-000000000000	9e49c8bf-7926-4400-9c39-5a0875688cf5	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 09:49:37.726997+00	
00000000-0000-0000-0000-000000000000	782a44f4-677c-4334-9920-9c4550cf6784	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 10:39:56.546595+00	
00000000-0000-0000-0000-000000000000	31020277-4384-4c75-9bd6-d16d417ff4bd	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 10:39:56.575965+00	
00000000-0000-0000-0000-000000000000	153d3a1d-8ea1-441f-98d3-f112c680fba4	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 12:33:44.048274+00	
00000000-0000-0000-0000-000000000000	23bf035b-2b15-4ffd-ab59-67f0e078b95c	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 12:33:44.090172+00	
00000000-0000-0000-0000-000000000000	ff5f13e7-9c06-4c67-8c65-8d13ec067551	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 13:24:05.405702+00	
00000000-0000-0000-0000-000000000000	a2ded056-e4b2-4564-be82-132b6e9ea524	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 13:24:05.428725+00	
00000000-0000-0000-0000-000000000000	c3b91d22-9dd6-482b-8dbd-b3476be62308	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 13:24:06.418818+00	
00000000-0000-0000-0000-000000000000	a0a373fe-b626-4af5-ae6d-1090b9cb71af	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 13:24:06.419599+00	
00000000-0000-0000-0000-000000000000	e8a53675-845f-4f6f-9fb1-37622b995bfa	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 13:24:08.712078+00	
00000000-0000-0000-0000-000000000000	257ba8da-0dd9-4f0d-8d10-b9ffcdc43212	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 14:22:56.363653+00	
00000000-0000-0000-0000-000000000000	839d05db-4d64-4941-9f8f-9eb810940112	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 14:22:56.383645+00	
00000000-0000-0000-0000-000000000000	cbb74678-028f-4844-8b0d-565d27a2f25a	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 15:19:38.176162+00	
00000000-0000-0000-0000-000000000000	0b7070fd-ab14-459c-9a37-63c904ee6c32	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 15:19:38.199146+00	
00000000-0000-0000-0000-000000000000	9edb0c94-f4fd-40cf-af59-962aae6cc8dc	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 15:21:56.31196+00	
00000000-0000-0000-0000-000000000000	f3729848-915d-469c-9c11-0a7c8c76d20d	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 15:21:56.312627+00	
00000000-0000-0000-0000-000000000000	a873498c-d7bd-4005-be41-9726c108a788	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 17:24:01.354761+00	
00000000-0000-0000-0000-000000000000	2587d765-e471-4e75-a711-94c6e6e6cc4c	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 17:24:01.387576+00	
00000000-0000-0000-0000-000000000000	665c8230-8592-4f2a-879b-2caee6f7c7a8	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 18:22:56.014584+00	
00000000-0000-0000-0000-000000000000	cfef633f-572d-4cd0-bc04-cddb2cf376ab	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 18:22:56.043444+00	
00000000-0000-0000-0000-000000000000	ef90808f-e38b-4078-893d-3a4a88524edf	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 18:57:45.80763+00	
00000000-0000-0000-0000-000000000000	89ddbb14-91ff-4c08-9d30-6a8ac8e7e477	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 18:57:45.819463+00	
00000000-0000-0000-0000-000000000000	bfaddb06-f0f8-4af2-afba-f52d4903fb31	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 21:10:22.627128+00	
00000000-0000-0000-0000-000000000000	58dd3848-d44f-449c-a81a-b24a3115c7f3	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 21:10:22.641197+00	
00000000-0000-0000-0000-000000000000	238dd5db-b8e7-41ee-b800-04c6c039d292	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 23:10:57.309262+00	
00000000-0000-0000-0000-000000000000	c197b701-7ccd-4c01-890a-1b14edeb158f	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 23:10:57.322713+00	
00000000-0000-0000-0000-000000000000	ef75e30d-84bc-480d-826b-1a142e5b9428	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 23:15:54.199921+00	
00000000-0000-0000-0000-000000000000	878789bb-1162-4e8f-a14c-9a95c39d4936	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-03 23:15:54.217231+00	
00000000-0000-0000-0000-000000000000	614cdb94-7cee-475b-94dc-eace2530f06e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 00:14:24.915994+00	
00000000-0000-0000-0000-000000000000	8c5ee6df-7717-40bc-97d8-91e44f5e3105	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 00:14:24.932283+00	
00000000-0000-0000-0000-000000000000	58342ab9-c156-4ae4-b3ce-f59365a74af6	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 01:12:50.997677+00	
00000000-0000-0000-0000-000000000000	77d96f01-2c3c-4426-bd18-12fe80870227	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 01:12:51.017967+00	
00000000-0000-0000-0000-000000000000	9de1ab1f-d3c3-4241-bce8-6d5b5b88051a	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 01:53:35.959008+00	
00000000-0000-0000-0000-000000000000	8bbcd7c6-5362-42c2-aa17-8022d0faa3ba	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 01:53:35.962703+00	
00000000-0000-0000-0000-000000000000	6792805c-b4c1-417f-aaff-8fb7c0191ce5	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 02:11:56.112924+00	
00000000-0000-0000-0000-000000000000	a4ad016f-94ff-4065-9b84-95a93b6d32e2	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 02:11:56.128693+00	
00000000-0000-0000-0000-000000000000	c2ee9e15-bb54-4e7b-8784-66d7eceba4c1	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 03:01:17.069849+00	
00000000-0000-0000-0000-000000000000	f6b41d5e-3329-44f0-b296-e9777df725af	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 03:01:17.102094+00	
00000000-0000-0000-0000-000000000000	4de3c063-bea9-42eb-a93a-2f5b45d03486	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 03:10:55.99623+00	
00000000-0000-0000-0000-000000000000	a9294ea1-0b1e-490d-a0a8-36d78b349936	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 03:10:56.005622+00	
00000000-0000-0000-0000-000000000000	6f4a7b66-72f9-4c3f-8c3a-04adc4d6c0ac	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 04:00:30.964011+00	
00000000-0000-0000-0000-000000000000	53930a31-ac04-4689-b576-ec043bd3ca70	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 04:00:30.977858+00	
00000000-0000-0000-0000-000000000000	aa29ceac-49fc-4daa-8874-932c05ec9918	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 04:09:55.971419+00	
00000000-0000-0000-0000-000000000000	1e77ae36-2e80-4e01-91fb-93b64702d088	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 04:09:55.978864+00	
00000000-0000-0000-0000-000000000000	30ccc46e-2f41-46e2-8619-a24f1b8c9bb9	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 04:58:41.28882+00	
00000000-0000-0000-0000-000000000000	6f86deab-d08a-41d1-bc73-cd6c5132f600	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 04:58:41.318506+00	
00000000-0000-0000-0000-000000000000	b403903b-053d-4ce7-9be0-fb95afb86351	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 05:08:55.930951+00	
00000000-0000-0000-0000-000000000000	dc8481b3-bbc9-4945-80ac-ecab24525cb4	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 05:08:55.941703+00	
00000000-0000-0000-0000-000000000000	99bcf994-be9d-4dbb-b98a-34bd96d2dac4	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 05:56:50.927483+00	
00000000-0000-0000-0000-000000000000	4a2e575c-f2b1-4214-8aa0-1122ddbdba42	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 05:56:50.944149+00	
00000000-0000-0000-0000-000000000000	4df7d8cf-2f63-4ab2-a1d5-af3fceb1e9c8	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 06:55:12.034603+00	
00000000-0000-0000-0000-000000000000	26ac4f30-f795-4fb5-b4bb-e7b7b687ce7a	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 06:55:12.054191+00	
00000000-0000-0000-0000-000000000000	f6c4c369-8fb7-4ff9-b566-981b1c714994	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 07:53:32.409387+00	
00000000-0000-0000-0000-000000000000	656b29f1-8ce0-44df-ba79-b41a30b11e2e	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 07:53:32.43063+00	
00000000-0000-0000-0000-000000000000	a332a509-a123-4303-b6da-2d775ff4b83c	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 15:21:14.046921+00	
00000000-0000-0000-0000-000000000000	088a00b9-174b-40f8-8dc5-1c5f070560c6	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 15:21:14.078711+00	
00000000-0000-0000-0000-000000000000	214faaf4-584e-43d7-b6c4-7713129195ed	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 15:22:15.422311+00	
00000000-0000-0000-0000-000000000000	8d2b4c3e-8456-4976-88de-a603a8630b6f	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 15:22:15.425093+00	
00000000-0000-0000-0000-000000000000	83f816b8-e205-458a-b82e-edf1d6d6e32c	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 16:19:55.386264+00	
00000000-0000-0000-0000-000000000000	937d0e49-5818-48a8-acc7-e7f57b7853ba	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 16:19:55.396399+00	
00000000-0000-0000-0000-000000000000	1cd6d011-182b-4a91-8c3b-5aeb11487d5b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 17:18:22.193745+00	
00000000-0000-0000-0000-000000000000	573ac0b9-86ef-48f6-bcad-691793d6558e	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 17:18:22.2151+00	
00000000-0000-0000-0000-000000000000	ce12786e-e985-4942-ba8f-f4ef30c0cf34	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 18:16:32.399205+00	
00000000-0000-0000-0000-000000000000	d2cbdd0e-de72-4bb2-9681-4dc51f87d790	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 18:16:32.422196+00	
00000000-0000-0000-0000-000000000000	1f1bac3c-4dac-4701-b542-586a3f97816f	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 19:14:35.274376+00	
00000000-0000-0000-0000-000000000000	e7fe1ee9-d2d9-4616-8d61-9bc3d7b84c02	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 19:14:35.284351+00	
00000000-0000-0000-0000-000000000000	7b3b3376-ce73-4620-ba72-d236658543e5	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 20:12:38.246922+00	
00000000-0000-0000-0000-000000000000	dac3c8a3-6776-492f-bc54-c043ff8d26b8	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 20:12:38.263372+00	
00000000-0000-0000-0000-000000000000	2f32d2ce-ab04-4e63-b039-4faa61e5533e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 21:11:05.760785+00	
00000000-0000-0000-0000-000000000000	3791d62e-f603-42cf-8ad9-62bc3810b182	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 21:11:05.773994+00	
00000000-0000-0000-0000-000000000000	27feaf7f-8fea-4a39-b462-f7c88f813d01	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 22:09:09.722846+00	
00000000-0000-0000-0000-000000000000	e47d6e19-385f-40ed-8d68-383d54560b90	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 22:09:09.747432+00	
00000000-0000-0000-0000-000000000000	b81758dc-ae99-4483-a542-dc4a39f0d3c6	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 23:07:41.73024+00	
00000000-0000-0000-0000-000000000000	712876e7-98c6-4c5f-877b-96206fbc30d4	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-04 23:07:41.743806+00	
00000000-0000-0000-0000-000000000000	a4e83cd1-5687-440e-8bba-4cf23493228c	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 00:48:46.501142+00	
00000000-0000-0000-0000-000000000000	dd8a7b2b-0a3e-4500-a2e9-3a151aca5f74	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 00:48:46.530123+00	
00000000-0000-0000-0000-000000000000	f2f5a1d8-1520-42aa-a4c0-31d4574d4b75	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 01:47:17.465062+00	
00000000-0000-0000-0000-000000000000	a1389f4d-7aba-41e8-a910-008fe2a4d615	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 01:47:17.485847+00	
00000000-0000-0000-0000-000000000000	102e2d13-72af-4366-8d25-acb8a720a372	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 02:45:45.405069+00	
00000000-0000-0000-0000-000000000000	a8f8667b-ed4b-4bb3-8f9d-19460a96300a	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 02:45:45.427614+00	
00000000-0000-0000-0000-000000000000	aa4f46f6-d940-46d2-9ade-539b4c31fe9e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 03:43:48.617531+00	
00000000-0000-0000-0000-000000000000	9b44e16a-3834-4231-ab68-c7bf5de235a5	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 03:43:48.633314+00	
00000000-0000-0000-0000-000000000000	3fba8408-d2c3-4cd4-b2ed-e4a488a0cd51	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 04:42:23.365122+00	
00000000-0000-0000-0000-000000000000	53e38158-ce97-488d-88a9-1a8d8abd9cad	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 04:42:23.374704+00	
00000000-0000-0000-0000-000000000000	679c760e-3a1f-4451-adf1-64a2e5c6c9bb	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 05:40:45.538922+00	
00000000-0000-0000-0000-000000000000	ac9c802a-45ca-4141-b5e8-4366a2b8dc34	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 05:40:45.565269+00	
00000000-0000-0000-0000-000000000000	120ccd7d-f508-4a7c-a6b6-881d5640f3a5	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 06:39:23.609197+00	
00000000-0000-0000-0000-000000000000	2241fe4a-18b4-4f35-be25-0a72c26970d9	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 06:39:23.627425+00	
00000000-0000-0000-0000-000000000000	06f7dd15-9f8b-4fdb-a806-bb77344cbd7b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 07:37:42.124025+00	
00000000-0000-0000-0000-000000000000	114b3eb9-acf6-444a-b5ce-c8f2b4cb93c1	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 07:37:42.141214+00	
00000000-0000-0000-0000-000000000000	e3afe395-a1d8-4c0a-bd7d-dd68f8175077	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 08:36:20.389887+00	
00000000-0000-0000-0000-000000000000	349e12d3-c811-44dd-b02e-ccf8be2b13c5	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 08:36:20.403462+00	
00000000-0000-0000-0000-000000000000	f8169340-b29e-4c5d-817f-f2b5b30ab784	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 15:36:59.080588+00	
00000000-0000-0000-0000-000000000000	a1a497fb-9006-4ef0-b878-8b42f89e8ff8	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 15:36:59.11727+00	
00000000-0000-0000-0000-000000000000	217ad42c-e624-481a-a7fe-95fb3bed2f98	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 16:35:20.138465+00	
00000000-0000-0000-0000-000000000000	32be49ce-3844-4425-8143-955ff780516c	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 16:35:20.154458+00	
00000000-0000-0000-0000-000000000000	51c3f6e7-ad76-4db3-91d7-f0155c7e8464	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 17:33:30.217563+00	
00000000-0000-0000-0000-000000000000	3e3e96ad-ed20-4375-ba09-9ef322756536	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 17:33:30.236337+00	
00000000-0000-0000-0000-000000000000	48f5c93b-2bf7-4db8-ba53-cc1a07d375c8	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 18:50:32.364763+00	
00000000-0000-0000-0000-000000000000	13df39a2-5978-4b9d-be75-2d5732468613	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 18:50:32.38602+00	
00000000-0000-0000-0000-000000000000	f1c5fd60-eee2-4580-9bd5-1456916a954b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 19:48:57.568342+00	
00000000-0000-0000-0000-000000000000	e3af8934-080c-41b0-9513-083db10cc046	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-05 19:48:57.584455+00	
00000000-0000-0000-0000-000000000000	dea13451-3992-43b0-86db-11f83da5c4bc	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 11:03:42.06944+00	
00000000-0000-0000-0000-000000000000	a28a8e20-9fca-4654-a87d-c2aaf72851e3	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 11:03:42.101532+00	
00000000-0000-0000-0000-000000000000	1e243b76-42de-46cb-9de2-bd89acaf4873	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 12:02:13.196977+00	
00000000-0000-0000-0000-000000000000	4805bd55-6650-473a-a140-df7531fce85d	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 12:02:13.225133+00	
00000000-0000-0000-0000-000000000000	e6f80d49-39e3-4134-a952-25a98335edfa	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 14:05:12.454643+00	
00000000-0000-0000-0000-000000000000	a3ebb6fd-d0f5-44fd-be17-0907d953a52c	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 14:05:12.468529+00	
00000000-0000-0000-0000-000000000000	cd8e49b1-a537-4efc-8d53-51c180538cbf	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 15:03:16.281639+00	
00000000-0000-0000-0000-000000000000	5eb60874-e846-45f4-9a51-a9466666b841	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 15:03:16.294913+00	
00000000-0000-0000-0000-000000000000	a967da55-246d-452e-ba59-0a8864d3fe2d	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 16:01:42.915911+00	
00000000-0000-0000-0000-000000000000	84175008-a7fd-4944-92a9-83f07bd50d44	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 16:01:42.947455+00	
00000000-0000-0000-0000-000000000000	2399693d-338a-4844-b41e-3d100dd106fc	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 17:24:32.065978+00	
00000000-0000-0000-0000-000000000000	41b0668e-b1b6-479e-94e7-47e783fefbe6	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 17:24:32.083491+00	
00000000-0000-0000-0000-000000000000	3253b069-7073-4f3c-9b36-a38f486fd4dc	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 18:22:55.49534+00	
00000000-0000-0000-0000-000000000000	69633889-657f-44e1-9316-42c2fbcac7cc	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 18:22:55.52077+00	
00000000-0000-0000-0000-000000000000	83abafbc-b431-4704-93fb-e47773105897	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 19:20:59.307575+00	
00000000-0000-0000-0000-000000000000	16cc27fc-fc49-45d5-885e-793681bd173a	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 19:20:59.323294+00	
00000000-0000-0000-0000-000000000000	96d40d9c-f8d2-4e9a-a572-549819a4105c	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 20:19:13.500262+00	
00000000-0000-0000-0000-000000000000	b42b9ce4-c89a-4a9e-abfa-ad81371edcf8	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 20:19:13.517418+00	
00000000-0000-0000-0000-000000000000	f3b1f8c4-2d0b-47cd-84fc-7f9e7c78c821	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 21:37:56.027557+00	
00000000-0000-0000-0000-000000000000	2a627477-f61d-4774-88b6-71332005b882	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 21:37:56.052205+00	
00000000-0000-0000-0000-000000000000	07c9f722-b429-4928-b267-0d7de4d10c61	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 22:37:54.090609+00	
00000000-0000-0000-0000-000000000000	f2be7c39-b37e-406d-ae37-f566f41d735e	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 22:37:54.107211+00	
00000000-0000-0000-0000-000000000000	68ea926a-e977-4d2f-ace3-f468881a0679	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 23:36:11.038386+00	
00000000-0000-0000-0000-000000000000	fe08f12e-4bc0-49e3-bba8-f316d4c07b3f	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-06 23:36:11.065643+00	
00000000-0000-0000-0000-000000000000	099829bd-ce52-4da8-bdd7-453b9fe39db1	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-07 00:34:31.249672+00	
00000000-0000-0000-0000-000000000000	898eaedb-c83f-4d30-94ac-aa83d25b4908	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-07 00:34:31.278433+00	
00000000-0000-0000-0000-000000000000	f80cfef7-8c45-459f-904e-612220b4f7a0	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-07 01:36:24.335137+00	
00000000-0000-0000-0000-000000000000	13fa1b95-7dc4-440a-bd82-03f33f64005f	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-07 01:36:24.357683+00	
00000000-0000-0000-0000-000000000000	f8154ace-2e3a-4f4c-b749-fd58487efbb6	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-07 03:35:44.656822+00	
00000000-0000-0000-0000-000000000000	ab877719-8a37-4327-bc94-9c0ce9a918c1	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-07 03:35:44.691371+00	
00000000-0000-0000-0000-000000000000	731c7415-6d44-4b5c-874a-7dcf8f1bc774	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-07 04:34:48.950726+00	
00000000-0000-0000-0000-000000000000	fd9e0851-e5f8-4997-a6d0-b08e6e2091a3	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-07 04:34:48.962513+00	
00000000-0000-0000-0000-000000000000	6aecd571-88ed-436e-a08c-5f64957c1655	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-07 05:57:33.416295+00	
00000000-0000-0000-0000-000000000000	5775dfed-33c2-44e6-8968-154658a0d3c9	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-07 05:57:33.4524+00	
00000000-0000-0000-0000-000000000000	55bb49c1-e23f-4c60-ae1a-ac6ce8e891cc	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-10 20:12:59.272632+00	
00000000-0000-0000-0000-000000000000	19f86c94-8983-475e-a405-b823c6ea30f0	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-10 21:10:59.725447+00	
00000000-0000-0000-0000-000000000000	d61f7a95-b5a7-427a-bd39-72dd45c71402	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-10 21:10:59.736349+00	
00000000-0000-0000-0000-000000000000	09c0ff1a-fd00-4c64-823e-9e3be35c4ef0	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-10 22:09:03.699438+00	
00000000-0000-0000-0000-000000000000	fcf82d8d-acef-4cdc-b8f9-5ab714001c98	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-10 22:09:03.715896+00	
00000000-0000-0000-0000-000000000000	11b6ddbf-3aa3-4147-b12b-afc755fc811c	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-10 23:07:09.621776+00	
00000000-0000-0000-0000-000000000000	059e7319-3c98-4e65-b86a-de224e9fcfc1	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-10 23:07:09.634281+00	
00000000-0000-0000-0000-000000000000	2727c7c1-d5ee-4f32-9430-eda7ed033f0d	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 00:05:22.74579+00	
00000000-0000-0000-0000-000000000000	bc4f29f7-4be9-4a6c-ac2b-640c4287795b	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 00:05:22.757034+00	
00000000-0000-0000-0000-000000000000	274a9e45-45b2-43b8-a354-41a73dab8e3a	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 01:03:28.553394+00	
00000000-0000-0000-0000-000000000000	d9791ead-145d-4ed9-87c0-6dd14edc999c	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 01:03:28.568694+00	
00000000-0000-0000-0000-000000000000	70a3853b-af64-4962-8c99-176a978c7f42	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 02:02:03.407022+00	
00000000-0000-0000-0000-000000000000	b3bc7224-4cf5-45d7-b37f-b2ff1f5a0e50	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 02:02:03.425239+00	
00000000-0000-0000-0000-000000000000	9ddd03b2-b1b2-4238-813c-bcdf4e1f4f29	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 03:00:27.601353+00	
00000000-0000-0000-0000-000000000000	33e26c8b-0eff-440e-8cc0-958a765105b1	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 03:00:27.622953+00	
00000000-0000-0000-0000-000000000000	cc6c82b1-318a-4a76-9e1c-2208544c235f	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 04:37:46.21272+00	
00000000-0000-0000-0000-000000000000	47502f10-263b-48db-bd82-c365d97ee6ec	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 04:37:46.224082+00	
00000000-0000-0000-0000-000000000000	d2be8cdf-f487-48c7-95e5-0f4092266d54	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 05:37:13.016742+00	
00000000-0000-0000-0000-000000000000	9703d27b-ef3f-4658-afb4-333d2860847a	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 05:37:13.038302+00	
00000000-0000-0000-0000-000000000000	bc4bd3b4-52ab-45fe-85d2-5ec8c27c3d86	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 06:35:47.657449+00	
00000000-0000-0000-0000-000000000000	04c52d17-9fe3-4da1-8ae4-76d140df55c0	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 06:35:47.668174+00	
00000000-0000-0000-0000-000000000000	cf6def72-0398-4320-b41f-4b076cb4f86e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 07:33:53.653894+00	
00000000-0000-0000-0000-000000000000	2aee56d5-ed22-4ffc-86a4-e461cd5dba50	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 07:33:53.678587+00	
00000000-0000-0000-0000-000000000000	ab7dd42d-7657-48ea-91d1-c9a6645b6e22	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 08:32:00.365848+00	
00000000-0000-0000-0000-000000000000	2a2e2d52-b8bf-4a1c-82ee-d8b57bf09351	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 08:32:00.390797+00	
00000000-0000-0000-0000-000000000000	c6b11523-9405-4105-bd83-68d1bcb221fd	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 09:31:41.805321+00	
00000000-0000-0000-0000-000000000000	5d445b93-c8e4-46e2-b5e9-49ebc454176d	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 09:31:41.822494+00	
00000000-0000-0000-0000-000000000000	5cbbbda8-435a-42d3-b551-79486afd5f0d	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 15:53:01.403829+00	
00000000-0000-0000-0000-000000000000	0edceeed-85ba-4978-b975-87839fefe3f6	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-11 15:53:01.429594+00	
00000000-0000-0000-0000-000000000000	c384b7df-7a02-4c45-8a56-3b459be1c35f	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-12 01:43:07.731735+00	
00000000-0000-0000-0000-000000000000	be13b1e5-e054-4366-895d-80d8ae79acc4	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-12 01:43:07.761664+00	
00000000-0000-0000-0000-000000000000	e6d4aa4a-0406-4e87-8fea-5d1fe4690913	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-12 02:37:13.734226+00	
00000000-0000-0000-0000-000000000000	26455194-7e1e-4739-a13b-af95d6e4dcb8	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-12 02:38:52.17554+00	
00000000-0000-0000-0000-000000000000	63bd1337-c978-4c61-add3-3c5aa85af42c	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-12 03:52:52.786252+00	
00000000-0000-0000-0000-000000000000	9b5bc392-14ce-47d6-b965-8e083560d2e2	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-12 03:52:52.813425+00	
00000000-0000-0000-0000-000000000000	531a4730-7bce-47bd-be65-0dcbc181bbd6	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-12 23:54:18.724021+00	
00000000-0000-0000-0000-000000000000	424bdbff-81d9-4112-83c0-1037148fc494	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-12 23:54:18.738304+00	
00000000-0000-0000-0000-000000000000	6e1200d0-7f47-4750-a93f-703f4fa5b293	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 02:26:39.763846+00	
00000000-0000-0000-0000-000000000000	942d9ec5-b6ce-4d3d-b0c0-f6f92a6265a2	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 02:26:39.787993+00	
00000000-0000-0000-0000-000000000000	44bac43e-c9da-4836-b5cd-67caff9b5c52	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 02:27:33.755788+00	
00000000-0000-0000-0000-000000000000	91be78ce-ce03-47ab-a43d-f7570620c9f8	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 02:27:33.75692+00	
00000000-0000-0000-0000-000000000000	438f5c8a-9f06-4272-91f5-bb27d56a8322	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 02:28:04.506298+00	
00000000-0000-0000-0000-000000000000	2b10547a-916c-4bd5-8f02-cca7e5b0c71c	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 02:28:04.508236+00	
00000000-0000-0000-0000-000000000000	e58810f1-43aa-4d2a-a780-928091665735	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-13 02:34:37.551388+00	
00000000-0000-0000-0000-000000000000	95c279fd-e612-4d5b-85eb-4c67e4c2e424	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 03:32:44.183451+00	
00000000-0000-0000-0000-000000000000	f9a84efd-bf0d-4b41-8946-cfe0117d5372	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 03:32:44.215365+00	
00000000-0000-0000-0000-000000000000	4e5e9ea5-0042-438f-9ab2-4fa711cb1954	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 04:38:41.779894+00	
00000000-0000-0000-0000-000000000000	a8c917ad-4a01-43fc-b311-d0c63f6d4d30	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 04:38:41.787836+00	
00000000-0000-0000-0000-000000000000	09b2df67-9a48-4f94-9b47-7430dc43925b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 05:15:02.117888+00	
00000000-0000-0000-0000-000000000000	15fd6422-266b-4b54-b8ac-b9965f3ac58d	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 05:15:02.13753+00	
00000000-0000-0000-0000-000000000000	cad7980c-4f1a-4d5c-ac86-c3615f9546a8	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 06:22:33.163913+00	
00000000-0000-0000-0000-000000000000	dedf152d-6241-4e34-96c4-c2110cd4abc9	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 06:22:33.199318+00	
00000000-0000-0000-0000-000000000000	74b2ad32-7d6a-40e4-ae61-602d3e36dddb	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 08:00:29.80135+00	
00000000-0000-0000-0000-000000000000	ba550b05-e230-4558-ae8f-c6302fa6fe9a	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 08:00:29.82754+00	
00000000-0000-0000-0000-000000000000	51ec78f8-006c-49fa-9786-c80e7b92a2f2	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 15:42:08.951652+00	
00000000-0000-0000-0000-000000000000	210e6403-5f2d-4e8f-a3d8-145c5d26fd94	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 15:42:08.982114+00	
00000000-0000-0000-0000-000000000000	a82afd5a-ccde-464e-89e8-7caacab7fb20	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 17:40:12.4803+00	
00000000-0000-0000-0000-000000000000	ed71422a-d356-4fd2-bee1-3f42aeeb1b8d	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 17:40:12.497921+00	
00000000-0000-0000-0000-000000000000	e44a3603-dc05-47e3-ad42-84d930522efb	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 19:13:49.848631+00	
00000000-0000-0000-0000-000000000000	87da2381-4b60-4327-9551-9fbe5885f764	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 19:13:49.862951+00	
00000000-0000-0000-0000-000000000000	bb029392-4804-401d-a566-786f8b4f7982	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 20:42:31.118468+00	
00000000-0000-0000-0000-000000000000	5863fd5a-14d6-4b7e-a10a-0cab77811fa2	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 20:42:31.132441+00	
00000000-0000-0000-0000-000000000000	f412e36a-ae91-472c-934d-ddf2ee7b7a44	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 21:40:35.523579+00	
00000000-0000-0000-0000-000000000000	705b87dd-1e02-49e1-b8f0-90b97e789baa	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 21:40:35.535195+00	
00000000-0000-0000-0000-000000000000	a6237984-132a-4b96-a47f-e955053211bf	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-13 22:10:29.292601+00	
00000000-0000-0000-0000-000000000000	ace025fa-78f2-47c0-a1c5-297e92f6d719	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 23:25:23.565013+00	
00000000-0000-0000-0000-000000000000	be54d7c2-2e5e-4912-9a8d-4cac92ff6407	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-13 23:25:23.59849+00	
00000000-0000-0000-0000-000000000000	ab1c3a1a-f9c8-4ac1-9e2e-359afab48b76	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-13 23:46:09.821111+00	
00000000-0000-0000-0000-000000000000	3e570723-9789-4ca8-9cbe-eb039b11ee8e	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-14 00:11:31.264161+00	
00000000-0000-0000-0000-000000000000	5c16d472-74f1-4cc9-924e-428f6d5f6929	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 01:11:05.682164+00	
00000000-0000-0000-0000-000000000000	24ff4b85-8c08-49a2-9923-754264c2cca6	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 01:11:05.708622+00	
00000000-0000-0000-0000-000000000000	03969a65-260b-4bfe-b17f-546f8bb04f6b	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-14 01:40:33.057107+00	
00000000-0000-0000-0000-000000000000	6f7e0d76-a9df-4a92-ae50-202b048d346d	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-14 01:49:07.823172+00	
00000000-0000-0000-0000-000000000000	83d246ec-1a19-41c5-b6f3-4a7e40d79fad	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 02:40:07.912324+00	
00000000-0000-0000-0000-000000000000	8ed967b5-2867-4468-8cca-60f46e02e546	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 02:40:07.934499+00	
00000000-0000-0000-0000-000000000000	c71fd3a0-49e0-4bb4-a534-571c69b0ba66	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 12:39:02.208248+00	
00000000-0000-0000-0000-000000000000	ef056bcb-0bd8-4631-b2fd-9c160e786dfb	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 12:39:02.22086+00	
00000000-0000-0000-0000-000000000000	1494d7a0-7385-426b-8432-46188d87f3e6	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 12:39:44.876165+00	
00000000-0000-0000-0000-000000000000	8b512ce8-1a7f-4c94-8f53-79637c35ab3f	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 12:39:44.879282+00	
00000000-0000-0000-0000-000000000000	2f458abc-af64-4139-b994-9a8e43df262d	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-14 12:46:19.733978+00	
00000000-0000-0000-0000-000000000000	b1fafb20-e62a-4a77-86d7-e2efe3c7de0e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 13:45:49.547605+00	
00000000-0000-0000-0000-000000000000	0729c7bf-590e-4193-bfd8-67950227f3b5	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 13:45:49.574002+00	
00000000-0000-0000-0000-000000000000	6f7020c7-4c00-4c09-9fbd-973b6b48a9b5	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-14 14:10:42.491624+00	
00000000-0000-0000-0000-000000000000	4e945632-5c41-4ded-8d58-c569d21aa1c1	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-14 16:39:12.768468+00	
00000000-0000-0000-0000-000000000000	f7c8ed32-6cab-403a-b431-fe156140066e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 17:38:52.798468+00	
00000000-0000-0000-0000-000000000000	d8ddf725-c2f6-4143-a5e1-1cc6ee12a824	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 17:38:52.816905+00	
00000000-0000-0000-0000-000000000000	73d78c46-2554-4331-815c-0b1d3dc3cc91	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 18:38:27.159355+00	
00000000-0000-0000-0000-000000000000	9ca45f2d-2d21-448e-8614-8354738edcaf	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 18:38:27.173294+00	
00000000-0000-0000-0000-000000000000	2651b55e-3b60-490b-a6ab-5dbac17a8ca0	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-14 22:52:40.69975+00	
00000000-0000-0000-0000-000000000000	03d9f624-1bfe-4ba7-a998-12524a3018c3	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-14 22:53:47.984655+00	
00000000-0000-0000-0000-000000000000	e2756071-5f8a-4da9-8dcf-27c54446c07e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 23:53:21.94692+00	
00000000-0000-0000-0000-000000000000	664a86ab-4656-4f84-8f36-5dfac7596368	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-14 23:53:21.970014+00	
00000000-0000-0000-0000-000000000000	41a6359e-644e-474f-b924-5842afed4b8e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 00:53:01.869976+00	
00000000-0000-0000-0000-000000000000	093ecb3d-1a64-4bad-8a3f-cf1926366b96	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 00:53:01.885166+00	
00000000-0000-0000-0000-000000000000	c49625fd-7d5e-45e1-9634-dfec57775554	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 01:52:32.04582+00	
00000000-0000-0000-0000-000000000000	ff22493d-4f74-46c5-bf35-af53fc9fc215	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 01:52:32.064913+00	
00000000-0000-0000-0000-000000000000	36d5a42e-dc30-46e7-8588-d17fb0c16d74	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 01:57:00.108012+00	
00000000-0000-0000-0000-000000000000	ea307756-5ee2-413c-8a29-3bd8b21c7feb	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 01:57:00.110347+00	
00000000-0000-0000-0000-000000000000	add24cef-f0fb-45ea-adec-3185548a4638	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 02:59:01.238846+00	
00000000-0000-0000-0000-000000000000	b2285198-2ed9-4a21-8dab-4626e1856738	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 02:59:01.262482+00	
00000000-0000-0000-0000-000000000000	1274cba7-969f-43fe-aa9d-cc2edd002bec	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 03:01:59.377366+00	
00000000-0000-0000-0000-000000000000	f9a8494d-ba1e-4295-8e61-1ae65fccea51	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 04:02:26.267708+00	
00000000-0000-0000-0000-000000000000	aa95720b-6191-4f8c-8a47-27d1ad2ca0b1	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 04:02:26.281262+00	
00000000-0000-0000-0000-000000000000	ff4ea537-4a79-4cb0-b680-3cf1296a699d	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 05:02:54.921514+00	
00000000-0000-0000-0000-000000000000	9e004669-2ad2-404c-93a3-18dee13806ad	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 05:02:54.932666+00	
00000000-0000-0000-0000-000000000000	d0d0fea0-fed0-43c5-adb7-dd97a29e4283	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 06:02:22.359894+00	
00000000-0000-0000-0000-000000000000	e77eba00-0af2-496c-97c6-b9d432fdad68	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 06:02:22.374169+00	
00000000-0000-0000-0000-000000000000	49ebbdae-35a9-45f9-80ae-2106fd18cc70	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 07:01:45.856111+00	
00000000-0000-0000-0000-000000000000	674ed960-15c5-4a26-8a65-e16129070524	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 07:01:45.868522+00	
00000000-0000-0000-0000-000000000000	be3f584a-c87a-45f1-992e-813fa0072771	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 08:04:28.699489+00	
00000000-0000-0000-0000-000000000000	e79151ec-48fe-4159-b87a-063a6a4daa1d	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 08:04:28.721894+00	
00000000-0000-0000-0000-000000000000	d26d5f0c-9d4a-4377-8cd8-82b4fdf801b7	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-15 09:01:44.564787+00	
00000000-0000-0000-0000-000000000000	fc4aa824-f7c3-4741-ab59-95b2afd3bf28	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 11:50:15.56433+00	
00000000-0000-0000-0000-000000000000	08b834b7-6233-47e5-b57b-5acf0bca3aed	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 11:50:15.593792+00	
00000000-0000-0000-0000-000000000000	7e73fb97-f010-4dfd-a99d-287924249e4e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 12:57:36.507487+00	
00000000-0000-0000-0000-000000000000	ef5bdc8a-3722-4f5c-9910-882877f51872	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 12:57:36.526172+00	
00000000-0000-0000-0000-000000000000	e4e6e89c-152d-4216-9bf1-be3fc944b78e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 14:00:08.729372+00	
00000000-0000-0000-0000-000000000000	ccf23229-031d-4501-a528-f402a06f6181	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 14:00:08.747765+00	
00000000-0000-0000-0000-000000000000	70c0005e-abd3-4216-b207-488fd9d92c0b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 15:04:27.294959+00	
00000000-0000-0000-0000-000000000000	2bfa2ae2-d73e-4fc7-b919-3e656e8ff194	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 15:04:27.305645+00	
00000000-0000-0000-0000-000000000000	fe3116ec-ca3c-4b87-b216-da60a98c2554	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 16:03:50.554593+00	
00000000-0000-0000-0000-000000000000	93592a64-af3b-493c-9825-d48d4ed24398	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 16:03:50.56797+00	
00000000-0000-0000-0000-000000000000	f2bb5d55-4b5d-4e72-a354-7332597a08eb	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 17:04:52.209082+00	
00000000-0000-0000-0000-000000000000	600aec19-83c1-4885-92bc-5fe4528e0e54	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 17:04:52.234621+00	
00000000-0000-0000-0000-000000000000	b693f556-2547-4c7a-b7b8-e6977ae4bc04	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 18:22:55.191748+00	
00000000-0000-0000-0000-000000000000	bd4aca9e-01ae-407c-8083-e9eb06eeef5f	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 18:22:55.214096+00	
00000000-0000-0000-0000-000000000000	fcb89354-58d0-4c44-9623-bf42f8cac728	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 19:46:30.607933+00	
00000000-0000-0000-0000-000000000000	95d6109e-0cd0-431e-b0bf-cba5bf0dfeb0	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 19:46:30.63539+00	
00000000-0000-0000-0000-000000000000	85fb7590-82e7-4772-8a8e-de9250b15e9c	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 20:45:56.920592+00	
00000000-0000-0000-0000-000000000000	b230cb66-526a-4e76-ac3e-9f35a790dbc7	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 20:45:56.944601+00	
00000000-0000-0000-0000-000000000000	6b970cb4-e1e9-4e1f-87da-86de324d5e35	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 22:31:49.290871+00	
00000000-0000-0000-0000-000000000000	155d6c41-2270-4f84-858a-e920ef5e376e	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-15 22:31:49.325632+00	
00000000-0000-0000-0000-000000000000	8c8a29fe-732e-4f04-8bef-b74763cee7d5	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 00:25:52.956805+00	
00000000-0000-0000-0000-000000000000	a71e389f-a513-4024-b4cf-2f843d0af604	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 00:25:52.980086+00	
00000000-0000-0000-0000-000000000000	9047b3db-6c45-49bc-aa22-254cee5576e4	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 01:29:32.237566+00	
00000000-0000-0000-0000-000000000000	0382dc7f-bb3d-4afd-8942-eae6766ee2a6	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 01:29:32.251404+00	
00000000-0000-0000-0000-000000000000	a6303c97-9b9e-4ad3-b378-be49f9150a44	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 02:41:57.604366+00	
00000000-0000-0000-0000-000000000000	1e51f377-1b92-4324-95e1-554de7ab6dd7	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 02:41:57.618139+00	
00000000-0000-0000-0000-000000000000	1e1dcc2a-e5f7-4af8-83cb-123e7f30e549	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 04:01:12.457236+00	
00000000-0000-0000-0000-000000000000	8fb4cb3c-d8e7-4d49-8ff2-7bd255c80d79	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 04:01:12.487116+00	
00000000-0000-0000-0000-000000000000	710046b5-d972-4c0d-92a2-5d50449f364d	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 15:47:32.42385+00	
00000000-0000-0000-0000-000000000000	6fd1846f-15c6-48c7-84f4-739c1565241b	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 15:47:32.450305+00	
00000000-0000-0000-0000-000000000000	84cac9cd-fb18-48f0-b6e1-637ff90052fc	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 17:09:32.028059+00	
00000000-0000-0000-0000-000000000000	1022f22e-2797-4e13-8991-2990a247dd71	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 17:09:32.130539+00	
00000000-0000-0000-0000-000000000000	fad2f785-6e31-413e-add5-ecf7a8f53e7a	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-16 17:20:08.03614+00	
00000000-0000-0000-0000-000000000000	367f348c-fd34-46e5-b4f5-a823658244d0	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 18:10:27.852531+00	
00000000-0000-0000-0000-000000000000	d7057657-4a36-4f89-9f66-a88d583a8b48	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 18:10:27.883494+00	
00000000-0000-0000-0000-000000000000	81569087-1a8b-4011-8438-d9f77257092b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 18:19:37.289276+00	
00000000-0000-0000-0000-000000000000	84d943b4-1cba-455e-b6b7-7430a36eb844	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 18:19:37.296093+00	
00000000-0000-0000-0000-000000000000	79db3ba5-090f-4ec5-9864-0cbad495610d	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 19:13:28.378032+00	
00000000-0000-0000-0000-000000000000	8f6a71a6-de57-454b-8444-47490fa8afa0	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 19:13:28.406576+00	
00000000-0000-0000-0000-000000000000	6f2bd834-f6d4-440f-9198-627076f3d06e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 19:18:36.720352+00	
00000000-0000-0000-0000-000000000000	9de96988-82b5-482d-97d2-ffc7bf50682b	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 19:18:36.723232+00	
00000000-0000-0000-0000-000000000000	a555529d-6c7d-4083-ad12-0838e2786cd5	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 20:12:52.489993+00	
00000000-0000-0000-0000-000000000000	94f2b188-f421-46bf-bd79-dad5011fe266	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 20:12:52.523182+00	
00000000-0000-0000-0000-000000000000	8848a88b-fd86-4e73-90d1-9364805c08eb	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 20:17:36.774106+00	
00000000-0000-0000-0000-000000000000	257b8ae6-6a30-4876-99ef-ecd573eae2c7	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 20:17:36.777759+00	
00000000-0000-0000-0000-000000000000	da3ef908-5e5c-404d-a582-58ee324bf9b4	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 21:12:12.288146+00	
00000000-0000-0000-0000-000000000000	980a47f8-00a6-45c4-864f-32fbc4d64ef2	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 21:12:12.302006+00	
00000000-0000-0000-0000-000000000000	aae8ed3e-1348-40c0-87e2-16326f0316c4	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 21:16:37.247874+00	
00000000-0000-0000-0000-000000000000	7cdf98c0-db7f-4158-9073-98b43eccb820	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 21:16:37.253987+00	
00000000-0000-0000-0000-000000000000	228ad934-3b34-4ff8-9da2-599e01cd7482	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 22:11:33.061213+00	
00000000-0000-0000-0000-000000000000	bbd86e8c-319a-43fc-8f6d-526e01f8dc9a	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 22:11:33.080409+00	
00000000-0000-0000-0000-000000000000	53a158bd-9307-415f-9954-de3600708f78	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 23:14:34.732998+00	
00000000-0000-0000-0000-000000000000	0943aa04-e49b-4eee-b2e5-28cb0f38dcef	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-16 23:14:34.760308+00	
00000000-0000-0000-0000-000000000000	21c87be7-8e47-4edb-b7a8-4f4dc0fea035	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 00:14:00.962236+00	
00000000-0000-0000-0000-000000000000	1c132cd2-0d19-4558-adab-23b4a3b8d5f4	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 00:14:00.980288+00	
00000000-0000-0000-0000-000000000000	62fa8065-2ca4-4904-85fc-f2162540b195	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 01:13:25.574997+00	
00000000-0000-0000-0000-000000000000	5e9be133-9dc4-4d4e-b84c-b1f7bfb55c39	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 01:13:25.582173+00	
00000000-0000-0000-0000-000000000000	6400a163-5354-49ac-9fe1-25a1f71ab08d	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-17 01:34:13.369163+00	
00000000-0000-0000-0000-000000000000	6826248a-2b12-424e-84dc-272538475dfe	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-17 01:35:35.373512+00	
00000000-0000-0000-0000-000000000000	4e848d2c-7107-45bf-86d0-20e974025dff	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-17 01:36:52.143937+00	
00000000-0000-0000-0000-000000000000	cbf643c7-283d-4c3a-82e0-cf886a04f90f	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 02:36:18.349707+00	
00000000-0000-0000-0000-000000000000	d7fdfb69-1e0a-47e8-95d0-685b28f4f544	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 02:36:18.360467+00	
00000000-0000-0000-0000-000000000000	3b1148d5-20b3-4f77-a160-d2b3777fc645	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 03:35:41.924653+00	
00000000-0000-0000-0000-000000000000	f6c2a18e-dd3c-4987-bad4-def74a49a77d	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 03:35:41.944958+00	
00000000-0000-0000-0000-000000000000	2a8e78df-be49-4825-af68-6c78430f8c8e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 04:17:16.780217+00	
00000000-0000-0000-0000-000000000000	c43a9b0e-6adb-4ff9-8bcd-adff31245c23	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 04:17:16.792596+00	
00000000-0000-0000-0000-000000000000	e7982b3f-c7c1-4831-8d99-913db6045155	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 04:40:24.660665+00	
00000000-0000-0000-0000-000000000000	cb7fa1b1-d195-41d5-b9d1-f6be776c4bd9	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 04:40:24.668896+00	
00000000-0000-0000-0000-000000000000	2343e63a-d361-4fc8-a7fb-9fb93fb83c5a	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 05:25:41.886611+00	
00000000-0000-0000-0000-000000000000	a1baf69f-8c63-4a69-a921-34a8cfe461dd	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 05:25:41.897614+00	
00000000-0000-0000-0000-000000000000	cefeb814-2530-49d3-84c2-a68cce0f7eab	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 05:39:47.757254+00	
00000000-0000-0000-0000-000000000000	0fb8d8e1-4d2d-4809-bb4c-319aa6751147	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 05:39:47.765523+00	
00000000-0000-0000-0000-000000000000	de2eba62-05e7-4fc5-8387-ee4bedca65ec	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 06:39:10.34361+00	
00000000-0000-0000-0000-000000000000	967ed75e-39f9-40e5-bc7b-6d3b814191cf	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 06:39:10.359261+00	
00000000-0000-0000-0000-000000000000	96af00a3-4898-4858-9e2c-4428cff920ba	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 14:14:03.607059+00	
00000000-0000-0000-0000-000000000000	8058df37-daaa-4db4-865a-2cd7e2a4aa1e	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 14:14:03.616769+00	
00000000-0000-0000-0000-000000000000	dc258928-2ca2-4f98-9d7c-1858f3441c19	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 14:17:15.07442+00	
00000000-0000-0000-0000-000000000000	fe7c36c9-d80f-4b3f-9495-18b9f0b2a341	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-17 14:17:15.081511+00	
00000000-0000-0000-0000-000000000000	db989730-9756-4987-ba15-c8003c4a40b0	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-19 20:05:04.456398+00	
00000000-0000-0000-0000-000000000000	670448b8-ec84-4b76-9ced-b3a66c99b677	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-19 20:05:04.488008+00	
00000000-0000-0000-0000-000000000000	e2b9faa8-d9fd-40c7-8a63-d2c38c7dca97	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-19 20:12:17.431939+00	
00000000-0000-0000-0000-000000000000	b1122993-53d7-4ca8-b00d-2f542f098e53	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-19 21:11:12.409012+00	
00000000-0000-0000-0000-000000000000	e39b01d2-b238-44f7-b2ab-baeef7482ee4	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-19 21:11:12.427881+00	
00000000-0000-0000-0000-000000000000	c6de8186-b923-4e8c-ba1b-4a0469a30eff	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-19 23:04:27.569916+00	
00000000-0000-0000-0000-000000000000	fd9848d1-69f3-40c9-8bf9-31c02205d94e	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-19 23:04:27.595265+00	
00000000-0000-0000-0000-000000000000	2ee82d32-e9c3-4d8c-8e25-377d0efd7a3b	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-19 23:26:14.477007+00	
00000000-0000-0000-0000-000000000000	0f7f343a-368e-4303-a437-1f81c71da166	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-19 23:26:14.491358+00	
00000000-0000-0000-0000-000000000000	66e18f3a-ff32-4617-8acd-8a140cf43f39	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-20 00:18:07.668511+00	
00000000-0000-0000-0000-000000000000	de19a707-3151-448d-a549-e80bf7f54a5b	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-20 00:18:07.689872+00	
00000000-0000-0000-0000-000000000000	cf342052-7e62-4e91-b450-10f17114d9d4	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-20 03:13:30.036217+00	
00000000-0000-0000-0000-000000000000	eb044b8b-8193-40d5-9f7d-02c00a9eea9a	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-20 03:13:30.051914+00	
00000000-0000-0000-0000-000000000000	12a24744-1dd5-4646-aec6-afdc7f3255ed	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-20 10:47:00.054933+00	
00000000-0000-0000-0000-000000000000	90cf5816-ec56-4428-81d2-bd6ac1aa5147	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-20 10:47:00.085152+00	
00000000-0000-0000-0000-000000000000	3580a588-16ab-4412-94d1-e0f93adb1354	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-21 17:06:12.066268+00	
00000000-0000-0000-0000-000000000000	c9647932-6e24-4937-a541-cb507b0edcc1	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-21 17:06:12.09642+00	
00000000-0000-0000-0000-000000000000	b748ec69-0835-47eb-bd5c-15b5ecb39ebc	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 01:38:40.433987+00	
00000000-0000-0000-0000-000000000000	3a7d8855-6c4c-4715-a159-76875d4db241	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 01:38:40.464127+00	
00000000-0000-0000-0000-000000000000	c3899c00-f330-4264-af73-ac1bd232b58a	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 06:11:05.66802+00	
00000000-0000-0000-0000-000000000000	50d31b57-5ad9-4a34-93b9-61f5b03a571e	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 06:11:05.69328+00	
00000000-0000-0000-0000-000000000000	ac36aeb7-e720-4b6e-bc3e-ba7b67438835	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 07:11:57.776132+00	
00000000-0000-0000-0000-000000000000	da7c246e-70b4-4f3e-9869-9949d8227e3d	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 07:11:57.784903+00	
00000000-0000-0000-0000-000000000000	c03a27f3-7eb2-45d6-8f2d-89aee0cedefb	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 08:11:26.819177+00	
00000000-0000-0000-0000-000000000000	8edeb0cb-715a-4cc6-902d-b89d08177eb0	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 08:11:26.831768+00	
00000000-0000-0000-0000-000000000000	b11cdc32-3d23-4559-8418-8b92740feabd	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 09:10:49.193715+00	
00000000-0000-0000-0000-000000000000	ea6b2e42-1922-4393-a0b3-3640e226f4c0	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 09:10:49.200999+00	
00000000-0000-0000-0000-000000000000	8cb20d03-a382-4422-a6a3-52b10ddf1e26	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 10:10:13.331263+00	
00000000-0000-0000-0000-000000000000	34857ec4-cac9-4d59-add6-fe5b70c99362	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 10:10:13.34342+00	
00000000-0000-0000-0000-000000000000	8b0fa0f6-a4d2-4fcc-8002-04567cd184ef	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 11:09:33.54716+00	
00000000-0000-0000-0000-000000000000	5659e0c5-ea99-4065-97d3-92991295c5e1	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 11:09:33.561643+00	
00000000-0000-0000-0000-000000000000	6bb6aa87-249c-4f83-a4a9-825d081a4718	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 12:09:00.765556+00	
00000000-0000-0000-0000-000000000000	ec2ae1cf-528e-49bf-871d-65007d7c7adb	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 12:09:00.786936+00	
00000000-0000-0000-0000-000000000000	c954826f-dede-4733-92d2-9f969da40ddd	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 16:35:44.326685+00	
00000000-0000-0000-0000-000000000000	fb10be80-9e4f-4520-a3a5-ceb9e6ff8aaa	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 16:35:44.349514+00	
00000000-0000-0000-0000-000000000000	cd8e8297-47d7-4d9a-bd46-992696821cc4	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 17:35:14.375911+00	
00000000-0000-0000-0000-000000000000	7697829f-14f2-4368-8db8-36e864369575	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 17:35:14.384283+00	
00000000-0000-0000-0000-000000000000	4be67732-0ac2-4d1e-b256-b11b85380ba9	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-26 18:23:43.376251+00	
00000000-0000-0000-0000-000000000000	cad7c7ea-4c40-4867-b644-fc5b1d575aaf	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 18:34:36.780126+00	
00000000-0000-0000-0000-000000000000	074e94e5-ac98-4f3c-aec1-c9fc825991c5	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 18:34:36.783243+00	
00000000-0000-0000-0000-000000000000	fd76a233-b63a-4c47-9baf-1419fa061d95	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 19:23:16.998523+00	
00000000-0000-0000-0000-000000000000	3c488709-6fbf-47c3-abea-97cf95ef4560	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 19:23:17.016636+00	
00000000-0000-0000-0000-000000000000	1ae741f4-9c76-4c19-99bd-a4331b9b82dc	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 20:22:51.974231+00	
00000000-0000-0000-0000-000000000000	df9f0a41-c3ba-49d3-a6ce-87a590859721	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 20:22:51.986102+00	
00000000-0000-0000-0000-000000000000	28cdc678-4cbb-4b4d-9617-ce3c80ee5178	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 20:49:08.336448+00	
00000000-0000-0000-0000-000000000000	c866cc52-ca1b-4cb8-8852-59f9fca4a668	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 20:49:08.365202+00	
00000000-0000-0000-0000-000000000000	44ca6d8e-d544-40b5-b71d-bcdfd37e12c9	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 22:39:02.572597+00	
00000000-0000-0000-0000-000000000000	9741cfd6-486f-49c0-8ad8-590f7132f772	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-26 22:39:02.591042+00	
00000000-0000-0000-0000-000000000000	08141550-ba6b-4eb9-ad5e-e47c8bbdb03e	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 04:05:42.631064+00	
00000000-0000-0000-0000-000000000000	b70664ab-2412-4988-8aec-863878f4e817	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 04:05:42.665682+00	
00000000-0000-0000-0000-000000000000	835942cb-b1da-46d8-829b-381c373746d1	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 05:13:14.501935+00	
00000000-0000-0000-0000-000000000000	5a552da4-aa31-403b-ae72-4550463d63d6	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 05:13:14.522444+00	
00000000-0000-0000-0000-000000000000	f7c7831c-8ecb-4490-a7b0-fe5f61873f66	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 10:32:11.355492+00	
00000000-0000-0000-0000-000000000000	9f343914-db26-4979-ac74-43332917bf52	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 10:32:11.383964+00	
00000000-0000-0000-0000-000000000000	2dc65b5c-e9bd-487d-a0ce-a31485fa10a1	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 11:38:19.038187+00	
00000000-0000-0000-0000-000000000000	fe218b68-8332-4d74-9bae-a560c3440364	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 11:38:19.046235+00	
00000000-0000-0000-0000-000000000000	c56258a6-27ce-4b7c-9ba1-2e975f8bfa85	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 12:37:46.480143+00	
00000000-0000-0000-0000-000000000000	3ec02b43-091b-43f2-863c-a9e34d9a77db	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 12:37:46.49416+00	
00000000-0000-0000-0000-000000000000	77d37249-d7a2-491c-a381-d66e2146e9fb	{"action":"logout","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-10-27 12:55:06.655215+00	
00000000-0000-0000-0000-000000000000	9f3b6b5c-1c4b-4e4c-b815-bbc65d3a7e0b	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-27 13:40:15.121967+00	
00000000-0000-0000-0000-000000000000	e90272e3-212c-41a9-acc6-323c01ec943a	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-27 14:00:11.872898+00	
00000000-0000-0000-0000-000000000000	776d9c9e-fc2d-400c-a843-80357e3c58de	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 14:47:42.215853+00	
00000000-0000-0000-0000-000000000000	3fd54861-b809-490b-8c16-c42f3d7160ef	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 14:47:42.233929+00	
00000000-0000-0000-0000-000000000000	e7e88505-23c1-4bda-8cae-f779ba633ab5	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 14:59:46.633351+00	
00000000-0000-0000-0000-000000000000	64fc267c-b386-4baa-b53e-eeb54ad7277a	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 14:59:46.637461+00	
00000000-0000-0000-0000-000000000000	4bc320bd-2615-470f-ba5f-f1a3b04f4ff8	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 16:19:56.50386+00	
00000000-0000-0000-0000-000000000000	aac7b0ce-0818-46b2-a007-1483ac46fb82	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-27 16:19:56.517566+00	
00000000-0000-0000-0000-000000000000	75b70400-d0b0-4136-98b0-019ed62ffb92	{"action":"logout","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-10-27 16:22:06.132819+00	
00000000-0000-0000-0000-000000000000	b452d2fb-29d2-431c-b942-8780e4392da9	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-27 17:27:29.163982+00	
00000000-0000-0000-0000-000000000000	54489d85-1045-4dd3-9b6b-f9eeec46b8a2	{"action":"user_signedup","actor_id":"b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae","actor_username":"andreri.up@gmail.com","actor_via_sso":false,"log_type":"team","traits":{"provider":"email"}}	2025-10-27 20:35:45.632632+00	
00000000-0000-0000-0000-000000000000	3f120f61-162b-4083-ae2b-db75757b0fc5	{"action":"login","actor_id":"b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae","actor_username":"andreri.up@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-27 20:35:45.660879+00	
00000000-0000-0000-0000-000000000000	83d43845-99bf-42cd-9b55-d19eb465c3d9	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-28 01:59:46.533295+00	
00000000-0000-0000-0000-000000000000	61f57855-7839-47a7-aebb-64bb1323c7d0	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-28 01:59:46.559341+00	
00000000-0000-0000-0000-000000000000	8d9633d3-e25d-49a6-acd6-8ff4b2c217e3	{"action":"token_refreshed","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-28 13:19:12.654229+00	
00000000-0000-0000-0000-000000000000	65720176-1eca-4416-8e6a-d20667ad277a	{"action":"token_revoked","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-10-28 13:19:12.683466+00	
00000000-0000-0000-0000-000000000000	964ce1eb-1bff-40d9-bac3-b0ee628b541a	{"action":"logout","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-10-28 13:43:42.444392+00	
00000000-0000-0000-0000-000000000000	e1341d29-4be7-4a43-b829-9a7f3e9022f5	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-28 13:43:57.512916+00	
00000000-0000-0000-0000-000000000000	4bb154c0-f7eb-4be5-bd89-4e613540d8b1	{"action":"logout","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-10-28 14:22:15.538625+00	
00000000-0000-0000-0000-000000000000	e644ed69-d42c-4bdc-bf79-4eee6a227d54	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-28 14:22:29.840005+00	
00000000-0000-0000-0000-000000000000	9decffd5-5881-4a76-a39a-7e25da19f2b6	{"action":"logout","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-10-28 14:23:16.851532+00	
00000000-0000-0000-0000-000000000000	758b1242-a4dc-4b10-bf04-d200bf507201	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-28 14:24:53.366793+00	
00000000-0000-0000-0000-000000000000	28b86ae3-e908-4cde-98f8-edab1430c07e	{"action":"logout","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-10-28 14:28:54.724181+00	
00000000-0000-0000-0000-000000000000	8b356df7-b235-400d-abeb-59d2373fbd4a	{"action":"login","actor_id":"0cede974-5348-4ec7-93d7-5991f64d7913","actor_username":"jeslleypires@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-10-28 15:23:39.42908+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
0cede974-5348-4ec7-93d7-5991f64d7913	0cede974-5348-4ec7-93d7-5991f64d7913	{"sub": "0cede974-5348-4ec7-93d7-5991f64d7913", "email": "jeslleypires@gmail.com", "display_name": "Jeslley Pires", "email_verified": false, "phone_verified": false}	email	2025-09-10 02:14:25.512481+00	2025-09-10 02:14:25.512534+00	2025-09-10 02:14:25.512534+00	f299b0dc-a600-4064-9b7e-64b5b7950c92
b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae	b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae	{"sub": "b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae", "email": "andreri.up@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-10-27 20:35:45.617959+00	2025-10-27 20:35:45.618618+00	2025-10-27 20:35:45.618618+00	c6c3cd29-b701-4420-907f-fb6405b08b79
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
04071684-9c5d-4a4f-820c-d3226d69fa16	2025-10-01 22:31:58.451385+00	2025-10-01 22:31:58.451385+00	password	f2619eb7-ca58-4c48-b47c-096a78136b44
fdd43403-d9b5-4399-968a-10aa1d3184b6	2025-10-01 22:32:53.445561+00	2025-10-01 22:32:53.445561+00	password	259fd992-1dd3-428f-b116-87fff8e84419
f463df6a-2b93-4207-9552-9f7c55746da2	2025-10-02 20:27:48.68511+00	2025-10-02 20:27:48.68511+00	password	66a46b38-d605-4cd7-9b32-3885f373da86
08762f21-a879-41ce-8ed9-c8a1a3938a46	2025-10-02 22:27:52.268986+00	2025-10-02 22:27:52.268986+00	password	c6e192bb-2b70-4bf1-a6ec-21dc79120d10
a505bb60-ffe2-4f16-873c-1c509d9d5071	2025-10-10 20:12:59.372473+00	2025-10-10 20:12:59.372473+00	password	e0c1a597-f56a-45af-a1d2-1b200fa4c921
4b4428b6-afff-4189-b3ae-09e03afcc1e5	2025-10-12 02:37:13.813263+00	2025-10-12 02:37:13.813263+00	password	5b395f2b-01b7-4201-b48d-1388ae286da7
61d1a110-6005-4a30-80cf-59f5a0a73ef2	2025-10-12 02:38:52.187317+00	2025-10-12 02:38:52.187317+00	password	9abe51a8-5e90-4cbd-a15f-4554c3ba2022
ec81de4b-5e19-479c-a7c3-3bf2984c2436	2025-10-13 02:34:37.587279+00	2025-10-13 02:34:37.587279+00	password	50abc44e-caea-4914-974c-ff220f78226a
506abe54-5d94-4870-8103-6dc2255b1580	2025-10-13 22:10:29.411855+00	2025-10-13 22:10:29.411855+00	password	6a094dd1-b445-403d-bf1e-56ebeef35415
c63c5bc3-1a1c-4f21-9597-cf0993056162	2025-10-13 23:46:09.906401+00	2025-10-13 23:46:09.906401+00	password	d8fdfd97-69eb-46ae-81a1-4b99fde73098
aa2b703a-99a4-43dc-9cef-8df697e0c476	2025-10-14 00:11:31.335926+00	2025-10-14 00:11:31.335926+00	password	9c961b6b-5e79-4b08-a5ca-c0376478ca68
6c495dd4-6f0e-452c-858d-e9d954c6eea5	2025-10-14 01:40:33.138034+00	2025-10-14 01:40:33.138034+00	password	7520671c-fc80-4083-b3c2-b4aaedcdfc71
7150ad16-18b1-42a9-b991-7674f65e164a	2025-10-14 01:49:07.877604+00	2025-10-14 01:49:07.877604+00	password	b00d8784-be2e-4859-adb3-bea1e02eda7e
f30bd3f4-4bbd-4be3-a7fb-1af20cd20ecc	2025-10-14 12:46:19.810889+00	2025-10-14 12:46:19.810889+00	password	d9cf62ef-9684-4565-a1c2-df755c78d501
7483941a-c4c9-445c-9cae-206faee6ce21	2025-10-14 14:10:42.590798+00	2025-10-14 14:10:42.590798+00	password	97286de0-1afe-4172-a732-eec420f5ff7c
8058a030-9a87-4d95-b94c-cfc5f0db7231	2025-10-14 16:39:12.888394+00	2025-10-14 16:39:12.888394+00	password	46425ebe-fffd-497d-a2bf-1f19e3b48b52
3a86289c-08d3-439c-a7fb-f90cd585bb5b	2025-10-14 22:52:40.777992+00	2025-10-14 22:52:40.777992+00	password	eeec9cc7-4350-47c2-b222-58b78ef9ec13
e8bb7511-2f9f-4854-ab05-f713515628c1	2025-10-14 22:53:47.996526+00	2025-10-14 22:53:47.996526+00	password	125b64ac-57cc-4df0-8995-c647b2e8d255
afc6e332-043c-4d15-9ec9-32a1b493e80d	2025-10-15 09:01:44.68052+00	2025-10-15 09:01:44.68052+00	password	23c7e380-67a2-4475-9726-794a3f90fe1b
fde6cd48-cb49-44d8-8035-ea6751da964e	2025-10-16 17:20:08.145086+00	2025-10-16 17:20:08.145086+00	password	a72b2ff7-1bb3-4595-b310-80e612dbcc05
556ed0c4-d801-4368-86fe-4fce6d53dd64	2025-10-17 01:34:13.475244+00	2025-10-17 01:34:13.475244+00	password	f6f17d54-5641-49e4-8d22-81f56090a23c
dcce31eb-1112-4c9d-9bb5-406e5cbf0994	2025-10-17 01:35:35.382589+00	2025-10-17 01:35:35.382589+00	password	b5ff35eb-af9d-4ada-b191-a9bd6671fb37
0c4a0348-72e4-4c61-ace8-715d6ad26174	2025-10-19 20:12:17.451018+00	2025-10-19 20:12:17.451018+00	password	42942e7d-c987-47fc-a166-ca4f89b2c5af
e3ee7436-6fa6-4661-92d3-05b90cac9297	2025-10-26 18:23:43.450937+00	2025-10-26 18:23:43.450937+00	password	9801994b-ccc3-43f3-8e1a-ac0a331330ff
c7ae1d3d-45de-4d7f-8f52-17e22cef5135	2025-10-27 14:00:11.944482+00	2025-10-27 14:00:11.944482+00	password	3e3a7caf-44d1-4b6d-b636-60dc5c4d9037
e8c83d0a-41df-481f-bc02-4cad82ebfa14	2025-10-27 20:35:45.715829+00	2025-10-27 20:35:45.715829+00	password	851ca6e1-b6d9-4f68-a406-dd1be70690b0
68cc154f-4a51-4adc-9cec-48ba373d549e	2025-10-28 15:23:39.521433+00	2025-10-28 15:23:39.521433+00	password	bf388a92-afa6-427d-b206-cc1d2df28df7
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- Data for Name: oauth_authorizations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.oauth_authorizations (id, authorization_id, client_id, user_id, redirect_uri, scope, state, resource, code_challenge, code_challenge_method, response_type, status, authorization_code, created_at, expires_at, approved_at) FROM stdin;
\.


--
-- Data for Name: oauth_clients; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.oauth_clients (id, client_secret_hash, registration_type, redirect_uris, grant_types, client_name, client_uri, logo_uri, created_at, updated_at, deleted_at, client_type) FROM stdin;
\.


--
-- Data for Name: oauth_consents; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.oauth_consents (id, user_id, client_id, scopes, granted_at, revoked_at) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	81	awipua23w2sw	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-01 22:31:58.450155+00	2025-10-01 23:30:18.291876+00	\N	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	83	dssml5dvwvkg	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-01 23:30:18.298644+00	2025-10-02 00:28:44.152879+00	awipua23w2sw	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	109	4nbawgjupjyj	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 15:19:38.225407+00	2025-10-07 05:57:33.456398+00	4kpa76cwxsrr	08762f21-a879-41ce-8ed9-c8a1a3938a46
00000000-0000-0000-0000-000000000000	84	erv3cuxzlex2	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 00:28:44.16917+00	2025-10-02 04:03:44.143161+00	dssml5dvwvkg	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	115	bot5urs62vka	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 23:10:57.338861+00	2025-10-13 02:26:39.79092+00	q2ctuzmn4b2s	f463df6a-2b93-4207-9552-9f7c55746da2
00000000-0000-0000-0000-000000000000	85	wfip2klnrvkr	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 04:03:44.164816+00	2025-10-02 05:01:57.61857+00	erv3cuxzlex2	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	86	k2uqt7jdfwtr	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 05:01:57.650081+00	2025-10-02 13:47:51.968922+00	wfip2klnrvkr	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	87	yml6n4h6y7dd	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 13:47:51.992136+00	2025-10-02 14:46:53.864893+00	k2uqt7jdfwtr	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	88	xzhn7r6yqpbv	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 14:46:53.895263+00	2025-10-02 15:45:19.000095+00	yml6n4h6y7dd	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	89	qr2mwauf6uqn	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 15:45:19.018746+00	2025-10-02 16:43:31.030968+00	xzhn7r6yqpbv	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	82	q3zrasjxhtg5	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-01 22:32:53.416357+00	2025-10-02 20:07:07.539673+00	\N	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	91	u5jhha4wqhg6	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 20:07:07.545846+00	2025-10-02 21:05:53.8671+00	q3zrasjxhtg5	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	93	6d2nh24hr24x	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 21:05:53.890997+00	2025-10-02 22:04:53.961515+00	u5jhha4wqhg6	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	94	3rmbccsx5mly	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 22:04:53.988045+00	2025-10-02 23:03:53.797626+00	6d2nh24hr24x	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	96	r4y4wyd6t2fh	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 23:03:53.817571+00	2025-10-03 03:24:17.815138+00	3rmbccsx5mly	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	95	jl6ot3idoynl	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 22:27:52.248487+00	2025-10-03 03:24:20.215778+00	\N	08762f21-a879-41ce-8ed9-c8a1a3938a46
00000000-0000-0000-0000-000000000000	92	7enm3zor2zm7	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 20:27:48.653866+00	2025-10-03 04:14:59.752716+00	\N	f463df6a-2b93-4207-9552-9f7c55746da2
00000000-0000-0000-0000-000000000000	98	vrgkpemtuhid	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 03:24:20.216146+00	2025-10-03 04:22:56.34624+00	jl6ot3idoynl	08762f21-a879-41ce-8ed9-c8a1a3938a46
00000000-0000-0000-0000-000000000000	100	7ze74mefwzlt	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 04:22:56.347601+00	2025-10-03 09:41:19.040397+00	vrgkpemtuhid	08762f21-a879-41ce-8ed9-c8a1a3938a46
00000000-0000-0000-0000-000000000000	97	qu5spuel6bqw	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 03:24:17.835426+00	2025-10-03 09:49:34.396812+00	r4y4wyd6t2fh	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	99	c4sshgybbzja	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 04:14:59.781517+00	2025-10-03 09:49:37.727581+00	7enm3zor2zm7	f463df6a-2b93-4207-9552-9f7c55746da2
00000000-0000-0000-0000-000000000000	101	3rwwqdcd62v2	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 09:41:19.06266+00	2025-10-03 10:39:56.576665+00	7ze74mefwzlt	08762f21-a879-41ce-8ed9-c8a1a3938a46
00000000-0000-0000-0000-000000000000	104	5dti5i423r3l	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 10:39:56.607462+00	2025-10-03 12:33:44.092091+00	3rwwqdcd62v2	08762f21-a879-41ce-8ed9-c8a1a3938a46
00000000-0000-0000-0000-000000000000	103	tmdgrpgkxlkw	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 09:49:37.727964+00	2025-10-03 13:24:05.430065+00	c4sshgybbzja	f463df6a-2b93-4207-9552-9f7c55746da2
00000000-0000-0000-0000-000000000000	102	a6hxyhxn462v	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 09:49:34.404263+00	2025-10-03 13:24:06.420281+00	qu5spuel6bqw	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	107	5ydrgx62jtzw	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 13:24:06.420651+00	2025-10-03 14:22:56.385044+00	a6hxyhxn462v	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	105	4kpa76cwxsrr	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 12:33:44.1137+00	2025-10-03 15:19:38.199816+00	5dti5i423r3l	08762f21-a879-41ce-8ed9-c8a1a3938a46
00000000-0000-0000-0000-000000000000	108	eak5kgjcdquy	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 14:22:56.40424+00	2025-10-03 15:21:56.315227+00	5ydrgx62jtzw	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	110	bn7me6yvi7eg	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 15:21:56.315671+00	2025-10-03 17:24:01.389593+00	eak5kgjcdquy	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	111	yt4xxdesbsl6	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 17:24:01.412146+00	2025-10-03 18:22:56.044191+00	bn7me6yvi7eg	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	106	fmf6ceme3nbs	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 13:24:05.451275+00	2025-10-03 18:57:45.820127+00	tmdgrpgkxlkw	f463df6a-2b93-4207-9552-9f7c55746da2
00000000-0000-0000-0000-000000000000	113	omygs7ssazva	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 18:57:45.827559+00	2025-10-03 21:10:22.645+00	fmf6ceme3nbs	f463df6a-2b93-4207-9552-9f7c55746da2
00000000-0000-0000-0000-000000000000	114	q2ctuzmn4b2s	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 21:10:22.654038+00	2025-10-03 23:10:57.324977+00	omygs7ssazva	f463df6a-2b93-4207-9552-9f7c55746da2
00000000-0000-0000-0000-000000000000	112	jilifici7jdx	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 18:22:56.068755+00	2025-10-03 23:15:54.217895+00	yt4xxdesbsl6	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	116	33o65skmg3x6	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-03 23:15:54.237028+00	2025-10-04 00:14:24.93305+00	jilifici7jdx	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	117	ku4die7mp3nd	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 00:14:24.949633+00	2025-10-04 01:12:51.01875+00	33o65skmg3x6	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	90	rlglstmi2kht	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-02 16:43:31.058516+00	2025-10-04 01:53:35.963494+00	qr2mwauf6uqn	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	118	aotleacg3peh	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 01:12:51.035573+00	2025-10-04 02:11:56.129662+00	ku4die7mp3nd	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	119	ew3hohhlecu3	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 01:53:35.974685+00	2025-10-04 03:01:17.103392+00	rlglstmi2kht	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	120	y6ftzxdhdecn	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 02:11:56.146955+00	2025-10-04 03:10:56.006493+00	aotleacg3peh	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	121	f25tsosenxh6	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 03:01:17.13441+00	2025-10-04 04:00:30.979078+00	ew3hohhlecu3	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	122	jpuuwxgmyab3	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 03:10:56.014173+00	2025-10-04 04:09:55.979566+00	y6ftzxdhdecn	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	123	pscggjjq67bh	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 04:00:30.989324+00	2025-10-04 04:58:41.31921+00	f25tsosenxh6	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	124	bchdt7mhgtn3	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 04:09:55.984487+00	2025-10-04 05:08:55.94288+00	jpuuwxgmyab3	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	125	44s3yiqlvxvm	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 04:58:41.352868+00	2025-10-04 05:56:50.944845+00	pscggjjq67bh	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	127	yd47azd6jfls	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 05:56:50.956489+00	2025-10-04 06:55:12.055524+00	44s3yiqlvxvm	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	128	hybnm564pn7t	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 06:55:12.077994+00	2025-10-04 07:53:32.432069+00	yd47azd6jfls	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	129	cqg3eraqt7ae	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 07:53:32.458001+00	2025-10-04 15:21:14.081933+00	hybnm564pn7t	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	126	ih76yef67kjr	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 05:08:55.954227+00	2025-10-04 15:22:15.428806+00	bchdt7mhgtn3	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	130	m4dteprdz5n5	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 15:21:14.107319+00	2025-10-04 16:19:55.3997+00	cqg3eraqt7ae	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	243	k2d4t37ytgek	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 22:31:49.355804+00	2025-10-16 00:25:52.983563+00	sl5z7gcr2no2	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	146	gooifys457m6	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 06:39:23.650609+00	2025-10-05 07:37:42.144577+00	zfjc2cgyskdf	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	132	tapz7wdksjau	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 16:19:55.407743+00	2025-10-04 17:18:22.21585+00	m4dteprdz5n5	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	147	cjxvpfzpbenr	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 07:37:42.154809+00	2025-10-05 08:36:20.404119+00	gooifys457m6	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	133	eeed2bcvbsey	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 17:18:22.241695+00	2025-10-04 18:16:32.423908+00	tapz7wdksjau	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	134	ylmgz22o64e4	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 18:16:32.449623+00	2025-10-04 19:14:35.285532+00	eeed2bcvbsey	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	148	uyqt5ivkiq7r	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 08:36:20.422811+00	2025-10-05 15:36:59.118021+00	cjxvpfzpbenr	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	135	h437mjsninah	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 19:14:35.297245+00	2025-10-04 20:12:38.265882+00	ylmgz22o64e4	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	149	cc54evmd7f45	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 15:36:59.143074+00	2025-10-05 16:35:20.155168+00	uyqt5ivkiq7r	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	136	bz67jbywmogo	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 20:12:38.287064+00	2025-10-04 21:11:05.779916+00	h437mjsninah	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	137	jrvnn5fg7kyo	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 21:11:05.791279+00	2025-10-04 22:09:09.748838+00	bz67jbywmogo	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	150	lfkspcm6omww	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 16:35:20.176186+00	2025-10-05 17:33:30.24369+00	cc54evmd7f45	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	138	bgl22kfb4blu	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 22:09:09.774595+00	2025-10-04 23:07:41.745847+00	jrvnn5fg7kyo	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	139	klmif4skb2bs	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 23:07:41.757164+00	2025-10-05 00:48:46.530817+00	bgl22kfb4blu	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	151	7qlu6h3ki5cw	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 17:33:30.25761+00	2025-10-05 18:50:32.386868+00	lfkspcm6omww	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	140	jso3nb46ln3v	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 00:48:46.557175+00	2025-10-05 01:47:17.486514+00	klmif4skb2bs	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	141	57zof4lt34zh	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 01:47:17.49635+00	2025-10-05 02:45:45.429381+00	jso3nb46ln3v	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	152	3y7ln6aqayyh	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 18:50:32.405785+00	2025-10-05 19:48:57.5871+00	7qlu6h3ki5cw	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	142	petpprbmgzm5	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 02:45:45.442898+00	2025-10-05 03:43:48.637066+00	57zof4lt34zh	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	143	z4h5csgjj453	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 03:43:48.647924+00	2025-10-05 04:42:23.377107+00	petpprbmgzm5	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	153	sg3nbreoxmj2	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 19:48:57.605257+00	2025-10-06 11:03:42.10337+00	3y7ln6aqayyh	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	144	dd77c2nlge73	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 04:42:23.382982+00	2025-10-05 05:40:45.56778+00	z4h5csgjj453	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	145	zfjc2cgyskdf	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-05 05:40:45.593235+00	2025-10-05 06:39:23.628107+00	dd77c2nlge73	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	154	mecw53rm3tfu	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 11:03:42.127428+00	2025-10-06 12:02:13.22831+00	sg3nbreoxmj2	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	155	b7ff6ygihv2c	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 12:02:13.244933+00	2025-10-06 14:05:12.470294+00	mecw53rm3tfu	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	156	pd4mneounlto	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 14:05:12.480244+00	2025-10-06 15:03:16.296182+00	b7ff6ygihv2c	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	157	z4floammkyez	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 15:03:16.310001+00	2025-10-06 16:01:42.951783+00	pd4mneounlto	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	158	kb4cikxjs3vz	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 16:01:42.982921+00	2025-10-06 17:24:32.084811+00	z4floammkyez	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	159	cqrh3o2vks7s	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 17:24:32.09815+00	2025-10-06 18:22:55.521435+00	kb4cikxjs3vz	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	160	k7cwhrojpn4a	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 18:22:55.552096+00	2025-10-06 19:20:59.325221+00	cqrh3o2vks7s	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	161	sll3ctwxazo5	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 19:20:59.335818+00	2025-10-06 20:19:13.518049+00	k7cwhrojpn4a	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	162	sriqhdvir2ny	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 20:19:13.54032+00	2025-10-06 21:37:56.054867+00	sll3ctwxazo5	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	163	pwhsu6tocfua	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 21:37:56.078992+00	2025-10-06 22:37:54.109523+00	sriqhdvir2ny	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	164	qfgz355vfj27	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 22:37:54.124172+00	2025-10-06 23:36:11.06693+00	pwhsu6tocfua	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	165	fe4wzsdshpeq	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-06 23:36:11.094768+00	2025-10-07 00:34:31.280374+00	qfgz355vfj27	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	166	ccubcfkld2k6	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-07 00:34:31.306286+00	2025-10-07 01:36:24.360883+00	fe4wzsdshpeq	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	167	n4albqmez22e	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-07 01:36:24.386734+00	2025-10-07 03:35:44.695875+00	ccubcfkld2k6	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	168	fil6ayrbrs5d	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-07 03:35:44.712719+00	2025-10-07 04:34:48.965601+00	n4albqmez22e	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	169	jno5sk6vk6ih	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-07 04:34:48.980685+00	2025-10-07 04:34:48.980685+00	fil6ayrbrs5d	04071684-9c5d-4a4f-820c-d3226d69fa16
00000000-0000-0000-0000-000000000000	170	ldxfuksrezzj	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-07 05:57:33.479581+00	2025-10-07 05:57:33.479581+00	4nbawgjupjyj	08762f21-a879-41ce-8ed9-c8a1a3938a46
00000000-0000-0000-0000-000000000000	171	qcm76qrgteut	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-10 20:12:59.321235+00	2025-10-10 21:10:59.738689+00	\N	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	172	yscllr4rk4qt	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-10 21:10:59.748868+00	2025-10-10 22:09:03.718938+00	qcm76qrgteut	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	173	m3p5fn3mj6i7	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-10 22:09:03.733227+00	2025-10-10 23:07:09.635537+00	yscllr4rk4qt	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	174	5hfkwchoguc2	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-10 23:07:09.648481+00	2025-10-11 00:05:22.759609+00	m3p5fn3mj6i7	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	175	qb5b75e7njqh	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 00:05:22.766965+00	2025-10-11 01:03:28.569467+00	5hfkwchoguc2	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	176	nlxzvjtn3lb6	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 01:03:28.582598+00	2025-10-11 02:02:03.427231+00	qb5b75e7njqh	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	177	ryz6fwqmr6u4	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 02:02:03.443599+00	2025-10-11 03:00:27.625072+00	nlxzvjtn3lb6	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	178	fumag2zmvhf2	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 03:00:27.649859+00	2025-10-11 04:37:46.22721+00	ryz6fwqmr6u4	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	179	svovgwtxlwih	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 04:37:46.238774+00	2025-10-11 05:37:13.038992+00	fumag2zmvhf2	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	180	n5snmtqrmfma	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 05:37:13.059634+00	2025-10-11 06:35:47.670066+00	svovgwtxlwih	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	131	vgw5at5kjalg	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-04 15:22:15.430125+00	2025-10-13 05:15:02.138292+00	ih76yef67kjr	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	317	w75ok2lxrc24	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-28 15:23:39.476581+00	2025-10-28 15:23:39.476581+00	\N	68cc154f-4a51-4adc-9cec-48ba373d549e
00000000-0000-0000-0000-000000000000	181	6yqol2vr5nu7	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 06:35:47.684706+00	2025-10-11 07:33:53.68118+00	n5snmtqrmfma	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	213	tdsi3wqlpx5b	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-14 12:39:02.240121+00	2025-10-17 04:17:16.795008+00	zityscwfsqb7	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	182	ea5j5y57m5uo	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 07:33:53.710351+00	2025-10-11 08:32:00.392968+00	6yqol2vr5nu7	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	183	7pdqx2ozs23b	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 08:32:00.416111+00	2025-10-11 09:31:41.825081+00	ea5j5y57m5uo	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	184	ikq4iw5zbeyc	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 09:31:41.83743+00	2025-10-11 15:53:01.432045+00	7pdqx2ozs23b	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	185	76douj5wbn3v	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-11 15:53:01.456318+00	2025-10-12 01:43:07.765447+00	ikq4iw5zbeyc	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	188	7fffrxljvike	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-12 02:38:52.183913+00	2025-10-12 02:38:52.183913+00	\N	61d1a110-6005-4a30-80cf-59f5a0a73ef2
00000000-0000-0000-0000-000000000000	187	qpivoa5zogcz	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-12 02:37:13.77495+00	2025-10-12 03:52:52.816488+00	\N	4b4428b6-afff-4189-b3ae-09e03afcc1e5
00000000-0000-0000-0000-000000000000	189	utyjqeupge5y	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-12 03:52:52.840757+00	2025-10-12 23:54:18.739492+00	qpivoa5zogcz	4b4428b6-afff-4189-b3ae-09e03afcc1e5
00000000-0000-0000-0000-000000000000	191	75pr54zebnpf	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-13 02:26:39.818139+00	2025-10-13 02:26:39.818139+00	bot5urs62vka	f463df6a-2b93-4207-9552-9f7c55746da2
00000000-0000-0000-0000-000000000000	186	qdjkehzxejd6	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-12 01:43:07.792136+00	2025-10-13 02:27:33.757616+00	76douj5wbn3v	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	190	egznktcf3cyr	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-12 23:54:18.748178+00	2025-10-13 02:28:04.508843+00	utyjqeupge5y	4b4428b6-afff-4189-b3ae-09e03afcc1e5
00000000-0000-0000-0000-000000000000	193	2v5jxx3zg3uh	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-13 02:28:04.511224+00	2025-10-13 02:28:04.511224+00	egznktcf3cyr	4b4428b6-afff-4189-b3ae-09e03afcc1e5
00000000-0000-0000-0000-000000000000	194	me3mw5hity7s	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 02:34:37.572905+00	2025-10-13 03:32:44.220218+00	\N	ec81de4b-5e19-479c-a7c3-3bf2984c2436
00000000-0000-0000-0000-000000000000	195	crnpkzxo5nyi	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 03:32:44.247502+00	2025-10-13 04:38:41.792744+00	me3mw5hity7s	ec81de4b-5e19-479c-a7c3-3bf2984c2436
00000000-0000-0000-0000-000000000000	196	4pwbm3ovg5rq	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-13 04:38:41.804395+00	2025-10-13 04:38:41.804395+00	crnpkzxo5nyi	ec81de4b-5e19-479c-a7c3-3bf2984c2436
00000000-0000-0000-0000-000000000000	197	e2a3zxousodq	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 05:15:02.157062+00	2025-10-13 06:22:33.20177+00	vgw5at5kjalg	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	198	35ahmbr7pac2	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 06:22:33.23501+00	2025-10-13 08:00:29.830104+00	e2a3zxousodq	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	199	y2hfbpzkf7cu	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 08:00:29.855377+00	2025-10-13 15:42:08.98403+00	35ahmbr7pac2	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	200	i4halmpkjkdn	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 15:42:09.013591+00	2025-10-13 17:40:12.50166+00	y2hfbpzkf7cu	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	201	bui35z73nrgy	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 17:40:12.518131+00	2025-10-13 19:13:49.86609+00	i4halmpkjkdn	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	192	suzhhqxmnxuy	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 02:27:33.757969+00	2025-10-13 20:42:31.135983+00	qdjkehzxejd6	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	203	oqrqneg4svxv	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 20:42:31.148625+00	2025-10-13 21:40:35.536409+00	suzhhqxmnxuy	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	205	defo5xscfafm	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-13 22:10:29.356869+00	2025-10-13 22:10:29.356869+00	\N	506abe54-5d94-4870-8103-6dc2255b1580
00000000-0000-0000-0000-000000000000	204	jtcymulnmdg4	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 21:40:35.546311+00	2025-10-13 23:25:23.601409+00	oqrqneg4svxv	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	207	54ikmssuzjwc	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-13 23:46:09.866037+00	2025-10-13 23:46:09.866037+00	\N	c63c5bc3-1a1c-4f21-9597-cf0993056162
00000000-0000-0000-0000-000000000000	208	xo6h645njppz	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-14 00:11:31.307692+00	2025-10-14 01:11:05.712423+00	\N	aa2b703a-99a4-43dc-9cef-8df697e0c476
00000000-0000-0000-0000-000000000000	209	th4345zzdsyt	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-14 01:11:05.729501+00	2025-10-14 01:11:05.729501+00	xo6h645njppz	aa2b703a-99a4-43dc-9cef-8df697e0c476
00000000-0000-0000-0000-000000000000	211	mwgeesmzcxtu	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-14 01:49:07.850996+00	2025-10-14 01:49:07.850996+00	\N	7150ad16-18b1-42a9-b991-7674f65e164a
00000000-0000-0000-0000-000000000000	210	ghyo2c5ln44h	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-14 01:40:33.106169+00	2025-10-14 02:40:07.936956+00	\N	6c495dd4-6f0e-452c-858d-e9d954c6eea5
00000000-0000-0000-0000-000000000000	212	qhtvnz2i2svj	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-14 02:40:07.962007+00	2025-10-14 02:40:07.962007+00	ghyo2c5ln44h	6c495dd4-6f0e-452c-858d-e9d954c6eea5
00000000-0000-0000-0000-000000000000	206	zityscwfsqb7	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 23:25:23.627662+00	2025-10-14 12:39:02.222572+00	jtcymulnmdg4	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	202	tgvysy3hk5aj	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-13 19:13:49.877673+00	2025-10-14 12:39:44.880507+00	bui35z73nrgy	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	214	vdpw2hjic36w	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-14 12:39:44.880887+00	2025-10-14 12:39:44.880887+00	tgvysy3hk5aj	fdd43403-d9b5-4399-968a-10aa1d3184b6
00000000-0000-0000-0000-000000000000	215	t6tduzbnhfec	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-14 12:46:19.772374+00	2025-10-14 13:45:49.576015+00	\N	f30bd3f4-4bbd-4be3-a7fb-1af20cd20ecc
00000000-0000-0000-0000-000000000000	216	63a6cv6urk3j	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-14 13:45:49.600002+00	2025-10-14 13:45:49.600002+00	t6tduzbnhfec	f30bd3f4-4bbd-4be3-a7fb-1af20cd20ecc
00000000-0000-0000-0000-000000000000	217	jpe3qwgcigm6	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-14 14:10:42.54759+00	2025-10-14 14:10:42.54759+00	\N	7483941a-c4c9-445c-9cae-206faee6ce21
00000000-0000-0000-0000-000000000000	218	vvn3tglwcyi4	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-14 16:39:12.833186+00	2025-10-14 17:38:52.820096+00	\N	8058a030-9a87-4d95-b94c-cfc5f0db7231
00000000-0000-0000-0000-000000000000	219	fde3f5ih4def	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-14 17:38:52.841618+00	2025-10-14 18:38:27.174555+00	vvn3tglwcyi4	8058a030-9a87-4d95-b94c-cfc5f0db7231
00000000-0000-0000-0000-000000000000	220	h5kvurjenxc5	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-14 18:38:27.187654+00	2025-10-14 18:38:27.187654+00	fde3f5ih4def	8058a030-9a87-4d95-b94c-cfc5f0db7231
00000000-0000-0000-0000-000000000000	222	m4okrdiwjv2c	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-14 22:53:47.989217+00	2025-10-14 23:53:21.972587+00	\N	e8bb7511-2f9f-4854-ab05-f713515628c1
00000000-0000-0000-0000-000000000000	223	kjmn4sgiz237	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-14 23:53:21.987623+00	2025-10-15 00:53:01.887031+00	m4okrdiwjv2c	e8bb7511-2f9f-4854-ab05-f713515628c1
00000000-0000-0000-0000-000000000000	224	qivr35q7aytx	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 00:53:01.894866+00	2025-10-15 01:52:32.069848+00	kjmn4sgiz237	e8bb7511-2f9f-4854-ab05-f713515628c1
00000000-0000-0000-0000-000000000000	225	wepukzlwonzq	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-15 01:52:32.082745+00	2025-10-15 01:52:32.082745+00	qivr35q7aytx	e8bb7511-2f9f-4854-ab05-f713515628c1
00000000-0000-0000-0000-000000000000	221	jxwkrt25clli	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-14 22:52:40.753295+00	2025-10-15 01:57:00.113755+00	\N	3a86289c-08d3-439c-a7fb-f90cd585bb5b
00000000-0000-0000-0000-000000000000	226	soprmy7x7x3e	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 01:57:00.117622+00	2025-10-15 02:59:01.264258+00	jxwkrt25clli	3a86289c-08d3-439c-a7fb-f90cd585bb5b
00000000-0000-0000-0000-000000000000	227	5yaoekazv4wx	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 02:59:01.280837+00	2025-10-15 04:02:26.284537+00	soprmy7x7x3e	3a86289c-08d3-439c-a7fb-f90cd585bb5b
00000000-0000-0000-0000-000000000000	228	hltdbjeydio3	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 04:02:26.302536+00	2025-10-15 05:02:54.935378+00	5yaoekazv4wx	3a86289c-08d3-439c-a7fb-f90cd585bb5b
00000000-0000-0000-0000-000000000000	229	kbaozquwbh3w	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 05:02:54.953879+00	2025-10-15 06:02:22.37492+00	hltdbjeydio3	3a86289c-08d3-439c-a7fb-f90cd585bb5b
00000000-0000-0000-0000-000000000000	230	lb5vnsmd7o4g	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 06:02:22.38874+00	2025-10-15 07:01:45.871107+00	kbaozquwbh3w	3a86289c-08d3-439c-a7fb-f90cd585bb5b
00000000-0000-0000-0000-000000000000	231	kejmsup6z4q2	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 07:01:45.896744+00	2025-10-15 08:04:28.722647+00	lb5vnsmd7o4g	3a86289c-08d3-439c-a7fb-f90cd585bb5b
00000000-0000-0000-0000-000000000000	232	s3kcwnfdhruw	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-15 08:04:28.739502+00	2025-10-15 08:04:28.739502+00	kejmsup6z4q2	3a86289c-08d3-439c-a7fb-f90cd585bb5b
00000000-0000-0000-0000-000000000000	242	sl5z7gcr2no2	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 20:45:56.96832+00	2025-10-15 22:31:49.327431+00	5ghfmjywpo3x	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	233	wqos22lrg6bk	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 09:01:44.63094+00	2025-10-15 11:50:15.596321+00	\N	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	244	lzzgl4v727oz	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 00:25:53.013012+00	2025-10-16 01:29:32.256342+00	k2d4t37ytgek	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	234	l3bwmxagqepb	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 11:50:15.624127+00	2025-10-15 12:57:36.528173+00	wqos22lrg6bk	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	235	vueqwipeebz3	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 12:57:36.541367+00	2025-10-15 14:00:08.749674+00	l3bwmxagqepb	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	245	bh6fqgdsvlzk	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 01:29:32.274103+00	2025-10-16 02:41:57.619819+00	lzzgl4v727oz	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	236	prqiswowzqha	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 14:00:08.761393+00	2025-10-15 15:04:27.306269+00	vueqwipeebz3	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	237	2x2wkugplgh4	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 15:04:27.312734+00	2025-10-15 16:03:50.570868+00	prqiswowzqha	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	246	4wfzlhztbje4	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 02:41:57.636261+00	2025-10-16 04:01:12.489704+00	bh6fqgdsvlzk	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	238	nnxbahjzwulg	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 16:03:50.584736+00	2025-10-15 17:04:52.238415+00	2x2wkugplgh4	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	239	uifaqvtbniej	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 17:04:52.260378+00	2025-10-15 18:22:55.214826+00	nnxbahjzwulg	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	247	3cltnpumqvtn	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 04:01:12.515139+00	2025-10-16 15:47:32.452803+00	4wfzlhztbje4	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	240	tl4lv56haq4f	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 18:22:55.244385+00	2025-10-15 19:46:30.640973+00	uifaqvtbniej	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	241	5ghfmjywpo3x	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-15 19:46:30.668735+00	2025-10-15 20:45:56.94641+00	tl4lv56haq4f	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	248	5p4htnb7d5ku	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 15:47:32.481957+00	2025-10-16 17:09:32.133134+00	3cltnpumqvtn	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	249	glwusq2m7nor	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 17:09:32.159686+00	2025-10-16 18:10:27.88741+00	5p4htnb7d5ku	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	250	4tmckm3akkmx	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 17:20:08.102273+00	2025-10-16 18:19:37.296767+00	\N	fde6cd48-cb49-44d8-8035-ea6751da964e
00000000-0000-0000-0000-000000000000	251	y2tcq2wedfxx	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 18:10:27.918414+00	2025-10-16 19:13:28.407313+00	glwusq2m7nor	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	252	6yimimapj6dk	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 18:19:37.301671+00	2025-10-16 19:18:36.723959+00	4tmckm3akkmx	fde6cd48-cb49-44d8-8035-ea6751da964e
00000000-0000-0000-0000-000000000000	253	75pzmvtp2oib	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 19:13:28.435207+00	2025-10-16 20:12:52.525736+00	y2tcq2wedfxx	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	254	enkfxt2ka2hu	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 19:18:36.725982+00	2025-10-16 20:17:36.779611+00	6yimimapj6dk	fde6cd48-cb49-44d8-8035-ea6751da964e
00000000-0000-0000-0000-000000000000	255	w5uqnuensfvh	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 20:12:52.552108+00	2025-10-16 21:12:12.302754+00	75pzmvtp2oib	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	256	cvsjouxgoz22	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 20:17:36.782207+00	2025-10-16 21:16:37.255184+00	enkfxt2ka2hu	fde6cd48-cb49-44d8-8035-ea6751da964e
00000000-0000-0000-0000-000000000000	257	ziqlni2oddcr	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 21:12:12.323879+00	2025-10-16 22:11:33.084118+00	w5uqnuensfvh	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	259	nwb4i5ut365t	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 22:11:33.126358+00	2025-10-16 23:14:34.761024+00	ziqlni2oddcr	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	260	7kmzf6nebaen	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 23:14:34.788411+00	2025-10-17 00:14:00.983154+00	nwb4i5ut365t	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	261	tcnbatovyxqx	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-17 00:14:01.00826+00	2025-10-17 01:13:25.582793+00	7kmzf6nebaen	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	262	klvuvofjot3s	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-17 01:13:25.591396+00	2025-10-17 01:13:25.591396+00	tcnbatovyxqx	afc6e332-043c-4d15-9ec9-32a1b493e80d
00000000-0000-0000-0000-000000000000	263	cxl5lffttd3u	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-17 01:34:13.429122+00	2025-10-17 01:34:13.429122+00	\N	556ed0c4-d801-4368-86fe-4fce6d53dd64
00000000-0000-0000-0000-000000000000	264	r5x7xfguzpnn	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-17 01:35:35.377344+00	2025-10-17 01:35:35.377344+00	\N	dcce31eb-1112-4c9d-9bb5-406e5cbf0994
00000000-0000-0000-0000-000000000000	268	nlncljrjvvu2	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-17 04:17:16.809712+00	2025-10-17 05:25:41.901317+00	tdsi3wqlpx5b	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	270	ndfexoq7vjpn	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-17 05:25:41.913863+00	2025-10-17 14:14:03.619946+00	nlncljrjvvu2	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	273	fsjfjcdxfuq2	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-17 14:14:03.632896+00	2025-10-17 14:14:03.632896+00	ndfexoq7vjpn	a505bb60-ffe2-4f16-873c-1c509d9d5071
00000000-0000-0000-0000-000000000000	258	h77hatgauxmh	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-16 21:16:37.257953+00	2025-10-17 14:17:15.082944+00	cvsjouxgoz22	fde6cd48-cb49-44d8-8035-ea6751da964e
00000000-0000-0000-0000-000000000000	274	pqu37gikwxb7	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-17 14:17:15.093007+00	2025-10-17 14:17:15.093007+00	h77hatgauxmh	fde6cd48-cb49-44d8-8035-ea6751da964e
00000000-0000-0000-0000-000000000000	276	spr6t7unehve	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-19 20:12:17.446788+00	2025-10-19 21:11:12.429151+00	\N	0c4a0348-72e4-4c61-ace8-715d6ad26174
00000000-0000-0000-0000-000000000000	277	o5d2t74xvdux	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-19 21:11:12.455301+00	2025-10-19 23:04:27.604186+00	spr6t7unehve	0c4a0348-72e4-4c61-ace8-715d6ad26174
00000000-0000-0000-0000-000000000000	278	x3ejwhlp2etn	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-19 23:04:27.62884+00	2025-10-20 00:18:07.692468+00	o5d2t74xvdux	0c4a0348-72e4-4c61-ace8-715d6ad26174
00000000-0000-0000-0000-000000000000	280	sbvo43o4md5l	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-20 00:18:07.708851+00	2025-10-20 03:13:30.055844+00	x3ejwhlp2etn	0c4a0348-72e4-4c61-ace8-715d6ad26174
00000000-0000-0000-0000-000000000000	281	kkxeidpxbtgw	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-20 03:13:30.071864+00	2025-10-20 10:47:00.088732+00	sbvo43o4md5l	0c4a0348-72e4-4c61-ace8-715d6ad26174
00000000-0000-0000-0000-000000000000	282	r6lgetphgp3j	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-20 10:47:00.120121+00	2025-10-20 10:47:00.120121+00	kkxeidpxbtgw	0c4a0348-72e4-4c61-ace8-715d6ad26174
00000000-0000-0000-0000-000000000000	294	2wyr6dvftcuu	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-26 18:23:43.417785+00	2025-10-26 19:23:17.019596+00	\N	e3ee7436-6fa6-4661-92d3-05b90cac9297
00000000-0000-0000-0000-000000000000	296	ois53dz7vqgf	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-26 19:23:17.042459+00	2025-10-26 20:22:51.989272+00	2wyr6dvftcuu	e3ee7436-6fa6-4661-92d3-05b90cac9297
00000000-0000-0000-0000-000000000000	297	73d22fvwbd4x	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-26 20:22:52.013267+00	2025-10-26 20:22:52.013267+00	ois53dz7vqgf	e3ee7436-6fa6-4661-92d3-05b90cac9297
00000000-0000-0000-0000-000000000000	306	6slkif4qjdz2	0cede974-5348-4ec7-93d7-5991f64d7913	t	2025-10-27 14:00:11.91553+00	2025-10-27 14:59:46.638225+00	\N	c7ae1d3d-45de-4d7f-8f52-17e22cef5135
00000000-0000-0000-0000-000000000000	308	ncuvp75fjlpt	0cede974-5348-4ec7-93d7-5991f64d7913	f	2025-10-27 14:59:46.643988+00	2025-10-27 14:59:46.643988+00	6slkif4qjdz2	c7ae1d3d-45de-4d7f-8f52-17e22cef5135
00000000-0000-0000-0000-000000000000	311	2g56647bz7un	b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae	f	2025-10-27 20:35:45.689674+00	2025-10-27 20:35:45.689674+00	\N	e8c83d0a-41df-481f-bc02-4cad82ebfa14
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
20250717082212
20250731150234
20250804100000
20250901200500
20250903112500
20250904133000
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag, oauth_client_id) FROM stdin;
fdd43403-d9b5-4399-968a-10aa1d3184b6	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-01 22:32:53.407268+00	2025-10-14 12:39:44.882727+00	\N	aal1	\N	2025-10-14 12:39:44.882646	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
61d1a110-6005-4a30-80cf-59f5a0a73ef2	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-12 02:38:52.181505+00	2025-10-12 02:38:52.181505+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
f30bd3f4-4bbd-4be3-a7fb-1af20cd20ecc	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-14 12:46:19.748518+00	2025-10-14 13:45:49.630501+00	\N	aal1	\N	2025-10-14 13:45:49.630408	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Mobile Safari/537.36	179.221.151.145	\N	\N
7483941a-c4c9-445c-9cae-206faee6ce21	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-14 14:10:42.519995+00	2025-10-14 14:10:42.519995+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Mobile Safari/537.36	179.221.151.145	\N	\N
f463df6a-2b93-4207-9552-9f7c55746da2	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-02 20:27:48.644325+00	2025-10-13 02:26:39.851847+00	\N	aal1	\N	2025-10-13 02:26:39.850565	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
4b4428b6-afff-4189-b3ae-09e03afcc1e5	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-12 02:37:13.759136+00	2025-10-13 02:28:04.515076+00	\N	aal1	\N	2025-10-13 02:28:04.514355	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
8058a030-9a87-4d95-b94c-cfc5f0db7231	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-14 16:39:12.796681+00	2025-10-14 18:38:27.200994+00	\N	aal1	\N	2025-10-14 18:38:27.200342	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Mobile Safari/537.36	179.221.151.145	\N	\N
ec81de4b-5e19-479c-a7c3-3bf2984c2436	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-13 02:34:37.56236+00	2025-10-13 04:38:41.82106+00	\N	aal1	\N	2025-10-13 04:38:41.819888	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
04071684-9c5d-4a4f-820c-d3226d69fa16	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-01 22:31:58.444299+00	2025-10-07 04:34:48.993793+00	\N	aal1	\N	2025-10-07 04:34:48.993721	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36	179.221.151.145	\N	\N
08762f21-a879-41ce-8ed9-c8a1a3938a46	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-02 22:27:52.23019+00	2025-10-07 05:57:33.507873+00	\N	aal1	\N	2025-10-07 05:57:33.507131	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36	179.221.151.145	\N	\N
afc6e332-043c-4d15-9ec9-32a1b493e80d	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-15 09:01:44.594964+00	2025-10-17 01:13:25.605612+00	\N	aal1	\N	2025-10-17 01:13:25.60492	Dart/3.9 (dart:io)	179.221.151.145	\N	\N
e8bb7511-2f9f-4854-ab05-f713515628c1	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-14 22:53:47.987074+00	2025-10-15 01:52:32.101682+00	\N	aal1	\N	2025-10-15 01:52:32.101596	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
556ed0c4-d801-4368-86fe-4fce6d53dd64	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-17 01:34:13.395074+00	2025-10-17 01:34:13.395074+00	\N	aal1	\N	\N	Dart/3.9 (dart:io)	179.221.151.145	\N	\N
dcce31eb-1112-4c9d-9bb5-406e5cbf0994	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-17 01:35:35.375341+00	2025-10-17 01:35:35.375341+00	\N	aal1	\N	\N	Dart/3.9 (dart:io)	179.221.151.145	\N	\N
e3ee7436-6fa6-4661-92d3-05b90cac9297	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-26 18:23:43.399927+00	2025-10-26 20:22:52.04187+00	\N	aal1	\N	2025-10-26 20:22:52.041194	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Mobile Safari/537.36	191.249.83.199	\N	\N
506abe54-5d94-4870-8103-6dc2255b1580	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-13 22:10:29.333053+00	2025-10-13 22:10:29.333053+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
0c4a0348-72e4-4c61-ace8-715d6ad26174	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-19 20:12:17.437086+00	2025-10-20 10:47:00.163508+00	\N	aal1	\N	2025-10-20 10:47:00.163424	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
c63c5bc3-1a1c-4f21-9597-cf0993056162	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-13 23:46:09.845972+00	2025-10-13 23:46:09.845972+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
aa2b703a-99a4-43dc-9cef-8df697e0c476	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-14 00:11:31.287241+00	2025-10-14 01:11:05.758564+00	\N	aal1	\N	2025-10-14 01:11:05.757913	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
7150ad16-18b1-42a9-b991-7674f65e164a	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-14 01:49:07.838152+00	2025-10-14 01:49:07.838152+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
6c495dd4-6f0e-452c-858d-e9d954c6eea5	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-14 01:40:33.083341+00	2025-10-14 02:40:07.987571+00	\N	aal1	\N	2025-10-14 02:40:07.986849	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Mobile Safari/537.36	179.221.151.145	\N	\N
e8c83d0a-41df-481f-bc02-4cad82ebfa14	b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae	2025-10-27 20:35:45.665415+00	2025-10-27 20:35:45.665415+00	\N	aal1	\N	\N	Dart/3.9 (dart:io)	186.249.157.119	\N	\N
3a86289c-08d3-439c-a7fb-f90cd585bb5b	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-14 22:52:40.727229+00	2025-10-15 08:04:28.77035+00	\N	aal1	\N	2025-10-15 08:04:28.769588	Dart/3.9 (dart:io)	152.255.97.178	\N	\N
a505bb60-ffe2-4f16-873c-1c509d9d5071	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-10 20:12:59.301335+00	2025-10-17 14:14:03.657516+00	\N	aal1	\N	2025-10-17 14:14:03.656268	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
fde6cd48-cb49-44d8-8035-ea6751da964e	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-16 17:20:08.068074+00	2025-10-17 14:17:15.105799+00	\N	aal1	\N	2025-10-17 14:17:15.105722	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36	179.221.151.145	\N	\N
68cc154f-4a51-4adc-9cec-48ba373d549e	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-28 15:23:39.445527+00	2025-10-28 15:23:39.445527+00	\N	aal1	\N	\N	Dart/3.9 (dart:io)	191.249.83.199	\N	\N
c7ae1d3d-45de-4d7f-8f52-17e22cef5135	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-27 14:00:11.897907+00	2025-10-27 14:59:46.652774+00	\N	aal1	\N	2025-10-27 14:59:46.652689	Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Mobile Safari/537.36	191.249.83.199	\N	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at, disabled) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae	authenticated	authenticated	andreri.up@gmail.com	$2a$10$rteB13c11vdqMQ.5.pmP5O7XBjWWVpGnMziXH6YW1R7ud/oyHdfwG	2025-10-27 20:35:45.646711+00	\N		\N		\N			\N	2025-10-27 20:35:45.664105+00	{"provider": "email", "providers": ["email"]}	{"sub": "b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae", "email": "andreri.up@gmail.com", "email_verified": true, "phone_verified": false}	\N	2025-10-27 20:35:45.446543+00	2025-10-27 20:35:45.714736+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	0cede974-5348-4ec7-93d7-5991f64d7913	authenticated	authenticated	jeslleypires@gmail.com	$2a$10$BwY9UjdzE7UOHAd/PSeWxOkbu18dx1zJJ56N9R9H9l33LKvgiUkCS	2025-09-10 02:14:25.518345+00	\N		\N		\N			\N	2025-10-28 15:23:39.444851+00	{"provider": "email", "providers": ["email"]}	{"sub": "0cede974-5348-4ec7-93d7-5991f64d7913", "email": "jeslleypires@gmail.com", "display_name": "Jeslley Pires", "email_verified": true, "phone_verified": false}	\N	2025-09-10 02:14:25.497069+00	2025-10-28 15:23:39.511257+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: accounts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.accounts (id, name, description, account_type, bank_name, account_number, agency, initial_balance, current_balance, is_active, created_at, updated_at, tenant_id) FROM stdin;
99b91a93-213a-43c9-9402-2f4b360f5371	Caixa Principal	\N	cash	\N	\N	\N	0.00	0.00	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: api_keys; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.api_keys (id, tenant_id, service_name, api_key, is_active, created_at, updated_at) FROM stdin;
5f511216-d7b3-4816-8c19-6f273a1f10df	\N	google_maps	AIzaSyApxnuvtzMa-stsoB3SF0XAiYsBNowFfJo	t	2025-10-26 17:37:25.172391+00	2025-10-26 17:37:25.172391+00
\.


--
-- Data for Name: banners; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.banners (id, created_at, updated_at, title_pt, description_pt, image_url, date_initial, date_end, redirect_url, status, sub_title_pt, text_buttom_pt, tag_id, title_en, sub_title_en, description_en, text_buttom_en, title_es, sub_title_es, description_es, text_buttom_es, tenant_id, location, color_one, color_two, color) FROM stdin;
044c8f17-09e4-4859-8a0e-1d4cee8c0bf6	2025-09-20 08:42:14.00258+00	2025-10-05 20:13:42.530886+00	Frete Grátis	Compre agora e receba em casa sem pagar frete!	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758136483055.jpeg	2024-01-01 00:00:00+00	2025-12-31 23:59:59+00	/produtos	active	Para todo o Brasil	Comprar Agora	441f3ed2-c6be-438b-b1e1-9982f11068d1	Frete Grátis	Para todo o Brasil	Compre agora e receba em casa sem pagar frete!	Comprar Agora	Frete Grátis	Para todo o Brasil	Compre agora e receba em casa sem pagar frete!	Comprar Agora	32aac50b-6385-4722-9471-4276036ac600	home_four	\N	\N	f
0697d958-d669-4feb-913b-bf7573851ae2	2025-09-20 08:42:14.00258+00	2025-10-05 20:13:42.530886+00	Black Friday 2024	Aproveite as melhores ofertas da Black Friday com frete grátis para todo o Brasil!	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758136483055.jpeg	2024-01-01 00:00:00+00	2025-12-31 23:59:59+00	/produtos?promocao=black-friday	active	Até 70% OFF	Aproveitar Ofertas	97ab6635-b240-4c3c-ad1e-1201c6f60f7c	Black Friday 2024	Até 70% OFF	Aproveite as melhores ofertas da Black Friday com frete grátis para todo o Brasil!	Aproveitar Ofertas	Black Friday 2024	Até 70% OFF	Aproveite as melhores ofertas da Black Friday com frete grátis para todo o Brasil!	Aproveitar Ofertas	32aac50b-6385-4722-9471-4276036ac600	home_three	\N	\N	f
d4ad33ff-0ab5-417a-82d8-f533487c9e93	2025-09-20 08:42:14.00258+00	2025-10-05 20:13:42.530886+00	Novos Produtos	Conheça nossa nova linha de produtos com tecnologia de ponta.	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758136483055.jpeg	2024-01-01 00:00:00+00	2025-12-31 23:59:59+00	/produtos?novidade=true	active	Chegaram na loja	Ver Produtos	6d91b8a1-16f2-456d-9612-6ca82392424b	Novos Produtos	Chegaram na loja	Conheça nossa nova linha de produtos com tecnologia de ponta.	Ver Produtos	Novos Produtos	Chegaram na loja	Conheça nossa nova linha de produtos com tecnologia de ponta.	Ver Produtos	32aac50b-6385-4722-9471-4276036ac600	home_three	\N	\N	f
\.


--
-- Data for Name: brands; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.brands (id, name, description, is_active, sankhya_code, created_at, updated_at, sort_order, logo_url, website_url, country, tenant_id) FROM stdin;
3dc7dae0-fbf7-45c6-b18c-8c5b59bc8afb	Exemplo	Marca de exemplo	t	\N	2025-09-18 12:21:16.866041+00	2025-10-06 21:12:51.913012+00	0	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
650e8400-e29b-41d4-a716-446655440001	Samsung	\N	t	\N	2025-09-18 12:34:15.999675+00	2025-10-06 21:12:51.913012+00	0	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
650e8400-e29b-41d4-a716-446655440002	Apple	\N	t	\N	2025-09-18 12:34:15.999675+00	2025-10-06 21:12:51.913012+00	0	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
650e8400-e29b-41d4-a716-446655440003	Nike	\N	t	\N	2025-09-18 12:34:15.999675+00	2025-10-06 21:12:51.913012+00	0	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
815482c4-ef36-4852-8ee5-2a62e834d0a4	Firestone	Marca de pneus premium	t	\N	2025-09-20 00:58:41.127127+00	2025-10-06 21:12:51.913012+00	1	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
41529029-1f25-4c01-ba16-58745a8687d2	Mann-Filter	Filtros de alta qualidade	t	\N	2025-09-20 00:58:41.127127+00	2025-10-06 21:12:51.913012+00	3	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
668bac8e-5e32-4ab3-93a2-28ca02e6c18c	TRW	Sistemas de freio e segurança	t	\N	2025-09-20 00:58:41.127127+00	2025-10-06 21:12:51.913012+00	4	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
4bdd2c7a-457a-4dab-bdd4-aeec273852fd	Varta	Baterias automotivas	t	\N	2025-09-20 00:58:41.127127+00	2025-10-06 21:12:51.913012+00	5	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
ff135800-1de3-4e84-8ce4-79a6e2d02234	Mobil	Óleos e lubrificantes de qualidade	t	\N	2025-09-20 00:58:41.127127+00	2025-10-06 21:12:51.913012+00	2	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
19abe545-e4ed-48b5-9778-e99e64cfab95	Bilstein	Sistemas de suspensão	t	\N	2025-09-20 00:58:41.127127+00	2025-10-06 21:12:51.913012+00	6	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
57a392c3-665c-4ae5-9181-a3ea7e17bd69	ALAE	Marca própria da ALAE	t	\N	2025-09-18 12:21:16.866041+00	2025-10-06 21:12:51.913012+00	0	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758136483055.jpeg			32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: business_settings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.business_settings (id, tenant_id, delivery_time_min, delivery_time_max, minimum_order_value, business_type, created_at, updated_at, terms_use, privacy_policy, return_policy) FROM stdin;
c24fef20-9cc7-49ee-a096-213941efe2c3	32aac50b-6385-4722-9471-4276036ac600	30	45	25.00	delivery	2025-10-10 22:04:42.351858+00	2025-10-10 22:04:42.351858+00	\N	\N	\N
\.


--
-- Data for Name: business_types; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.business_types (id, code, name_pt, name_en, name_es, description_pt, description_en, description_es, icon, color, features, is_active, sort_order, created_at, updated_at) FROM stdin;
b2dc68b7-e2eb-43a6-af91-865a573f58db	mixed	Negócio Misto	Mixed Business	Negocio Mixto	Combinação de múltiplos tipos de negócio	Combination of multiple business types	Combinación de múltiples tipos de negocio	layers	#f59e0b	["all_features"]	\N	6	\N	\N
e624bb9d-be1b-4a45-9f26-c87feb25687c	academy	Academias & Cursos	Academies & Courses	Academias y Cursos	Academias, cursos e treinamentos	Academies, courses and training	Academias, cursos y entrenamientos	graduation-cap	#06b6d4	["classes", "instructors", "schedules", "students", "payments", "certificates"]	\N	7	\N	\N
8b0e5099-06a7-4351-9d3a-cc9cb53d3bf2	clinic	Clínicas & Consultórios	Clinics & Offices	Clínicas y Consultorios	Clínicas médicas, consultórios e serviços de saúde	Medical clinics, offices and health services	Clínicas médicas, consultorios y servicios de salud	stethoscope	#84cc16	["appointments", "patients", "doctors", "medical_records", "prescriptions", "billing"]	\N	8	\N	\N
6991bd13-0fd8-4fb1-823a-c0e3959d73db	beauty	Salões & Estética	Salons & Aesthetics	Salones y Estética	Salões de beleza, estética e bem-estar	Beauty salons, aesthetics and wellness	Salones de belleza, estética y bienestar	scissors	#f97316	["appointments", "services", "stylists", "products", "treatments", "schedules"]	\N	9	\N	\N
82e6934c-a514-4d6b-9298-af70ec4196d7	gym	Academias & Fitness	Gyms & Fitness	Gimnasios y Fitness	Academias de ginástica, crossfit e fitness	Gyms, crossfit and fitness centers	Gimnasios, crossfit y centros de fitness	dumbbell	#ef4444	["classes", "trainers", "schedules", "memberships", "equipment", "workouts"]	\N	10	\N	\N
81726908-7075-45c2-a321-0c90d826c6fe	delivery	Delivery & Restaurantes	Delivery & Restaurants	Delivery y Restaurantes	Restaurantes, lanchonetes e estabelecimentos de delivery	Restaurants, fast food and delivery establishments	Restaurantes, comida rápida y establecimientos de delivery	truck	#ef4444	["menu", "modifiers", "kitchen", "delivery_time", "rating", "minimum_order"]	t	1	\N	2025-10-06 14:57:17.005
d0b647d0-7a8a-40dd-93dc-118cb17606be	ecommerce	E-commerce & Lojas	E-commerce & Stores	E-commerce y Tiendas	Lojas virtuais e marketplaces online	Online stores and marketplaces	Tiendas virtuales y marketplaces en línea	shopping-bag	#3b82f6	["catalog", "cart", "checkout", "shipping", "inventory", "reviews"]	t	2	\N	2025-10-06 14:57:23.353
c4521382-6b88-407b-88c9-e8830a9b833d	pos	PDV & Balcão	POS & Counter	PDV y Mostrador	Sistema de ponto de venda e vendas presenciais	Point of sale system and in-person sales	Sistema de punto de venta y ventas presenciales	credit-card	#8b5cf6	["cash_register", "receipts", "inventory", "sales", "reports"]	t	3	\N	2025-10-06 14:57:24.354
35c2164d-9477-4a75-8434-6cf2f2804eb7	petshop	Pet Shops & Veterinários	Pet Shops & Veterinarians	Tiendas de Mascotas y Veterinarios	Pet shops, clínicas veterinárias e serviços para pets	Pet shops, veterinary clinics and pet services	Tiendas de mascotas, clínicas veterinarias y servicios para mascotas	heart	#ec4899	["appointments", "services", "providers", "pets", "products", "medical_records"]	t	4	\N	2025-10-06 14:57:26.066
304c4362-90b2-4169-ac24-d62a25a7cfa5	market	Mercados & Supermercados	Markets & Supermarkets	Mercados y Supermercados	Supermercados, mercearias e mercados	Supermarkets, grocery stores and markets	Supermercados, tiendas de comestibles y mercados	store	#22c55e	["inventory", "categories", "pickup", "delivery", "expiry_dates", "suppliers"]	t	5	\N	2025-10-06 14:57:28.768
\.


--
-- Data for Name: cash_register_sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.cash_register_sessions (id, opened_by, closed_by, opening_amount, expected_amount, actual_amount, difference, opened_at, closed_at, notes, is_closed, created_at, updated_at) FROM stdin;
f25b8030-4162-4d59-b6fb-65e410090546	0cede974-5348-4ec7-93d7-5991f64d7913	\N	100.00	100.00	0.00	0.00	2025-10-04 06:30:54.700207+00	\N	\N	f	2025-10-04 06:30:54.700207+00	2025-10-04 06:30:54.700207+00
\.


--
-- Data for Name: cash_register_transactions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.cash_register_transactions (id, session_id, transaction_type, payment_method, amount, service_session_id, description, created_at) FROM stdin;
\.


--
-- Data for Name: categories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.categories (id, code, name_pt, name_en, name_es, description_pt, description_en, description_es, color, icon, is_active, sort_order, created_at, updated_at, parent_id, category_type, tenant_id) FROM stdin;
bc9b010d-6a6f-4faf-a7a9-1dc6d090a94b	corporate-law	Direito Empresarial	Corporate Law	Derecho Empresarial	Direito comercial e societário	Commercial and corporate law	Derecho comercial y societario	#3B82F6	building	t	1	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
b7501041-22d1-4076-bac6-a9d021dd0c31	tax-law	Direito Tributário	Tax Law	Derecho Tributario	Legislação fiscal e tributária	Tax and fiscal legislation	Legislación fiscal y tributaria	#EF4444	receipt	t	2	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
7ad4252c-8da3-4d9b-ac95-83b937c04244	labor-law	Direito Trabalhista	Labor Law	Derecho Laboral	Direito do trabalho e previdenciário	Labor and social security law	Derecho laboral y de seguridad social	#F59E0B	users	t	3	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
68d2ddc3-eb4f-46cb-a8b8-7b3a172603e5	civil-law	Direito Civil	Civil Law	Derecho Civil	Direito civil e de família	Civil and family law	Derecho civil y de familia	#10B981	scale	t	4	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
bb113040-8c67-4941-92d0-97876a1210d7	criminal-law	Direito Penal	Criminal Law	Derecho Penal	Direito penal e processual penal	Criminal and criminal procedure law	Derecho penal y procesal penal	#DC2626	shield	t	5	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
0811d822-fbc7-43a2-bacf-969cad704b83	administrative-law	Direito Administrativo	Administrative Law	Derecho Administrativo	Direito administrativo e regulatório	Administrative and regulatory law	Derecho administrativo y regulatorio	#8B5CF6	file-text	t	6	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
3da22dc8-0b0d-4868-8cfd-ea5bd3acef72	international-law	Direito Internacional	International Law	Derecho Internacional	Direito internacional e comércio exterior	International law and foreign trade	Derecho internacional y comercio exterior	#06B6D4	globe	t	7	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
92ae7262-8de5-4f9e-8998-7acd6b9703fc	compliance	Compliance	Compliance	Cumplimiento	Conformidade e governança corporativa	Corporate compliance and governance	Cumplimiento y gobernanza corporativa	#84CC16	check-circle	t	8	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
2e65429a-1296-496a-9b44-d545aa13c237	intellectual-property	Propriedade Intelectual	Intellectual Property	Propiedad Intelectual	Propriedade intelectual e industrial	Intellectual and industrial property	Propiedad intelectual e industrial	#F97316	lightbulb	t	9	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
9bb7331a-4358-4ac1-ab74-b5e203728c70	environmental-law	Meio Ambiente	Environment	Medio Ambiente	Direito ambiental e sustentabilidade	Environmental law and sustainability	Derecho ambiental y sostenibilidad	#22C55E	leaf	t	10	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
550e8400-e29b-41d4-a716-446655440001	ELETRONICOS	Eletrônicos	Electronics	Electrónicos	\N	\N	\N	#3B82F6	smartphone	t	1	2025-09-18 12:34:15.999675+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
fa903c10-59d8-469c-a275-b44cc24cdf1e	technology-law	Tecnologia	Technology	Tecnología	Direito digital e tecnologia	Digital and technology law	Derecho digital y tecnología	#6366F1	cpu	t	11	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
cc2f5f8c-1fc4-4513-8027-c4fbbb130fec	other	Outros	Others	Otros	Outras áreas do direito	Other areas of law	Otras áreas del derecho	#6B7280	more-horizontal	t	12	2025-09-17 18:55:49.231504+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
a0195579-a691-4384-b0bd-7763254aaaec	CONSULTORIA	Consultoria Jurídica	Legal Consulting	Consultoría Legal	Serviços de consultoria jurídica	Legal consulting services	Servicios de consultoría legal	#3B82F6	briefcase	t	0	2025-09-18 12:21:16.866041+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
d68a8798-3618-40ae-97cb-9dc2b622235e	DOCUMENTACAO	Documentação	Documentation	Documentación	Serviços de documentação	Documentation services	Servicios de documentación	#10B981	file-text	t	0	2025-09-18 12:21:16.866041+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
550e8400-e29b-41d4-a716-446655440002	ROUPAS	Roupas	Clothing	Ropa	\N	\N	\N	#EF4444	shirt	t	2	2025-09-18 12:34:15.999675+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
550e8400-e29b-41d4-a716-446655440003	CASA	Casa	Home	Hogar	\N	\N	\N	#10B981	home	t	3	2025-09-18 12:34:15.999675+00	2025-10-06 15:44:55.261662+00	\N	ecommerce	32aac50b-6385-4722-9471-4276036ac600
694f7652-f560-461b-b217-1981c1a68f84	ADICIONAIS_DOCE	Adicionais Doce						#3B82F6	Package	t	0	2025-10-02 00:05:46.440965+00	2025-10-06 15:44:55.261662+00	\N	delivery	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: category_printer_mapping; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.category_printer_mapping (id, category_id, printer_station_id, created_at) FROM stdin;
\.


--
-- Data for Name: chat_messages; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.chat_messages (id, created_at, phone, nomewpp, bot_message, user_message, message_type, active) FROM stdin;
1	2025-09-26 16:15:08.352+00	554891171055@s.whatsapp.net	\N	Parece que você enviou uma mensagem curta ou um texto que não está claro. Como posso ajudar você hoje?	Hhh	messages.upsert	t
\.


--
-- Data for Name: chats; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.chats (id, created_at, phone, updated_at) FROM stdin;
1	2025-09-26 16:15:00.014+00	554891171055@s.whatsapp.net	2025-09-26T12:15:00.013-04:00
\.


--
-- Data for Name: company_vehicle_usage; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.company_vehicle_usage (id, company_vehicle_id, delivery_person_id, tenant_id, start_date, end_date, odometer_start, odometer_end, fuel_cost, compensation_amount, notes, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: company_vehicles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.company_vehicles (id, tenant_id, vehicle_type, vehicle_plate, vehicle_model, vehicle_color, vehicle_year, registration_number, registration_expiry, has_insurance, insurance_company, insurance_policy, insurance_expiry, last_maintenance_date, next_maintenance_date, maintenance_notes, odometer_reading, is_active, is_available, current_delivery_person_id, acquisition_cost, acquisition_date, monthly_cost, notes, photos, created_at, updated_at) FROM stdin;
3ad8fc47-5f9a-45aa-844a-6478814f14da	32aac50b-6385-4722-9471-4276036ac600	car	QPV-6663	Prisma	Branco	2018	\N	\N	f	\N	\N	\N	\N	\N	\N	95000	t	t	\N	\N	\N	\N	\N	[]	2025-10-11 09:15:36.832132+00	2025-10-11 09:15:36.832132+00
\.


--
-- Data for Name: countries; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.countries (id, name_pt, name_en, name_es, code, flag_emoji, created_at, updated_at) FROM stdin;
b944f0d9-da51-4649-b8fc-2feedf7ed18d	Brasil	Brazil	Brasil	BR	🇧🇷	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00
02333944-5822-4d4f-aba0-9dc449e7daab	Argentina	Argentina	Argentina	AR	🇦🇷	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00
7352b246-b6bc-431d-b980-55d28f40d97f	Chile	Chile	Chile	CL	🇨🇱	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00
fb92984d-f6f3-471f-a943-91e076ed39eb	Peru	Peru	Perú	PE	🇵🇪	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00
bccd5d2c-4836-4055-af38-fa192858177d	Colômbia	Colombia	Colombia	CO	🇨🇴	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00
3490a024-0289-4d32-ba28-afc408203c32	Uruguai	Uruguay	Uruguay	UY	🇺🇾	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00
a2e4b35a-a56f-40a4-b339-8ebf443688e5	Paraguai	Paraguay	Paraguay	PY	🇵🇾	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00
b1d9aa19-cf7f-4190-b13a-21156147c23f	México	Mexico	México	MX	🇲🇽	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00
\.


--
-- Data for Name: dados_cliente; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.dados_cliente (id, created_at, telefone, nomewpp, atendimento_ia) FROM stdin;
1	2025-09-26 16:14:50.756+00	554891171055@s.whatsapp.net	Jeslley	\N
\.


--
-- Data for Name: delivery_addresses; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_addresses (id, user_id, street, number, complement, neighborhood, city, state, zip_code, latitude, longitude, is_default, is_active, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: delivery_orders; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_orders (id, order_id, delivery_address_id, delivery_zone_id, status, estimated_delivery_time, actual_delivery_time, freight_price, distance_km, delivery_person_name, delivery_person_phone, delivery_notes, customer_notes, shipping_provider_id, shipping_service_id, tracking_code, freight_quote_id, package_weight_kg, package_dimensions, created_at, updated_at, delivery_person_id, assigned_at, picked_up_at, delivered_at) FROM stdin;
\.


--
-- Data for Name: delivery_person_ratings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_person_ratings (id, delivery_order_id, delivery_person_id, user_id, rating, comment, punctuality_rating, professionalism_rating, care_rating, created_at) FROM stdin;
\.


--
-- Data for Name: delivery_person_status_history; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_person_status_history (id, delivery_person_id, previous_status, new_status, reason, changed_by, created_at) FROM stdin;
\.


--
-- Data for Name: delivery_person_transactions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_person_transactions (id, wallet_id, delivery_order_id, type, amount, description, status, created_at, completed_at) FROM stdin;
\.


--
-- Data for Name: delivery_person_vehicles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_person_vehicles (id, delivery_person_id, vehicle_type, vehicle_plate, vehicle_model, vehicle_color, vehicle_year, registration_number, registration_expiry, has_insurance, insurance_company, insurance_policy, insurance_expiry, driver_license, driver_license_category, driver_license_expiry, is_active, is_primary, notes, photos, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: delivery_person_wallet; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_person_wallet (id, delivery_person_id, tenant_id, balance, pending_balance, total_earned, total_withdrawn, updated_at) FROM stdin;
\.


--
-- Data for Name: delivery_persons; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_persons (id, user_profile_id, full_name, phone, email, document, birth_date, street, number, complement, neighborhood, city, state, zip_code, vehicle_type, vehicle_plate, vehicle_model, vehicle_color, driver_license, driver_license_category, driver_license_expiry, has_vehicle_insurance, vehicle_insurance_expiry, photo_url, documents, status, is_active, is_verified, current_latitude, current_longitude, last_location_update, total_deliveries, successful_deliveries, failed_deliveries, average_rating, total_ratings, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: delivery_settings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_settings (id, tenant_id, is_delivery_enabled, minimum_order_value, free_delivery_above, freight_calculation_type, base_freight_price, price_per_km, estimated_delivery_time_min, estimated_delivery_time_max, delivery_radius_km, delivery_start_time, delivery_end_time, delivery_days, created_at, updated_at) FROM stdin;
1d150a32-b95f-4a47-bd2f-50dc396b3e0d	32aac50b-6385-4722-9471-4276036ac600	t	0.00	\N	fixed_price	5.00	0.00	30	60	10	08:00:00	18:00:00	{1,2,3,4,5,6,7}	2025-10-11 00:09:07.833459+00	2025-10-11 00:09:07.833459+00
\.


--
-- Data for Name: delivery_vehicle_assignments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_vehicle_assignments (id, delivery_order_id, delivery_person_id, company_vehicle_id, personal_vehicle_id, assignment_date, completion_date, distance_traveled, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: delivery_zone_ceps; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_zone_ceps (id, delivery_zone_id, cep_start, cep_end, created_at) FROM stdin;
df40a9e0-cdc9-4506-aa8f-90538972e674	1bd78e19-7932-43b0-abdb-95dc950da183	01000000	05999999	2025-10-11 00:09:07.833459+00
\.


--
-- Data for Name: delivery_zones; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.delivery_zones (id, tenant_id, name, description, freight_price, is_free, estimated_time_min, estimated_time_max, is_active, created_at, updated_at) FROM stdin;
1bd78e19-7932-43b0-abdb-95dc950da183	32aac50b-6385-4722-9471-4276036ac600	Área Central	Entrega na área central da cidade	5.00	f	30	60	t	2025-10-11 00:09:07.833459+00	2025-10-11 00:09:07.833459+00
\.


--
-- Data for Name: discounts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.discounts (id, code, name, type, value, minimum_amount, usage_limit, used_count, valid_from, valid_until, is_active, created_at, image_url, title_pt, title_en, title_es, description_pt, description_en, description_es, category_id, order_index, discount_percentage, terms_pt, terms_en, terms_es, max_uses_per_user, applies_to_first_purchase_only, stackable, tenant_id) FROM stdin;
9daf66f1-8ccb-418e-8971-84cd972b3269	CUPOM1758571909bc5c6187	Promoção do Dia - Óleos	percentage	0.00	0.00	0	0	2025-09-22 20:11:49.15048+00	2025-12-31 23:59:59+00	t	2025-09-22 20:11:49.15048+00	/src/assets/hero-alae.jpg	50%	\N	\N	Óleos Mobil com preço especial para o dia	\N	\N	\N	1	25	\N	\N	\N	\N	f	f	32aac50b-6385-4722-9471-4276036ac600
2606de31-2f35-4815-a30a-38aba5828f94	CUPOM1758571909c8ba2669	Liquidação - Filtros	percentage	0.00	0.00	0	0	2025-09-22 20:11:49.15048+00	2025-12-31 23:59:59+00	t	2025-09-22 20:11:49.15048+00	/src/assets/hero-alae.jpg	R$ 10,00	\N	\N	Filtros com até 50% de desconto em estoque limitado	\N	\N	\N	2	50	\N	\N	\N	\N	f	f	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: documents; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.documents (id, content, metadata, embedding) FROM stdin;
\.


--
-- Data for Name: event_images; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.event_images (id, event_id, image_url, caption_pt, caption_en, caption_es, display_order, created_at) FROM stdin;
\.


--
-- Data for Name: events; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.events (id, title_pt, title_en, title_es, description_pt, description_en, description_es, event_date, event_time, location_pt, location_en, location_es, venue, type_pt, type_en, type_es, max_attendees, current_attendees, registration_url, is_virtual, is_featured, is_published, created_at, updated_at) FROM stdin;
115d9bd9-e2d2-4d72-8a11-8c2fc09412c2	Conferência Anual ALAE 2024	ALAE Annual Conference 2024	Conferencia Anual ALAE 2024	Conferência anual da ALAE reunindo os principais especialistas em direito empresarial da América Latina.	ALAE annual conference bringing together leading corporate law experts from Latin America.	Conferencia anual de ALAE reuniendo a los principales expertos en derecho empresarial de América Latina.	2025-10-10	09:00:00	São Paulo, Brasil	São Paulo, Brazil	São Paulo, Brasil	Hotel Copacabana Palace	Conferência	Conference	Conferencia	500	0	\N	f	t	t	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00
2c3c9f4f-60dc-43ec-a4f1-8df321d76d4b	Webinar: ESG e Compliance na América Latina	Webinar: ESG and Compliance in Latin America	Webinar: ESG y Compliance en América Latina	Discussão sobre as melhores práticas de ESG e compliance para empresas latino-americanas.	Discussion on ESG and compliance best practices for Latin American companies.	Discusión sobre las mejores prácticas de ESG y compliance para empresas latinoamericanas.	2025-09-25	14:00:00	Online	Online	Online	Plataforma Virtual ALAE	Webinar	Webinar	Webinar	200	0	\N	t	t	t	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00
\.


--
-- Data for Name: financial_categories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.financial_categories (id, name_pt, name_en, name_es, description, type, parent_id, color, icon, is_active, created_at, updated_at) FROM stdin;
4d82a39d-b5a4-46ac-86ed-886fce6e49ee	Vendas	Sales	Ventas	\N	income	\N	#10b981	shopping-cart	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00
53c81aad-baad-4a5c-9b0f-5465a62ea86c	Serviços	Services	Servicios	\N	income	\N	#10b981	briefcase	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00
11c56ba4-05a9-4231-b8d1-ac25412627fc	Outras Receitas	Other Income	Otros Ingresos	\N	income	\N	#10b981	dollar-sign	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00
92a37c1a-fbb5-4da2-89fd-22a1b450a3b9	Folha de Pagamento	Payroll	Nómina	\N	expense	\N	#ef4444	users	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00
124f0a41-06f1-433d-a3be-f2875405cdb3	Aluguel	Rent	Alquiler	\N	expense	\N	#ef4444	home	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00
aec32dee-7d40-4b2d-b4c4-abd160888abe	Fornecedores	Suppliers	Proveedores	\N	expense	\N	#ef4444	truck	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00
88b6f91e-4a4c-4c4e-8aad-0b174e5153ea	Utilities	Utilities	Servicios Públicos	\N	expense	\N	#ef4444	zap	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00
52cb8325-cc7d-4962-b44e-ed7d87fd045f	Marketing	Marketing	Marketing	\N	expense	\N	#ef4444	megaphone	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00
27a99c20-e8eb-409e-9471-0b0b67e67b35	Impostos	Taxes	Impuestos	\N	expense	\N	#ef4444	file-text	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00
102f8d19-18fd-4fef-9bc0-2303a0c41335	Manutenção	Maintenance	Mantenimiento	\N	expense	\N	#ef4444	wrench	t	2025-10-04 04:29:02.401796+00	2025-10-04 04:29:02.401796+00
\.


--
-- Data for Name: financial_transactions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.financial_transactions (id, type, category_id, account_id, supplier_id, order_id, description, amount, payment_method, transaction_date, due_date, paid_date, status, reference_number, attachment_url, notes, created_by, created_at, updated_at) FROM stdin;
b449bd2f-cfb2-4061-af55-1b3e7f69a74e	income	\N	99b91a93-213a-43c9-9402-2f4b360f5371	\N	\N	Pneus Firestone com desconto especial por tempo limitado	12.00	cash	2025-10-04	2025-10-04	\N	pending	\N	\N	\N	\N	2025-10-04 05:19:19.585241+00	2025-10-04 05:19:19.585241+00
\.


--
-- Data for Name: freight_quotes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.freight_quotes (id, shipping_service_id, order_id, origin_cep, destination_cep, weight_kg, length_cm, width_cm, height_cm, base_price, additional_fees, total_price, currency, estimated_days_min, estimated_days_max, api_response, api_quote_id, is_valid, expires_at, created_at) FROM stdin;
\.


--
-- Data for Name: gallery_images; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.gallery_images (id, entity_id, media_item_id, sort_order, alt_text, caption, created_at, updated_at, entity_type) FROM stdin;
b4ec0602-3823-41df-9d32-e2a157e31816	06271351-adf3-4ef5-859c-37b47c58eb15	d8970547-896a-4ae3-a915-ec0802429e51	0	\N	\N	2025-09-18 00:54:22.85359+00	2025-09-18 02:09:31.106399+00	news
1007a1e3-9114-4227-952f-120148c754e8	06271351-adf3-4ef5-859c-37b47c58eb15	4924988e-1fba-4438-acd1-0ad4f928fb76	1	\N	\N	2025-09-18 00:54:22.85359+00	2025-09-18 02:09:31.106399+00	news
\.


--
-- Data for Name: group_discounts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.group_discounts (id, sankhya_group_code, sankhya_promotion_number, sankhya_company_code, group_name, discount_percentage, discount_amount, discount_type, start_date, end_date, description, is_active, created_at, updated_at) FROM stdin;
6550c2ad-977a-48ca-9d86-7b0d58ec5ba8	Teste			teste	10.00	0.00	percentage	2025-10-06 00:00:00+00	2025-10-17 00:00:00+00		t	2025-10-06 17:43:57.263423+00	2025-10-06 17:43:57.263423+00
\.


--
-- Data for Name: ingredient_cost_history; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ingredient_cost_history (id, ingredient_id, unit_cost, effective_date, supplier_id, notes, created_at, tenant_id) FROM stdin;
31cfc715-1c11-4d8c-82cb-23d92c5d78a8	965d7152-3845-4356-9bdb-a49915990331	0.0500	2025-10-04 16:29:37.467692+00	\N	Custo médio atualizado após compra	2025-10-04 16:29:37.467692+00	32aac50b-6385-4722-9471-4276036ac600
756c6470-040b-40e2-8d40-e11415271130	965d7152-3845-4356-9bdb-a49915990331	0.0467	2025-10-04 16:30:12.758158+00	\N	Custo médio atualizado após compra	2025-10-04 16:30:12.758158+00	32aac50b-6385-4722-9471-4276036ac600
154fd9d8-62ce-4539-9403-206cb13b449b	688756f4-f121-46ad-90b5-5efebc4fc6b0	0.0500	2025-10-04 16:32:52.357502+00	\N	Custo médio atualizado após compra	2025-10-04 16:32:52.357502+00	32aac50b-6385-4722-9471-4276036ac600
2f00eb60-eba2-4dc9-86dc-fb755f7cac03	688756f4-f121-46ad-90b5-5efebc4fc6b0	0.0467	2025-10-04 16:33:09.689249+00	\N	Custo médio atualizado após compra	2025-10-04 16:33:09.689249+00	32aac50b-6385-4722-9471-4276036ac600
c9be134f-a56a-4c8e-bb07-c8abad8d403f	965d7152-3845-4356-9bdb-a49915990331	0.0418	2025-10-04 16:49:41.565289+00	\N	Custo médio atualizado após compra	2025-10-04 16:49:41.565289+00	32aac50b-6385-4722-9471-4276036ac600
e62b0b6e-71db-4c32-9e75-02d806c1b17e	32696632-aea0-468a-b10f-650576018f2f	0.0350	2025-10-04 16:55:36.245841+00	\N	Custo médio atualizado após compra	2025-10-04 16:55:36.245841+00	32aac50b-6385-4722-9471-4276036ac600
d80ac72c-6875-47a3-966f-bf819f7fd657	965d7152-3845-4356-9bdb-a49915990331	0.0392	2025-10-04 17:09:51.292336+00	\N	Custo médio atualizado após compra	2025-10-04 17:09:51.292336+00	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: ingredients; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ingredients (id, unit_id, unit_cost, stock_quantity, min_stock_quantity, is_active, created_at, updated_at, item_type, name_pt, name_en, name_es, description_pt, description_en, description_es, tenant_id) FROM stdin;
688756f4-f121-46ad-90b5-5efebc4fc6b0	49e397e2-59b3-40d4-925b-25636da0e306	0.046667	3000.00	1000.00	t	2025-10-04 08:19:11.899712+00	2025-10-04 16:33:09.689249+00	ingredient	Mussarela	Mussarela	Mussarela	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
32696632-aea0-468a-b10f-650576018f2f	49e397e2-59b3-40d4-925b-25636da0e306	0.035000	7000.00	2.00	t	2025-10-04 08:19:29.077037+00	2025-10-04 17:09:51.406595+00	ingredient	Presunto	Presunto	Presunto	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
965d7152-3845-4356-9bdb-a49915990331	49e397e2-59b3-40d4-925b-25636da0e306	0.039200	5000.00	1000.00	t	2025-10-04 07:25:57.20529+00	2025-10-04 19:56:43.42+00	ingredient	Bacon	Bacon	Bacon	\N	\N	\N	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: installments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.installments (id, transaction_id, installment_number, total_installments, amount, due_date, paid_date, status, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: languages; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.languages (id, code, name, native_name, flag_emoji, is_active, is_default, sort_order, created_at, updated_at) FROM stdin;
8b0f8fce-8fa7-40fe-b822-2976030b0a79	en	Inglês	English	🇺🇸	t	f	2	2025-10-04 00:01:49.620332+00	2025-10-04 00:01:49.620332+00
aa3f6641-7095-49d6-a53f-b52ded23a4a3	pt	Português	Português	🇧🇷	t	t	1	2025-10-04 00:01:49.620332+00	2025-10-04 00:02:38.713+00
7e185be3-1d4b-48b5-9122-4fa880501c47	es	Espanhol	Español	🇪🇸	f	f	3	2025-10-04 00:01:49.620332+00	2025-10-04 02:11:53.477+00
\.


--
-- Data for Name: measurement_units; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.measurement_units (id, name, abbreviation, type, created_at, updated_at, conversion_factor, base_unit_id) FROM stdin;
ffd7f62f-2335-43e8-8d7d-31f29513699e	Dúzia	dz	unit	2025-10-04 06:49:41.240923+00	2025-10-04 06:49:41.240923+00	1.000000	\N
32e19e4c-8fef-4de8-bcda-b49d4cee3cd5	Caixa	cx	unit	2025-10-04 08:03:44.535252+00	2025-10-04 08:03:44.535252+00	1.000000	\N
c08ee79d-c226-4149-8f1b-25825c16a711	Pacote	pct	unit	2025-10-04 08:03:44.535252+00	2025-10-04 08:03:44.535252+00	1.000000	\N
6a64cc52-0d9b-4ca3-be03-c6b1084e9d34	Centímetro	cm	length	2025-10-04 08:03:44.535252+00	2025-10-04 08:03:44.535252+00	1.000000	\N
d5908757-03e8-41ca-810d-d1b7812a1ee3	Tonelada	ton	mass	2025-10-04 08:03:44.535252+00	2025-10-04 08:03:44.535252+00	1000000.000000	49e397e2-59b3-40d4-925b-25636da0e306
228f8def-2ef2-4577-9fa2-7b983c7e99da	Miligrama	mg	mass	2025-10-04 08:03:44.535252+00	2025-10-04 08:03:44.535252+00	0.001000	49e397e2-59b3-40d4-925b-25636da0e306
c4d4b747-8836-453a-bcb8-bf910a8a4404	Xícara	xic	volume	2025-10-04 06:49:41.240923+00	2025-10-04 06:49:41.240923+00	1.000000	e21985a8-ab3b-4d22-bb65-95599d554101
8c41934b-fb36-4220-9647-b757e3d1e1bd	Colher de Sopa	cs	volume	2025-10-04 06:49:41.240923+00	2025-10-04 06:49:41.240923+00	1.000000	e21985a8-ab3b-4d22-bb65-95599d554101
5d72341d-2660-4aaf-86f9-4d2b43571879	Colher de Chá	cc	volume	2025-10-04 06:49:41.240923+00	2025-10-04 06:49:41.240923+00	1.000000	e21985a8-ab3b-4d22-bb65-95599d554101
7dfe120d-0d9a-4e2d-acd3-a977bf858a49	Metro	m	length	2025-10-04 08:03:44.535252+00	2025-10-04 08:03:44.535252+00	100.000000	6a64cc52-0d9b-4ca3-be03-c6b1084e9d34
49e397e2-59b3-40d4-925b-25636da0e306	Grama	g	mass	2025-10-04 06:49:41.240923+00	2025-10-04 06:49:41.240923+00	1.000000	\N
c7b9e17d-3939-445d-b92a-236a04a66408	Quilograma	kg	mass	2025-10-04 06:49:41.240923+00	2025-10-04 06:49:41.240923+00	1000.000000	49e397e2-59b3-40d4-925b-25636da0e306
e21985a8-ab3b-4d22-bb65-95599d554101	Mililitro	mL	volume	2025-10-04 08:03:44.535252+00	2025-10-04 08:03:44.535252+00	1.000000	\N
56747300-17bc-46ac-a6d8-b6bf580dea06	Mililitro	ml	volume	2025-10-04 06:49:41.240923+00	2025-10-04 06:49:41.240923+00	1.000000	\N
4361e79b-57a2-44a3-8122-76f7e54af8d4	Litro	l	volume	2025-10-04 06:49:41.240923+00	2025-10-04 06:49:41.240923+00	1000.000000	e21985a8-ab3b-4d22-bb65-95599d554101
e3779f39-7433-405d-81ce-1bf180c0a2f2	Litro	L	volume	2025-10-04 08:03:44.535252+00	2025-10-04 08:03:44.535252+00	1000.000000	e21985a8-ab3b-4d22-bb65-95599d554101
2d9f5e6e-3e19-45f3-8858-9c4e03e6d552	Unidade	un	unit	2025-10-04 06:49:41.240923+00	2025-10-04 06:49:41.240923+00	1.000000	\N
\.


--
-- Data for Name: media_items; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.media_items (id, url, filename, size, type, alt_text, description, created_at, updated_at) FROM stdin;
7178501e-0ea7-48c1-a582-5431a9d84a5b	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758136483055.jpeg	0ba8afa3-32e0-4fdb-a6c8-f1ee79f70cd8.jpeg	82450	image/jpeg	O melhor titulo para imagem	A melhor descrição para imagem	2025-09-17 19:14:44.581714+00	2025-09-17 19:14:44.581714+00
d8970547-896a-4ae3-a915-ec0802429e51	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758154423561-49bwqyi9o.png	5-768x768.png	148583	image/png	5-768x768.png		2025-09-18 00:13:44.190985+00	2025-09-18 00:13:44.190985+00
4924988e-1fba-4438-acd1-0ad4f928fb76	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758154424279-qfy8m4rmc.png	8-768x768.png	316941	image/png	8-768x768.png		2025-09-18 00:13:44.838484+00	2025-09-18 00:13:44.838484+00
\.


--
-- Data for Name: menu_items; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.menu_items (id, label, url, icon, type, category_id, order_index, is_active, created_at, updated_at) FROM stdin;
38ad56bc-a999-4371-974e-1ab27f1eb538	Eletrônicos	/produtos?categoria=Eletrônicos	link	category	550e8400-e29b-41d4-a716-446655440001	1	t	2025-09-22 18:38:30.320495+00	2025-09-22 18:38:30.320495+00
564e18de-85b0-426e-a2ba-bbb34cf944e9	Início	/loja	home	page	\N	0	t	2025-09-22 18:06:46.8968+00	2025-09-22 18:06:46.8968+00
09339ec3-a954-4b27-b531-831a64de5709	Contato	/contato	link	page	\N	2	t	2025-10-01 20:09:21.886575+00	2025-10-01 20:09:21.886575+00
\.


--
-- Data for Name: modules; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.modules (id, code, name_pt, name_en, name_es, description_pt, description_en, description_es, icon, color, is_active, sort_order, created_at, updated_at) FROM stdin;
901c4157-2ddd-4b78-84f0-2d4056cf33df	ecommerce	E-commerce	E-commerce	E-commerce	Sistema de loja virtual com catálogo de produtos e carrinho de compras	Online store system with product catalog and shopping cart	Sistema de tienda en línea con catálogo de productos y carrito de compras	shopping-cart	#3b82f6	t	1	2025-10-06 14:01:04.576507+00	2025-10-06 14:01:04.576507+00
11befdbb-5cf1-4393-aaf1-3d37d3644cb1	delivery	Delivery	Delivery	Delivery	Sistema de delivery com cardápio digital e gestão de pedidos	Delivery system with digital menu and order management	Sistema de delivery con menú digital y gestión de pedidos	truck	#ef4444	t	2	2025-10-06 14:01:04.576507+00	2025-10-06 14:01:04.576507+00
7d800ad9-a1d4-44a5-8d9d-2f29f875d98e	pos	PDV	POS	PDV	Sistema de ponto de venda com mesas, comandas e cozinha	Point of sale system with tables, orders and kitchen	Sistema de punto de venta con mesas, pedidos y cocina	credit-card	#10b981	t	3	2025-10-06 14:01:04.576507+00	2025-10-06 14:01:04.576507+00
c8c91a41-19bf-437d-942f-12bb5cbfbf64	inventory	Estoque	Inventory	Inventario	Gestão de estoque com ingredientes e produtos	Inventory management with ingredients and products	Gestión de inventario con ingredientes y productos	package	#f59e0b	t	4	2025-10-06 14:01:04.576507+00	2025-10-06 14:01:04.576507+00
802c6754-2827-49a7-8fc0-16cd4625d232	financial	Financeiro	Financial	Financiero	Sistema financeiro com contas a pagar e receber	Financial system with accounts payable and receivable	Sistema financiero con cuentas por pagar y por cobrar	dollar-sign	#8b5cf6	t	5	2025-10-06 14:01:04.576507+00	2025-10-06 14:01:04.576507+00
495ea945-8619-423e-a79d-6b026b310878	services	Serviços	Services	Servicios	Sistema de serviços com agendamentos e profissionais	Services system with scheduling and professionals	Sistema de servicios con programación y profesionales	calendar	#06b6d4	t	6	2025-10-06 14:01:04.576507+00	2025-10-06 14:01:04.576507+00
96c075ab-7d01-4f61-9eb4-72b2d91ceb10	reports	Relatórios	Reports	Reportes	Relatórios e analytics de vendas e performance	Sales and performance reports and analytics	Informes y análisis de ventas y rendimiento	bar-chart	#84cc16	t	7	2025-10-06 14:01:04.576507+00	2025-10-06 14:01:04.576507+00
57e1729f-9397-4180-a5a3-c6808563a1bc	marketing	Marketing	Marketing	Marketing	Ferramentas de marketing e promoções	Marketing tools and promotions	Herramientas de marketing y promociones	megaphone	#ec4899	t	8	2025-10-06 14:01:04.576507+00	2025-10-06 14:01:04.576507+00
626ad530-c1e7-4976-b25e-ff3ceb21a640	crm	CRM	CRM	CRM	Gestão de relacionamento com clientes	Customer relationship management	Gestión de relaciones con clientes	users	#6366f1	t	9	2025-10-06 14:01:04.576507+00	2025-10-06 14:01:04.576507+00
eb76ae57-0327-4429-8ecd-4bfa3623949d	api	API	API	API	Acesso à API para integrações externas	API access for external integrations	Acceso a API para integraciones externas	code	#64748b	t	10	2025-10-06 14:01:04.576507+00	2025-10-06 14:01:04.576507+00
\.


--
-- Data for Name: n8n_chat_histories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.n8n_chat_histories (id, session_id, message) FROM stdin;
1	554891171055@s.whatsapp.net	{"type": "human", "content": "[\\"Hhh\\"]", "additional_kwargs": {}, "response_metadata": {}}
2	554891171055@s.whatsapp.net	{"type": "ai", "content": "Parece que você enviou uma mensagem curta ou um texto que não está claro. Como posso ajudar você hoje?", "tool_calls": [], "additional_kwargs": {}, "response_metadata": {}, "invalid_tool_calls": []}
\.


--
-- Data for Name: news; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.news (id, title_pt, title_en, title_es, summary_pt, summary_en, summary_es, content_pt, content_en, content_es, image_url, published_date, is_featured, is_published, author, created_at, updated_at, video_url, category_id) FROM stdin;
89f7abb9-fec8-4e6f-81d7-57216085084c	Nova Regulamentação de Investimentos Estrangeiros na América Latina	New Foreign Investment Regulation in Latin America	Nueva Regulación de Inversión Extranjera en América Latina	Análise das mudanças regulatórias que afetam investimentos estrangeiros na região.	Analysis of regulatory changes affecting foreign investments in the region.	Análisis de los cambios regulatorios que afectan las inversiones extranjeras en la región.	Conteúdo completo sobre as novas regulamentações...	Full content about the new regulations...	Contenido completo sobre las nuevas regulaciones...	\N	2025-09-05	t	t	Dr. João Silva	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00	\N	\N
963953f5-b909-4a23-aacc-3bf860833126	Simpósio ALAE 2024: Sustentabilidade e Direito	ALAE Symposium 2024: Sustainability and Law	Simposio ALAE 2024: Sostenibilidad y Derecho	Evento anual da ALAE discutirá as intersecções entre direito e sustentabilidade.	ALAE annual event will discuss intersections between law and sustainability.	Evento anual de ALAE discutirá las intersecciones entre derecho y sostenibilidad.	Detalhes do simpósio e palestrantes confirmados...	Symposium details and confirmed speakers...	Detalles del simposio y ponentes confirmados...	\N	2025-09-08	t	t	Dra. María García	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00	\N	\N
06271351-adf3-4ef5-859c-37b47c58eb15	Notícia 1 PT	Notícia 1 EN	Notícia 1 ES	Resumo PT	Resumo EN	Resumo ES	<p>Conteúdo PT</p>	Conteúdo EN	Conteúdo ES	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758136483055.jpeg	2025-09-17	t	t		2025-09-17 19:16:47.133009+00	2025-09-18 00:54:27.470517+00		68d2ddc3-eb4f-46cb-a8b8-7b3a172603e5
\.


--
-- Data for Name: notification_recipients; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.notification_recipients (id, created_at, notification_id, user_id, is_read, read_at) FROM stdin;
\.


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.notifications (id, created_at, updated_at, tenant_id, title, content, big_image, url, param_name, item_id, notification_type, priority, is_active, scheduled_at, expires_at) FROM stdin;
3bf52e79-0cb3-4152-94eb-dce9ff9d8aa6	2025-10-15 13:55:36.030642+00	2025-10-15 13:55:36.030642+00	32aac50b-6385-4722-9471-4276036ac600	Bem-vindo ao Estabelecimento Padrão	Obrigado por usar nosso aplicativo! Aqui você receberá atualizações importantes sobre seus pedidos e promoções exclusivas.	\N	\N	\N	\N	system	normal	t	\N	\N
\.


--
-- Data for Name: office_especialities; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.office_especialities (id, created_at, office_id, specialitie_id) FROM stdin;
\.


--
-- Data for Name: offices; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.offices (id, name, country_id, city, address, latitude, longitude, phone, email, website, description_pt, description_en, description_es, contact_person, is_active, created_at, updated_at, instagram, facebook, linkedin, youtube, tiktok, whatsapp, image_url, image_cover_url) FROM stdin;
5e846a98-c003-4f0a-8cf5-46f2a23fc3a6	ALAE Brasil - São Paulo	b944f0d9-da51-4649-b8fc-2feedf7ed18d	São Paulo	Av. Paulista, 1000 - Bela Vista, São Paulo - SP	-23.55050000	-46.63330000	+55 (11) 3000-0000	saopaulo@alae.org	\N	Escritório principal da ALAE no Brasil, especializado em direito empresarial e internacional.	ALAE main office in Brazil, specialized in corporate and international law.	Oficina principal de ALAE en Brasil, especializada en derecho empresarial e internacional.	Dr. João Silva	t	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00	\N	\N	\N	\N	\N	\N	\N	\N
7015e8d8-899c-45f4-9ae6-2035e868f184	ALAE Argentina - Buenos Aires	02333944-5822-4d4f-aba0-9dc449e7daab	Buenos Aires	Av. Corrientes, 500 - Centro, Buenos Aires	-34.60370000	-58.38160000	+54 (11) 4000-0000	buenosaires@alae.org	\N	Escritório da ALAE na Argentina, focado em direito comercial latino-americano.	ALAE office in Argentina, focused on Latin American commercial law.	Oficina de ALAE en Argentina, enfocada en derecho comercial latinoamericano.	Dra. María García	t	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00	\N	\N	\N	\N	\N	\N	\N	\N
4ceb219b-d7da-4edd-8cd8-3d3cf722f3ec	ALAE Chile - Santiago	7352b246-b6bc-431d-b980-55d28f40d97f	Santiago	Av. Providencia, 1000 - Providencia, Santiago	-33.44890000	-70.66930000	+56 (2) 2000-0000	santiago@alae.org	\N	Escritório da ALAE no Chile, especializado em direito minerário e ambiental.	ALAE office in Chile, specialized in mining and environmental law.	Oficina de ALAE en Chile, especializada en derecho minero y ambiental.	Dr. Carlos Mendoza	t	2025-09-10 02:04:07.368165+00	2025-09-10 02:04:07.368165+00	\N	\N	\N	\N	\N	\N	\N	\N
\.


--
-- Data for Name: order_item_modifiers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.order_item_modifiers (id, order_item_id, modifier_id, modifier_name, quantity, unit_price, total_price, created_at) FROM stdin;
f4b6ed70-4209-4f8e-81f4-eaa4c2098b89	7f3bcd7e-8e17-4779-94af-ad6e14a9e777	10b58804-a05d-4ada-be00-94869d7f723a	Grande	1	20.00	20.00	2025-10-16 17:20:30.684742+00
b6456f93-60bc-4d32-9efd-a7ff97fbe401	51ce34ea-c77f-4915-8bf2-0e425688a6d6	2fc9374e-f797-4307-b453-81fa38156c26	Bacon	1	1.00	1.00	2025-10-19 20:19:48.852413+00
ecba38b1-33b2-40d7-a668-a8e389e627ae	c21f00f9-935c-45fa-8176-3d5adb307395	2fc9374e-f797-4307-b453-81fa38156c26	Bacon	1	1.00	1.00	2025-10-19 20:19:49.569724+00
3ade041a-4102-4ce3-8c49-94cf40910a6b	94eb6ee7-03d9-4321-8624-7b78454eaff4	2fc9374e-f797-4307-b453-81fa38156c26	Bacon	1	1.00	1.00	2025-10-19 20:19:49.574043+00
\.


--
-- Data for Name: order_items; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.order_items (id, order_id, product_id, quantity, unit_price, total_price, created_at, customizations) FROM stdin;
7f3bcd7e-8e17-4779-94af-ad6e14a9e777	31138788-949c-4893-92cf-0abb9f5ae70f	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	3	20.00	60.00	2025-10-16 17:20:30.184166+00	\N
51ce34ea-c77f-4915-8bf2-0e425688a6d6	31138788-949c-4893-92cf-0abb9f5ae70f	550ddedf-1e97-4517-96fc-1ee7595457fb	2	19.00	38.00	2025-10-19 20:19:48.500459+00	\N
94eb6ee7-03d9-4321-8624-7b78454eaff4	31138788-949c-4893-92cf-0abb9f5ae70f	550ddedf-1e97-4517-96fc-1ee7595457fb	2	19.00	38.00	2025-10-19 20:19:48.552747+00	\N
c21f00f9-935c-45fa-8176-3d5adb307395	31138788-949c-4893-92cf-0abb9f5ae70f	550ddedf-1e97-4517-96fc-1ee7595457fb	2	19.00	38.00	2025-10-19 20:19:48.455832+00	\N
\.


--
-- Data for Name: order_session_item_modifiers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.order_session_item_modifiers (id, order_item_id, modifier_id, modifier_name, quantity, unit_price, total_price, created_at) FROM stdin;
\.


--
-- Data for Name: order_session_items; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.order_session_items (id, session_id, product_id, quantity, unit_price, total_price, kitchen_status, notes, sent_to_kitchen_at, prepared_at, delivered_at, cancelled_at, cancellation_reason, created_at, updated_at) FROM stdin;
d35a7ee2-7333-43f3-9e5e-51a2ce2efa8c	421afd55-344b-4605-8d26-4de2339116e9	b74603fc-ce69-4e5d-86a1-b93becc99c77	3	8.00	24.00	ready		2025-10-07 00:52:24.324+00	2025-10-07 00:52:25.17+00	\N	\N	\N	2025-10-04 06:20:25.459243+00	2025-10-07 00:52:25.17+00
5233295e-773a-41db-befb-9771e4e3f3dd	421afd55-344b-4605-8d26-4de2339116e9	eba51710-95bd-4b97-a078-6d3cd3ab5bf5	1	6.00	6.00	ready		2025-10-07 00:52:26.914+00	2025-10-07 00:52:28.332+00	\N	\N	\N	2025-10-04 06:20:14.247897+00	2025-10-07 00:52:28.332+00
334d7416-02f9-43da-8d39-dfdc5c55cb28	421afd55-344b-4605-8d26-4de2339116e9	fcafc3a6-0a0d-4707-8704-326f52220505	2	3.00	6.00	ready		2025-10-07 00:52:22.363+00	2025-10-07 00:52:29.62+00	\N	\N	\N	2025-10-04 06:19:59.375614+00	2025-10-07 00:52:29.62+00
\.


--
-- Data for Name: order_sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.order_sessions (id, session_number, table_id, waiter_id, service_type, customer_name, customer_count, opened_at, closed_at, total_amount, discount_amount, service_charge, final_amount, notes, is_closed, created_at, updated_at) FROM stdin;
421afd55-344b-4605-8d26-4de2339116e9	CMD57201275	17aa371f-72a0-4995-a879-48638a395e1d	18881fc5-03af-4fc6-b480-c08dc0030add	dine_in	\N	1	2025-10-04 05:53:21.112522+00	2025-10-04 06:31:22.37+00	36.00	0.00	0.00	36.00	\N	t	2025-10-04 05:53:21.112522+00	2025-10-04 06:31:22.37+00
280393c5-598b-4e41-a7e6-af67c33341eb	CMD56099951	dba7625b-207f-4fcd-9ebc-aa22eaef3153	18881fc5-03af-4fc6-b480-c08dc0030add	dine_in	Joao	4	2025-10-04 05:34:59.753512+00	2025-10-04 06:31:24.946+00	0.00	0.00	0.00	0.00	\N	t	2025-10-04 05:34:59.753512+00	2025-10-04 06:31:24.946+00
3d689489-91a3-48c0-86f5-e92f9e252575	CMD99242047	\N	\N	dine_in	\N	1	2025-10-07 01:07:25.090466+00	\N	0.00	0.00	0.00	0.00	\N	f	2025-10-07 01:07:25.090466+00	2025-10-07 01:07:25.090466+00
\.


--
-- Data for Name: orders; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.orders (id, user_id, order_number, status, total_amount, shipping_amount, discount_amount, payment_status, payment_method, shipping_address, billing_address, notes, created_at, updated_at, tenant_id, is_draft, draft_expires_at) FROM stdin;
31138788-949c-4893-92cf-0abb9f5ae70f	0cede974-5348-4ec7-93d7-5991f64d7913	\N	draft	197.00	0.00	0.00	pending	\N	\N	\N	\N	2025-10-10 20:58:02.817008+00	2025-10-10 20:58:02.817008+00	32aac50b-6385-4722-9471-4276036ac600	t	\N
\.


--
-- Data for Name: payments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.payments (id, order_id, payment_method, amount, status, transaction_id, gateway_response, processed_at, created_at) FROM stdin;
\.


--
-- Data for Name: plan_modules; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.plan_modules (id, plan_id, module_id, is_included, created_at) FROM stdin;
\.


--
-- Data for Name: plans; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.plans (id, name, description, price, features, max_tenants, max_products, max_orders_per_month, max_users, storage_limit_gb, api_calls_per_month, is_active, is_popular, sort_order, created_at, updated_at, business_type, billing_cycle, support_level) FROM stdin;
acff29d9-3e1f-40c7-8ab6-b526801fa84f	Starter	Ideal para pequenos negócios que estão começando	29.90	{"delivery": true, "ecommerce": true, "basic_reports": true, "email_support": true}	1	50	500	3	5	10000	t	f	1	2025-10-05 20:32:34.929757+00	2025-10-05 20:32:34.929757+00	delivery	monthly	basic
2a205787-156a-4d46-8f8a-5b3be3a9b3ac	Business	Perfeito para negócios em crescimento	79.90	{"pos": true, "delivery": true, "ecommerce": true, "custom_branding": true, "advanced_reports": true, "priority_support": true}	3	200	2000	10	20	50000	t	t	2	2025-10-05 20:32:34.929757+00	2025-10-05 20:32:34.929757+00	delivery	monthly	priority
dec2c6b8-d016-40f4-896a-9f1b1cb19725	Starter Anual	Plano Starter com desconto anual	299.90	{"delivery": true, "ecommerce": true, "basic_reports": true, "email_support": true}	1	50	500	3	5	10000	t	f	4	2025-10-05 20:32:34.929757+00	2025-10-05 20:32:34.929757+00	delivery	yearly	basic
159edc86-eaa8-4ee5-a51f-5327f32a90b0	Enterprise	Para empresas que precisam de recursos avançados	199.90	{"pos": true, "delivery": true, "webhooks": true, "ecommerce": true, "api_access": true, "custom_branding": true, "advanced_reports": true, "dedicated_support": true}	-1	-1	-1	-1	100	-1	t	f	3	2025-10-05 20:32:34.929757+00	2025-10-05 20:32:34.929757+00	delivery	monthly	dedicated
94bb7c4d-f0a3-4d7b-b609-0af48da57c35	E-commerce Starter	Plano básico para e-commerce	39.90	{"basic_analytics": true, "product_catalog": true, "customer_support": true, "inventory_management": true}	1	100	1000	5	\N	\N	t	f	1	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	ecommerce	monthly	basic
2aaa42b3-978a-48ac-97f5-5bf2077a0f8b	Business Anual	Plano Business com desconto anual	799.90	{"pos": true, "delivery": true, "ecommerce": true, "custom_branding": true, "advanced_reports": true, "priority_support": true}	3	200	2000	10	20	50000	t	t	5	2025-10-05 20:32:34.929757+00	2025-10-05 20:32:34.929757+00	delivery	yearly	priority
b3100a32-15e9-4122-a4a3-1b2bd6c81ee7	Enterprise Anual	Plano Enterprise com desconto anual	1999.90	{"pos": true, "delivery": true, "webhooks": true, "ecommerce": true, "api_access": true, "custom_branding": true, "advanced_reports": true, "dedicated_support": true}	-1	-1	-1	-1	100	-1	t	f	6	2025-10-05 20:32:34.929757+00	2025-10-05 20:32:34.929757+00	delivery	yearly	dedicated
37913bc7-2489-400b-881f-a0ffb71ddc22	Delivery Starter	Plano básico para delivery e restaurantes	29.90	{"basic_analytics": true, "menu_management": true, "customer_support": true, "order_management": true}	1	50	500	3	\N	\N	t	f	1	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	delivery	monthly	basic
e2804c3a-a38f-4639-b757-08720c4617c6	Delivery Professional	Plano profissional para delivery e restaurantes	79.90	{"api_access": true, "custom_branding": true, "menu_management": true, "order_management": true, "priority_support": true, "advanced_analytics": true}	1	200	2000	10	\N	\N	t	f	2	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	delivery	monthly	priority
478f4932-a31b-48cd-ad13-30d9a41b0820	Delivery Enterprise	Plano empresarial para delivery e restaurantes	199.90	{"api_access": true, "white_label": true, "custom_branding": true, "menu_management": true, "order_management": true, "dedicated_support": true, "advanced_analytics": true, "custom_integrations": true}	5	1000	10000	50	\N	\N	t	f	3	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	delivery	monthly	dedicated
c513bc4e-c3ac-4ea3-a99f-ea7d1cf83090	E-commerce Professional	Plano profissional para e-commerce	99.90	{"seo_tools": true, "api_access": true, "custom_branding": true, "product_catalog": true, "priority_support": true, "advanced_analytics": true, "inventory_management": true}	1	500	5000	15	\N	\N	t	f	2	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	ecommerce	monthly	priority
5fb5bb0e-729f-48c0-a27e-92db6dda98cf	E-commerce Enterprise	Plano empresarial para e-commerce	299.90	{"seo_tools": true, "api_access": true, "white_label": true, "custom_branding": true, "product_catalog": true, "dedicated_support": true, "advanced_analytics": true, "custom_integrations": true, "inventory_management": true, "marketing_automation": true}	10	5000	50000	100	\N	\N	t	f	3	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	ecommerce	monthly	dedicated
d2f9fcd7-8bc9-4e47-b0cd-d0d8607f7b11	Pet Shop Starter	Plano básico para pet shops	49.90	{"basic_analytics": true, "product_catalog": true, "customer_support": true, "service_management": true, "appointment_scheduling": true}	1	200	300	5	\N	\N	t	f	1	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	petshop	monthly	basic
12e3fb9b-7a83-47b1-a2a9-9459d93efc3d	Pet Shop Professional	Plano profissional para pet shops	119.90	{"api_access": true, "pet_profiles": true, "custom_branding": true, "product_catalog": true, "priority_support": true, "advanced_analytics": true, "service_management": true, "appointment_scheduling": true}	1	1000	1500	20	\N	\N	t	f	2	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	petshop	monthly	priority
59f58642-1d01-42bc-8483-09fc2abc1b0e	Pet Shop Enterprise	Plano empresarial para pet shops	249.90	{"api_access": true, "white_label": true, "pet_profiles": true, "custom_branding": true, "product_catalog": true, "dedicated_support": true, "advanced_analytics": true, "service_management": true, "veterinary_records": true, "custom_integrations": true, "appointment_scheduling": true}	5	5000	7500	100	\N	\N	t	f	3	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	petshop	monthly	dedicated
bbaeef12-df08-4ec0-9f9d-2195becadd47	Market Starter	Plano básico para mercados	59.90	{"basic_analytics": true, "product_catalog": true, "customer_support": true, "order_management": true, "inventory_management": true}	1	500	1000	8	\N	\N	t	f	1	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	market	monthly	basic
1d66387b-33e1-400a-aa2c-91c67a1cdb31	Market Professional	Plano profissional para mercados	149.90	{"api_access": true, "custom_branding": true, "product_catalog": true, "order_management": true, "priority_support": true, "advanced_analytics": true, "supplier_management": true, "inventory_management": true}	1	2500	5000	25	\N	\N	t	f	2	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	market	monthly	priority
899df116-1ee4-4cdf-82ce-7c1b1e28d7b7	Market Enterprise	Plano empresarial para mercados	399.90	{"api_access": true, "white_label": true, "multi_location": true, "custom_branding": true, "product_catalog": true, "order_management": true, "dedicated_support": true, "advanced_analytics": true, "custom_integrations": true, "supplier_management": true, "inventory_management": true}	10	10000	20000	150	\N	\N	t	f	3	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	market	monthly	dedicated
b6d2478f-cdcf-41e1-af00-7765969438f0	Mixed Business Starter	Plano básico para negócios mistos	69.90	{"basic_analytics": true, "product_catalog": true, "customer_support": true, "service_management": true, "multi_business_support": true}	1	300	800	10	\N	\N	t	f	1	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	mixed	monthly	basic
0bb14251-32df-4b24-b1ea-2c77a4b93e00	Mixed Business Professional	Plano profissional para negócios mistos	179.90	{"api_access": true, "custom_branding": true, "product_catalog": true, "priority_support": true, "advanced_analytics": true, "service_management": true, "multi_business_support": true, "cross_business_analytics": true}	3	1500	4000	40	\N	\N	t	f	2	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	mixed	monthly	priority
efd6c09b-0a77-4ada-907b-5b0a4697c101	Mixed Business Enterprise	Plano empresarial para negócios mistos	449.90	{"api_access": true, "white_label": true, "custom_branding": true, "product_catalog": true, "dedicated_support": true, "unified_dashboard": true, "advanced_analytics": true, "service_management": true, "custom_integrations": true, "multi_business_support": true, "cross_business_analytics": true}	20	7500	20000	200	\N	\N	t	f	3	2025-10-06 13:34:58.507648+00	2025-10-06 13:34:58.507648+00	mixed	monthly	dedicated
\.


--
-- Data for Name: printer_stations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.printer_stations (id, name, type, ip_address, printer_model, is_active, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: product_categories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_categories (id, name_pt, name_en, name_es, description_pt, description_en, description_es, parent_id, slug_pt, slug_en, slug_es, image_url, icon, color, sort_order, is_active, sankhya_code, sankhya_synced, created_at, updated_at, category_type, tenant_id) FROM stdin;
1af974ee-02a3-402e-95da-06dda15a7feb	Óleos	Oils	Aceites	Óleos lubrificantes e fluidos	\N	\N	\N	oleos	oils	aceites	\N	Droplet	#4ECDC4	2	t	\N	f	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	ecommerce	32aac50b-6385-4722-9471-4276036ac600
d937813e-c697-48a1-a2e8-f6ae84070322	Pneus	Tires	Neumáticos	Pneus para todos os tipos de veículos	\N	\N	\N	pneus	tires	neumaticos	\N	Circle	#FF6B6B	1	t	\N	f	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	ecommerce	32aac50b-6385-4722-9471-4276036ac600
85bb6ff7-867b-44cc-b7b4-c751737c70b9	Filtros	Filters	Filtros	Filtros de ar, óleo e combustível	\N	\N	\N	filtros	filters	filtros	\N	Filter	#45B7D1	3	t	\N	f	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	ecommerce	32aac50b-6385-4722-9471-4276036ac600
583efe49-e7c0-4615-b1d4-8ad1d2923c93	Pastilhas de Freio	Brake Pads	Pastillas de Freno	Pastilhas e discos de freio	\N	\N	\N	pastilhas-freio	brake-pads	pastillas-freno	\N	Zap	#96CEB4	4	t	\N	f	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	ecommerce	32aac50b-6385-4722-9471-4276036ac600
a6b13115-70dd-48c4-a8ef-1738e4fb1ec3	Suspensão	Suspension	Suspensión	Componentes de suspensão	\N	\N	\N	suspensao	suspension	suspension	\N	Settings	#DDA0DD	6	t	\N	f	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	ecommerce	32aac50b-6385-4722-9471-4276036ac600
7504f6a0-4729-497f-8dbc-9795cd52157b	Acessórios	Accessories	Accesorios	Acessórios automotivos	\N	\N	\N	acessorios	accessories	accesorios	\N	Star	#98D8C8	7	t	\N	f	2025-09-20 01:00:43.6125+00	2025-10-05 20:13:42.530886+00	ecommerce	32aac50b-6385-4722-9471-4276036ac600
3cd21aef-92a0-4c61-8620-77c15656f546	Baterias	Batteries	Baterías	Baterias automotivas	\N	\N	\N	baterias	batteries	baterias	\N	Battery	#FFEAA7	5	t	\N	f	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	ecommerce	32aac50b-6385-4722-9471-4276036ac600
d27ac5d2-c7a4-4c04-82ab-81dd375d998f	Bebidas						\N	bebidas	bebidas	bebidas		Package	#3B82F6	0	t	\N	f	2025-10-04 06:01:45.512756+00	2025-10-05 20:13:42.530886+00	delivery	32aac50b-6385-4722-9471-4276036ac600
52e9c7b1-7821-4e9d-966d-8f8ebcab54ce	Pastéis Doce						\N	pasteis-doce	pasteis-doce	pasteis-doce		Package	#3B82F6	0	t	\N	f	2025-10-04 06:01:58.983122+00	2025-10-05 20:13:42.530886+00	delivery	32aac50b-6385-4722-9471-4276036ac600
5340ca95-32ef-43a7-9097-98ce2ba8794e	Pastéis						\N	pasteis	pasteis	pasteis		Package	#3B82F6	0	t	\N	f	2025-10-04 06:02:08.244652+00	2025-10-05 20:13:42.530886+00	delivery	32aac50b-6385-4722-9471-4276036ac600
6e374778-0c3e-4845-883c-39159e0fcbcc	Salgados						\N	salgados	salgados	salgados		Package	#3B82F6	0	t	\N	f	2025-10-04 06:02:14.680884+00	2025-10-05 20:13:42.530886+00	delivery	32aac50b-6385-4722-9471-4276036ac600
1e269b6e-f14a-46c8-9db1-8e82a3ff833e	Pastéis Especiais						\N	pasteis-especiais	pasteis-especiais	pasteis-especiais		Package	#3B82F6	0	t	\N	f	2025-10-04 06:02:23.534539+00	2025-10-05 20:13:42.530886+00	delivery	32aac50b-6385-4722-9471-4276036ac600
2f4a529a-fcfc-41db-8fd6-1a73ddc1af34	Pizzas	Pizzas					\N	pizzas	pizzas	pizzas	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758154424279-qfy8m4rmc.png	Package	#3B82F6	0	t	\N	f	2025-10-04 21:15:38.178695+00	2025-10-05 20:13:42.530886+00	delivery	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: product_composition_eligibility; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_composition_eligibility (id, composition_id, product_id, category_id, created_at) FROM stdin;
\.


--
-- Data for Name: product_compositions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_compositions (id, name, min_products, max_products, allow_different_sizes, price_calculation_type, fixed_price, is_active, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: product_cost_history; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_cost_history (id, product_id, unit_cost, supplier_id, movement_date, notes, created_at) FROM stdin;
71107ade-da2b-4005-88bb-14f3b68d2785	99b0314e-4080-493b-883f-bc92bf88f59a	3.00	\N	2025-10-04 19:18:48.364848+00	Custo registrado na compra	2025-10-04 19:18:48.364848+00
4e7d07b7-8b3a-49e1-a3e9-4b6dea71d39f	640f22f1-4252-4c0b-b8ef-f6be0a76a702	4.00	\N	2025-10-04 19:18:48.558732+00	Custo registrado na compra	2025-10-04 19:18:48.558732+00
9444b07d-b60f-4865-8b4a-bb5a44806c8d	99b0314e-4080-493b-883f-bc92bf88f59a	3.00	\N	2025-10-04 19:24:49.083882+00	Custo registrado na compra	2025-10-04 19:24:49.083882+00
6a9f9bae-9055-4a35-b09c-cc8959b37a0c	2cdfc10c-0a11-4009-aed3-f53a4552fc1a	5.00	\N	2025-10-04 19:24:49.230247+00	Custo registrado na compra	2025-10-04 19:24:49.230247+00
\.


--
-- Data for Name: product_images; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_images (id, product_id, image_url, filename, alt_text, description, sort_order, created_at, updated_at) FROM stdin;
1962fa40-2d66-49db-95cc-8dec6dc2cfc7	ad5069c4-309d-49ad-b310-59df31cc6bf6	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758136483055.jpeg	0ba8afa3-32e0-4fdb-a6c8-f1ee79f70cd8.jpeg	O melhor titulo para imagem	\N	0	2025-10-04 00:58:11.381662+00	2025-10-04 00:58:11.381662+00
6d9a37e6-47d8-41b3-a6b1-55bb5e35dd85	ad5069c4-309d-49ad-b310-59df31cc6bf6	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758154423561-49bwqyi9o.png	5-768x768.png	5-768x768.png	\N	1	2025-10-04 00:58:11.381662+00	2025-10-04 00:58:11.381662+00
\.


--
-- Data for Name: product_ingredient_compositions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_ingredient_compositions (id, product_id, ingredient_id, quantity, unit_id, cost_per_unit, notes, is_active, created_at, updated_at) FROM stdin;
fb5f5adb-df89-4734-bc30-1b113c2f9592	99b0314e-4080-493b-883f-bc92bf88f59a	965d7152-3845-4356-9bdb-a49915990331	100.0000	49e397e2-59b3-40d4-925b-25636da0e306	50.0000		t	2025-10-04 07:26:56.685211+00	2025-10-04 07:26:56.685211+00
80d8ea13-4d3d-4e85-a243-2f5d0000748f	550ddedf-1e97-4517-96fc-1ee7595457fb	965d7152-3845-4356-9bdb-a49915990331	100.0000	49e397e2-59b3-40d4-925b-25636da0e306	0.0392		t	2025-10-04 20:50:37.397053+00	2025-10-04 20:50:37.397053+00
2c47cf4d-373d-4a97-9665-57947adfe7b0	550ddedf-1e97-4517-96fc-1ee7595457fb	688756f4-f121-46ad-90b5-5efebc4fc6b0	125.0000	49e397e2-59b3-40d4-925b-25636da0e306	0.0467		t	2025-10-04 20:52:34.404332+00	2025-10-04 20:52:34.404332+00
5f03854d-aecf-4cdc-8938-99f675870e54	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	965d7152-3845-4356-9bdb-a49915990331	0.0000	49e397e2-59b3-40d4-925b-25636da0e306	0.0392		t	2025-10-05 04:11:49.154788+00	2025-10-05 04:11:49.154788+00
2d72bd87-5ce1-4205-b5d4-fecb7f6b2eed	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	688756f4-f121-46ad-90b5-5efebc4fc6b0	0.0000	49e397e2-59b3-40d4-925b-25636da0e306	0.0467		t	2025-10-05 04:11:53.351682+00	2025-10-05 04:11:53.351682+00
5b719c81-b0f6-43eb-97de-ba88aa7d325e	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	32696632-aea0-468a-b10f-650576018f2f	0.0000	49e397e2-59b3-40d4-925b-25636da0e306	0.0350		t	2025-10-05 04:11:58.636353+00	2025-10-05 04:11:58.636353+00
\.


--
-- Data for Name: product_ingredient_quantities; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_ingredient_quantities (id, product_id, ingredient_id, modifier_id, quantity, unit_id, is_active, created_at, updated_at) FROM stdin;
b9ea4b35-651b-4a18-9b0b-d8f7c8c6a2fd	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	688756f4-f121-46ad-90b5-5efebc4fc6b0	4a9122bc-0645-4c18-bc79-2ca8f88e7c5f	50.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:33.303884+00	2025-10-05 04:55:45.761+00
b501340a-ddf2-454c-af97-3c8015f4fc92	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	32696632-aea0-468a-b10f-650576018f2f	4a9122bc-0645-4c18-bc79-2ca8f88e7c5f	50.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:33.373941+00	2025-10-05 04:55:55.355+00
eea4ef87-1483-413e-a50f-e93dfee4b1f8	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	965d7152-3845-4356-9bdb-a49915990331	a55deff2-a347-4e3e-a77a-ea3a3a8aae4c	100.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:33.447421+00	2025-10-05 04:56:08.293+00
3fd00102-7a3a-40ec-9d00-2024677cf142	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	688756f4-f121-46ad-90b5-5efebc4fc6b0	a55deff2-a347-4e3e-a77a-ea3a3a8aae4c	100.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:33.518798+00	2025-10-05 04:56:11.066+00
9555b208-b2ec-4ee4-a069-f77c2ab3edf1	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	32696632-aea0-468a-b10f-650576018f2f	a55deff2-a347-4e3e-a77a-ea3a3a8aae4c	100.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:33.612495+00	2025-10-05 04:56:13.521+00
ea678c92-b6a5-46a9-b314-954a588fbd27	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	965d7152-3845-4356-9bdb-a49915990331	10b58804-a05d-4ada-be00-94869d7f723a	150.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:33.690883+00	2025-10-05 04:56:18.165+00
f43ac371-185b-4811-a40d-6a967145eee8	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	688756f4-f121-46ad-90b5-5efebc4fc6b0	10b58804-a05d-4ada-be00-94869d7f723a	150.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:33.773499+00	2025-10-05 04:56:21.103+00
494f46c9-a87b-4eef-80df-58f933c0a3c5	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	32696632-aea0-468a-b10f-650576018f2f	10b58804-a05d-4ada-be00-94869d7f723a	150.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:33.861063+00	2025-10-05 04:56:24.217+00
e51f4d8f-30f3-4f00-9d3f-fadde6e3b8a4	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	688756f4-f121-46ad-90b5-5efebc4fc6b0	f369ddce-c708-4a01-9e26-c23cb21b589c	200.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:34.038413+00	2025-10-05 04:56:29.958+00
7d393973-00fe-4029-b0dd-90cee0c586ab	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	32696632-aea0-468a-b10f-650576018f2f	f369ddce-c708-4a01-9e26-c23cb21b589c	200.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:34.109024+00	2025-10-05 04:56:31.874+00
50ab7587-d5e5-4e4a-a9bb-997354fdc924	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	965d7152-3845-4356-9bdb-a49915990331	f369ddce-c708-4a01-9e26-c23cb21b589c	200.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:33.940822+00	2025-10-05 04:59:00.332+00
5f8e98ac-4c99-432f-9ade-53f056cfaf97	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	965d7152-3845-4356-9bdb-a49915990331	4a9122bc-0645-4c18-bc79-2ca8f88e7c5f	50.000	49e397e2-59b3-40d4-925b-25636da0e306	t	2025-10-05 04:46:33.214812+00	2025-10-05 04:59:19.843+00
\.


--
-- Data for Name: product_modifier_group_modifiers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_modifier_group_modifiers (id, group_id, modifier_id, sort_order, is_active, created_at) FROM stdin;
bbfa3bd5-73e8-492c-a38f-ca8302644c5c	7274bd0a-79c2-4048-bd6a-96886251a790	2fc9374e-f797-4307-b453-81fa38156c26	0	t	2025-10-02 05:56:58.957859+00
4c7e44e1-5b2d-43f1-a111-a52c55592595	d251f213-cbd3-4891-acb7-8c0a28d632f2	4a9122bc-0645-4c18-bc79-2ca8f88e7c5f	0	t	2025-10-05 02:49:38.737767+00
4fd74cd2-86a4-4678-925d-6359f544f380	d251f213-cbd3-4891-acb7-8c0a28d632f2	a55deff2-a347-4e3e-a77a-ea3a3a8aae4c	1	t	2025-10-05 02:49:38.737767+00
bc564142-8ea1-4d85-8bd0-0f723f0bdb75	d251f213-cbd3-4891-acb7-8c0a28d632f2	10b58804-a05d-4ada-be00-94869d7f723a	2	t	2025-10-05 02:49:38.737767+00
f74ce087-54f7-4ecd-b2ca-0f1230116b79	d251f213-cbd3-4891-acb7-8c0a28d632f2	f369ddce-c708-4a01-9e26-c23cb21b589c	3	t	2025-10-05 02:49:38.737767+00
\.


--
-- Data for Name: product_modifier_group_relations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_modifier_group_relations (id, product_id, group_id, min_selections, max_selections, is_required, sort_order, is_active, created_at, tenant_id) FROM stdin;
5c5b666b-f95a-4197-84cd-0411387c0981	550ddedf-1e97-4517-96fc-1ee7595457fb	7274bd0a-79c2-4048-bd6a-96886251a790	\N	\N	\N	0	t	2025-10-05 03:44:02.845261+00	32aac50b-6385-4722-9471-4276036ac600
bc71d92b-2769-41d9-b82f-f9d924f2b290	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	d251f213-cbd3-4891-acb7-8c0a28d632f2	\N	\N	\N	0	t	2025-10-17 05:41:30.961425+00	32aac50b-6385-4722-9471-4276036ac600
92ce2243-0d87-4ffc-90d5-a3b056ecf480	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	7274bd0a-79c2-4048-bd6a-96886251a790	\N	\N	\N	0	t	2025-10-17 05:41:36.857791+00	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: product_modifier_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_modifier_groups (id, name_pt, name_en, name_es, description_pt, description_en, description_es, min_selections, max_selections, is_required, sort_order, is_active, created_at, updated_at, tenant_id, selection_type, modifier_type) FROM stdin;
d251f213-cbd3-4891-acb7-8c0a28d632f2	Tamanhos da Pizza	Pizza Sizes	Tamanhos da Pizza				1	1	t	0	t	2025-10-04 20:57:30.368966+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600	single	single_choice
7274bd0a-79c2-4048-bd6a-96886251a790	Adicionais Doce	Adicionais Doce	Adicionais Doce				0	2	f	0	t	2025-10-01 22:44:45.839177+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600	multiple	quantity_based
\.


--
-- Data for Name: product_modifier_prices; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_modifier_prices (id, product_id, modifier_id, price_adjustment, price_adjustment_type, is_active, created_at, updated_at) FROM stdin;
1b2713af-2cf2-4ca2-8726-32b3df8e8715	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	10b58804-a05d-4ada-be00-94869d7f723a	20.00	fixed	t	2025-10-05 03:35:25.488751+00	2025-10-05 03:35:23.045+00
470e4840-3bd1-4c1d-bf9a-7095d3e64d3e	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	f369ddce-c708-4a01-9e26-c23cb21b589c	30.00	fixed	t	2025-10-05 03:35:27.98615+00	2025-10-05 03:35:25.527+00
6dc1398b-4727-49c4-b1e8-013de92fac31	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	a55deff2-a347-4e3e-a77a-ea3a3a8aae4c	11.00	fixed	t	2025-10-05 03:34:53.553457+00	2025-10-11 06:28:28.63+00
0211f013-f323-42aa-935f-f1188fce6071	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	4a9122bc-0645-4c18-bc79-2ca8f88e7c5f	5.00	fixed	t	2025-10-05 03:34:46.487481+00	2025-10-11 07:08:18.88+00
\.


--
-- Data for Name: product_modifiers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_modifiers (id, name_pt, name_en, name_es, description_pt, description_en, description_es, price_adjustment, price_adjustment_type, has_stock, stock_quantity, is_available, image_url, is_default, sort_order, is_active, sankhya_code, sankhya_product_id, created_at, updated_at, ingredient_id, use_ingredient_stock, ingredient_quantity, ingredient_unit_id, tenant_id) FROM stdin;
2fc9374e-f797-4307-b453-81fa38156c26	Bacon	Bacon	Bacon				1.00	fixed	f	0	t		f	0	t	\N	\N	2025-10-02 05:56:39.649586+00	2025-10-05 20:13:42.530886+00	\N	f	1.000	\N	32aac50b-6385-4722-9471-4276036ac600
4a9122bc-0645-4c18-bc79-2ca8f88e7c5f	Pequena	Small	Pequena				0.00	fixed	f	0	t		f	0	t	\N	\N	2025-10-04 20:58:53.141606+00	2025-10-05 20:13:42.530886+00	\N	f	1.000	\N	32aac50b-6385-4722-9471-4276036ac600
a55deff2-a347-4e3e-a77a-ea3a3a8aae4c	Média	Average	Média				10.00	fixed	f	0	t		f	0	t	\N	\N	2025-10-04 20:59:43.711512+00	2025-10-05 20:13:42.530886+00	\N	f	1.000	\N	32aac50b-6385-4722-9471-4276036ac600
10b58804-a05d-4ada-be00-94869d7f723a	Grande	Big	Grande				20.00	fixed	f	0	t		f	0	t	\N	\N	2025-10-04 21:00:11.22599+00	2025-10-05 20:13:42.530886+00	\N	f	1.000	\N	32aac50b-6385-4722-9471-4276036ac600
f369ddce-c708-4a01-9e26-c23cb21b589c	Gigante	Giant	Gigante				30.00	fixed	f	0	t		f	0	t	\N	\N	2025-10-04 21:00:40.817726+00	2025-10-05 20:13:42.530886+00	\N	f	1.000	\N	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: product_prices; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_prices (id, product_id, price, compare_price, cost_price, currency, is_promotional, promotional_price, promotional_start_date, promotional_end_date, created_at, updated_at, discount_percentage, is_on_sale, sale_start_date, sale_end_date, sankhya_promotion_number, sankhya_company_code, discount_amount, discount_type) FROM stdin;
7a502cee-7db1-4148-a351-8e43e571cc3b	550e8400-e29b-41d4-a716-446655440003	100.00	90.00	\N	BRL	f	\N	\N	\N	2025-09-23 03:56:08.385917+00	2025-09-23 03:56:08.385917+00	0.00	f	\N	\N	\N	\N	\N	percentage
13916adc-0d3f-4c37-a60c-9508acbfe1d9	550e8400-e29b-41d4-a716-446655440004	120.00	100.00	\N	BRL	t	100.00	\N	\N	2025-09-23 04:08:06.646511+00	2025-09-23 04:08:06.646511+00	0.00	f	\N	\N	\N	\N	\N	percentage
a1ce9b69-8bfb-4e5b-8147-bd33ecc67c11	6ea02fe9-3412-4b77-89e3-62d3d3a8d85e	15.00	15.60	7.80	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 20:46:01.634564+00	0.00	f	\N	\N	\N	\N	\N	percentage
8bcbf1b6-8ef3-4078-8e17-a0bea0e4c19e	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	0.00	\N	0.00	BRL	f	\N	\N	\N	2025-10-04 21:01:51.520022+00	2025-10-05 04:59:21.565997+00	0.00	f	\N	\N	\N	\N	\N	percentage
cdc4ced3-9e89-4d04-bf01-7113b6b20e50	ad5069c4-309d-49ad-b310-59df31cc6bf6	1.00	\N	\N	BRL	f	\N	\N	\N	2025-10-04 00:14:52.296541+00	2025-10-04 00:58:17.152256+00	0.00	f	\N	\N	\N	\N	\N	percentage
6047acf0-bc0e-4b4b-b533-95aeaffed2fd	640f22f1-4252-4c0b-b8ef-f6be0a76a702	4.00	\N	2.40	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
198a3f42-cc8b-4508-8de4-f3a765344db6	b74603fc-ce69-4e5d-86a1-b93becc99c77	8.00	\N	4.80	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
5d8a5e31-2067-4720-95fb-edae080a33ef	1e8ff89d-d80b-4b05-bec9-4ed2be428d7a	8.00	\N	4.80	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
50b84216-eddf-4056-9720-36b1350d4c8b	59a82fce-695b-4c06-aef0-555c424eda27	9.00	\N	5.40	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
0795a5ce-be41-44d1-9ed2-222c5f6bd49d	7d7c9294-fc61-480e-90f5-c493f529f2fa	10.00	12.00	6.00	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
e954cf63-d534-46e3-9607-1315f6aebb6d	98675766-1503-4bf4-af77-4820a704b7ce	7.00	\N	4.20	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
0e942001-4fb7-43da-a2bc-23df1c524600	cffe4d41-9a04-4803-b030-e10dba25bc5f	7.00	\N	4.20	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
6df1330b-5000-4d32-8b5b-88b0eb25c620	8edf6a5d-8677-4a2c-bb32-d4128acd0d1c	8.00	\N	4.80	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
39c9b6c6-5e6e-454d-a7aa-9835a00278e0	1c54e991-eb65-42c2-9311-85d1662d90b7	8.00	\N	4.80	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
bebf453d-6999-4a4e-a523-660f8f42df87	eba51710-95bd-4b97-a078-6d3cd3ab5bf5	6.00	\N	3.60	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
2ad94c03-8dab-4686-985b-92b893912d2f	bbb90eb2-f86a-4528-967c-705b35da38af	6.00	\N	3.60	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
8c60b410-90a7-48c1-98cc-2aa5e8daea71	e67542a6-ac4d-4799-b4d6-7321440a8d0b	5.00	\N	3.00	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
539a754a-575f-4482-8b31-088a0e3dc711	4a34c1db-f002-4a2b-a20e-4a1159cf5a92	5.00	\N	3.00	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
f4af942d-5939-4ecd-b5c0-6cd36a895d63	524b22db-64f4-475d-a7cc-ab6a2de30f6a	6.00	\N	3.60	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
ca00bb8e-d76b-4f9c-9cc8-05bd335c20c0	2cdfc10c-0a11-4009-aed3-f53a4552fc1a	5.00	\N	3.00	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
b5f834b3-ef44-46c2-930e-5ecc48e0e4e7	ff658292-5832-462a-9086-f8e3b004c0f1	12.00	14.40	7.20	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
45e3a75b-0eec-48bd-a05d-8415c3a01b62	eb4e76be-d68a-4095-8028-1764645e3dc9	8.00	\N	4.80	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
79ebc2fc-5337-4fda-9a7a-41a2642e9ba7	fcafc3a6-0a0d-4707-8704-326f52220505	3.00	\N	1.80	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 06:05:01.547157+00	0.00	f	\N	\N	\N	\N	\N	percentage
95020bca-ec33-4543-9ace-5a633905ee33	99b0314e-4080-493b-883f-bc92bf88f59a	6.00	\N	5000.00	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 07:26:56.685211+00	0.00	f	\N	\N	\N	\N	\N	percentage
b9ff56a0-3103-4e44-afba-c48de8657efa	550ddedf-1e97-4517-96fc-1ee7595457fb	18.00	21.60	9.76	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-05 03:44:02.564698+00	0.00	f	\N	\N	\N	\N	\N	percentage
cc9b02a9-2f49-40e6-a47d-3dc776eec423	9f32b9d0-4a16-4bce-ab97-49e4b5c4aa93	11.00	13.20	6.60	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 20:41:01.503706+00	0.00	f	\N	\N	\N	\N	\N	percentage
fdf5beb4-c612-4dc0-af91-a3ac9d0ce393	17a21b3d-b944-44b6-b6f0-0e3644cdd49b	12.00	14.40	7.20	BRL	f	\N	\N	\N	2025-10-04 06:05:01.547157+00	2025-10-04 20:42:51.222238+00	0.00	f	\N	\N	\N	\N	\N	percentage
\.


--
-- Data for Name: product_stock; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_stock (id, product_id, quantity, reserved_quantity, min_stock_level, max_stock_level, track_stock, allow_backorder, stock_status, location, created_at, updated_at, tenant_id) FROM stdin;
d8d7d93d-db78-4f48-a0b8-f9418c6121c4	550e8400-e29b-41d4-a716-446655440003	0	0	0	\N	t	f	out_of_stock	\N	2025-09-23 03:56:08.612606+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
d8134bc9-5cb0-44ee-967b-5bcad05784d6	550e8400-e29b-41d4-a716-446655440004	0	0	0	\N	t	f	out_of_stock	\N	2025-09-23 04:08:06.85296+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
dd28e603-ff93-4ca4-856d-94aebeb31bdb	ad5069c4-309d-49ad-b310-59df31cc6bf6	0	0	0	\N	t	f	out_of_stock	\N	2025-10-04 00:14:52.576759+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
9ba8b865-f1db-44ac-98db-041389acaf7c	640f22f1-4252-4c0b-b8ef-f6be0a76a702	12	0	0	\N	t	f	in_stock	\N	2025-10-04 19:18:48.558732+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
8af22c24-cdfb-4d5f-a2c4-7b42026e3243	99b0314e-4080-493b-883f-bc92bf88f59a	20	0	0	\N	t	f	in_stock	\N	2025-10-04 19:18:48.364848+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
2c94ba1d-b58d-45ee-989c-aacd79d13a4a	2cdfc10c-0a11-4009-aed3-f53a4552fc1a	22	0	0	\N	t	f	in_stock	\N	2025-10-04 19:24:49.230247+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
b4077b09-c934-458d-a5e1-f2f50d637a4c	9f32b9d0-4a16-4bce-ab97-49e4b5c4aa93	0	0	0	\N	t	f	in_stock	\N	2025-10-04 20:40:37.731366+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
85be179f-c2b7-4a79-8f64-3a9256077707	17a21b3d-b944-44b6-b6f0-0e3644cdd49b	0	0	0	\N	t	f	in_stock	\N	2025-10-04 20:29:34.592534+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
b1fe25e7-a749-4ba3-8a81-e61d30591c16	550ddedf-1e97-4517-96fc-1ee7595457fb	0	0	0	\N	t	f	in_stock	\N	2025-10-04 20:28:49.624952+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
78ad00b6-f4b7-4cd0-828e-5e7ca1c58ea9	6ea02fe9-3412-4b77-89e3-62d3d3a8d85e	0	0	0	\N	t	f	in_stock	\N	2025-10-04 20:46:01.800321+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
aebb08ed-3060-45cf-9675-c45c2ca0e308	b04dbadf-fc50-42c5-8155-b12d4cefc6b8	0	0	0	\N	t	f	in_stock	\N	2025-10-04 21:01:51.629162+00	2025-10-05 20:13:42.530886+00	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: product_stock_batches; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_stock_batches (id, product_id, movement_id, batch_number, purchase_date, expiry_date, original_quantity, current_quantity, unit_cost, supplier_id, is_active, created_at, updated_at, tenant_id) FROM stdin;
\.


--
-- Data for Name: product_stock_movements; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_stock_movements (id, product_id, movement_type, quantity, unit_cost, total_cost, reference_number, supplier_id, user_id, notes, movement_date, created_at, tenant_id) FROM stdin;
\.


--
-- Data for Name: product_variants; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.product_variants (id, product_id, name_pt, name_en, name_es, sku, price, compare_price, cost_price, size, weight, dimensions, serves_people, stock_quantity, track_stock, is_default, is_available, sort_order, sankhya_code, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: products; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.products (id, name_pt, name_en, name_es, description_pt, description_en, description_es, short_description_pt, short_description_en, short_description_es, sku, barcode, brand, model, weight, dimensions, material, color, size, tags, is_digital, is_featured, is_published, is_active, meta_title_pt, meta_title_en, meta_title_es, meta_description_pt, meta_description_en, meta_description_es, sankhya_code, sankhya_synced, sankhya_cod_prod, sankhya_cod_vol, sankhya_ref_forn, sankhya_marca, sankhya_uso_prod, sankhya_ncm, created_at, updated_at, brand_id, price, product_category_id, is_best_seller, image_url, is_produced, tenant_id, product_type, unit) FROM stdin;
550e8400-e29b-41d4-a716-446655440004	Pastilha de Freio TRW GDB1632	Brake Pad TRW GDB1632	Pastilla de Freno TRW GDB1632	<p>Pastilhas de freio de alta qualidade para segurança e durabilidade.</p>	High quality brake pads for safety and durability.	Pastillas de freno de alta calidad para seguridad y durabilidad.	Pastilhas premium	Premium brake pads	Pastillas premium	PASTILHA-001	\N	TRW	GDB1632	0.000	\N	\N	\N	\N	{}	f	t	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	668bac8e-5e32-4ab3-93a2-28ca02e6c18c	125.00	583efe49-e7c0-4615-b1d4-8ad1d2923c93	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	ecommerce	un
550e8400-e29b-41d4-a716-446655440002	Óleo 5W30 Mobil 1 ESP 5L	Oil 5W30 Mobil 1 ESP 5L	Aceite 5W30 Mobil 1 ESP 5L	Óleo sintético de alta performance para motores modernos, oferecendo proteção superior.	High performance synthetic oil for modern engines, offering superior protection.	Aceite sintético de alto rendimiento para motores modernos, ofreciendo protección superior.	Óleo sintético premium	Premium synthetic oil	Aceite sintético premium	OLEO-001	\N	Mobil	1 ESP	\N	\N	\N	\N	\N	\N	f	t	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	ff135800-1de3-4e84-8ce4-79a6e2d02234	89.90	1af974ee-02a3-402e-95da-06dda15a7feb	t	\N	\N	32aac50b-6385-4722-9471-4276036ac600	ecommerce	un
750e8400-e29b-41d4-a716-446655440001	Smartphone Galaxy	Galaxy Smartphone	Smartphone Galaxy	Smartphone moderno	Modern smartphone	Smartphone moderno	\N	\N	\N	GALAXY-001	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-09-18 12:34:15.999675+00	2025-10-05 20:13:42.530886+00	650e8400-e29b-41d4-a716-446655440001	999.99	\N	t	\N	\N	32aac50b-6385-4722-9471-4276036ac600	ecommerce	un
750e8400-e29b-41d4-a716-446655440002	iPhone 15	iPhone 15	iPhone 15	Último iPhone	Latest iPhone	Último iPhone	\N	\N	\N	IPHONE-15-001	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-09-18 12:34:15.999675+00	2025-10-05 20:13:42.530886+00	650e8400-e29b-41d4-a716-446655440002	1299.99	\N	t	\N	\N	32aac50b-6385-4722-9471-4276036ac600	ecommerce	un
750e8400-e29b-41d4-a716-446655440003	Tênis Nike	Nike Shoes	Zapatos Nike	Tênis esportivo	Sports shoes	Zapatos deportivos	\N	\N	\N	NIKE-SHOES-001	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-09-18 12:34:15.999675+00	2025-10-05 20:13:42.530886+00	650e8400-e29b-41d4-a716-446655440003	299.99	\N	t	\N	\N	32aac50b-6385-4722-9471-4276036ac600	ecommerce	un
550ddedf-1e97-4517-96fc-1ee7595457fb	Pastel de Camarão	Shrimp Pastry	Empanada de Camarón	Pastel especial recheado com camarões frescos ao molho	Special pastry filled with fresh shrimp in sauce	Empanada especial rellena de camarones frescos en salsa	Camarões frescos	\N	\N	PAST-003	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	18.00	1e269b6e-f14a-46c8-9db1-8e82a3ff833e	f	\N	t	32aac50b-6385-4722-9471-4276036ac600	delivery	un
6ea02fe9-3412-4b77-89e3-62d3d3a8d85e	Pastel de Frango com Catupiry	Chicken and Cream Cheese Pastry	Empanada de Pollo con Crema	Pastel recheado com frango desfiado e catupiry cremoso	Pastry filled with shredded chicken and creamy catupiry cheese	Empanada rellena de pollo desmenuzado y queso crema	Frango e catupiry	\N	\N	PAST-002	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	13.00	1e269b6e-f14a-46c8-9db1-8e82a3ff833e	f	\N	t	32aac50b-6385-4722-9471-4276036ac600	delivery	kg
59a82fce-695b-4c06-aef0-555c424eda27	Pastel de Frango	Chicken Pastry	Empanada de Pollo	Pastel recheado com frango desfiado temperado	\N	\N	Frango desfiado	\N	\N	PAST-007	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	9.00	5340ca95-32ef-43a7-9097-98ce2ba8794e	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	kg
eba51710-95bd-4b97-a078-6d3cd3ab5bf5	Coxinha de Frango	Chicken Croquette	Croqueta de Pollo	Coxinha tradicional recheada com frango	\N	\N	Frango desfiado	\N	\N	SALG-001	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	6.00	6e374778-0c3e-4845-883c-39159e0fcbcc	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	kg
e67542a6-ac4d-4799-b4d6-7321440a8d0b	Bolinha de Queijo	Cheese Ball	Bolita de Queso	Bolinha crocante recheada com queijo	\N	\N	Queijo cremoso	\N	\N	SALG-003	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	5.00	6e374778-0c3e-4845-883c-39159e0fcbcc	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	kg
524b22db-64f4-475d-a7cc-ab6a2de30f6a	Risoles de Carne	Beef Rissole	Rissole de Carne	Risoles empanado recheado com carne	\N	\N	Carne moída	\N	\N	SALG-005	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	6.00	6e374778-0c3e-4845-883c-39159e0fcbcc	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	kg
17a21b3d-b944-44b6-b6f0-0e3644cdd49b	Pastel de Carne com Queijo	Beef and Cheese Pastry	Empanada de Carne con Queso	Delicioso pastel recheado com carne moída temperada e queijo derretido	Delicious pastry filled with seasoned ground beef and melted cheese	Deliciosa empanada rellena de carne molida sazonada y queso derretido	Carne moída e queijo	\N	\N	PAST-001	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	12.00	1e269b6e-f14a-46c8-9db1-8e82a3ff833e	f	\N	t	32aac50b-6385-4722-9471-4276036ac600	delivery	kg
cffe4d41-9a04-4803-b030-e10dba25bc5f	Pastel de Banana com Canela	Banana Cinnamon Pastry	Empanada de Plátano con Canela	Pastel doce com banana e canela	\N	\N	Banana e canela	\N	\N	PAST-D02	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	7.00	52e9c7b1-7821-4e9d-966d-8f8ebcab54ce	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	kg
ff658292-5832-462a-9086-f8e3b004c0f1	Refrigerante 2L	Soda 2L	Refresco 2L	Refrigerante garrafa de 2 litros	\N	\N	Coca-Cola, Guaraná, Fanta	\N	\N	BEB-002	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	12.00	d27ac5d2-c7a4-4c04-82ab-81dd375d998f	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	l
99b0314e-4080-493b-883f-bc92bf88f59a	Cerveja Lata 350ml	Beer Can 350ml	Cerveza Lata 350ml	Cerveja gelada em lata	\N	\N	Marcas variadas	\N	\N	BEB-005	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	6.00	d27ac5d2-c7a4-4c04-82ab-81dd375d998f	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	ml
2cdfc10c-0a11-4009-aed3-f53a4552fc1a	Refrigerante Lata 350ml	Soda Can 350ml	Refresco Lata 350ml	Refrigerante gelado em lata de 350ml	\N	\N	Coca-Cola, Guaraná, Fanta	\N	\N	BEB-001	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	5.00	d27ac5d2-c7a4-4c04-82ab-81dd375d998f	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	ml
640f22f1-4252-4c0b-b8ef-f6be0a76a702	Café Expresso	Espresso Coffee	Café Expreso	Café expresso tradicional	\N	\N	Café puro	\N	\N	BEB-006	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	4.00	d27ac5d2-c7a4-4c04-82ab-81dd375d998f	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	pct
ad5069c4-309d-49ad-b310-59df31cc6bf6	Dog									1	\N	\N	\N	0.000	\N	\N	\N	\N	{}	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 00:14:51.989946+00	2025-10-05 20:13:42.530886+00	\N	0.00	7504f6a0-4729-497f-8dbc-9795cd52157b	f	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/images/1758136483055.jpeg	\N	32aac50b-6385-4722-9471-4276036ac600	ecommerce	un
550e8400-e29b-41d4-a716-446655440001	Pneu Aro 14 185/65 R14 Firestone Destination LE3	Tire Rim 14 185/65 R14 Firestone Destination LE3	Neumático Aro 14 185/65 R14 Firestone Destination LE3	Pneu de alta qualidade para uso urbano e rodoviário, oferecendo excelente aderência e durabilidade.	High quality tire for urban and highway use, offering excellent grip and durability.	Neumático de alta calidad para uso urbano y carretero, ofreciendo excelente agarre y durabilidad.	Pneu premium para uso urbano	Premium tire for urban use	Neumático premium para uso urbano	PNEU-001	\N	Firestone	Destination LE3	\N	\N	\N	\N	\N	\N	f	t	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	815482c4-ef36-4852-8ee5-2a62e834d0a4	285.90	d937813e-c697-48a1-a2e8-f6ae84070322	t	\N	\N	32aac50b-6385-4722-9471-4276036ac600	ecommerce	un
550e8400-e29b-41d4-a716-446655440006	Amortecedor Bilstein B4 19-047449	Shock Absorber Bilstein B4 19-047449	Amortiguador Bilstein B4 19-047449	Amortecedor de alta qualidade para conforto e segurança.	High quality shock absorber for comfort and safety.	Amortiguador de alta calidad para comodidad y seguridad.	Amortecedor premium	Premium shock absorber	Amortiguador premium	AMORTECEDOR-001	\N	Bilstein	B4	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	19abe545-e4ed-48b5-9778-e99e64cfab95	180.00	a6b13115-70dd-48c4-a8ef-1738e4fb1ec3	t	\N	\N	32aac50b-6385-4722-9471-4276036ac600	ecommerce	un
550e8400-e29b-41d4-a716-446655440003	Filtro de Ar Mann-Filter C 25 018	Air Filter Mann-Filter C 25 018	Filtro de Aire Mann-Filter C 25 018	<p>Filtro de ar de alta qualidade para proteção do motor contra impurezas.</p>	High quality air filter for engine protection against impurities.	Filtro de aire de alta calidad para protección del motor contra impurezas.	Filtro de ar premium	Premium air filter	Filtro de aire premium	FILTRO-001	\N	Mann-Filter	C 25 018	0.000	\N	\N	\N	\N	{}	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	41529029-1f25-4c01-ba16-58745a8687d2	45.50	7504f6a0-4729-497f-8dbc-9795cd52157b	t	\N	\N	32aac50b-6385-4722-9471-4276036ac600	ecommerce	un
7d7c9294-fc61-480e-90f5-c493f529f2fa	Pastel de Pizza	Pizza Pastry	Empanada de Pizza	Pastel recheado com mussarela, presunto e tomate	\N	\N	Mussarela, presunto e tomate	\N	\N	PAST-008	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	10.00	5340ca95-32ef-43a7-9097-98ce2ba8794e	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	un
98675766-1503-4bf4-af77-4820a704b7ce	Pastel de Chocolate	Chocolate Pastry	Empanada de Chocolate	Pastel doce recheado com chocolate cremoso	\N	\N	Chocolate cremoso	\N	\N	PAST-D01	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	7.00	52e9c7b1-7821-4e9d-966d-8f8ebcab54ce	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	un
8edf6a5d-8677-4a2c-bb32-d4128acd0d1c	Pastel de Doce de Leite	Dulce de Leche Pastry	Empanada de Dulce de Leche	Pastel recheado com doce de leite cremoso	\N	\N	Doce de leite	\N	\N	PAST-D03	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	8.00	52e9c7b1-7821-4e9d-966d-8f8ebcab54ce	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	un
1c54e991-eb65-42c2-9311-85d1662d90b7	Pastel Romeu e Julieta	Romeo and Juliet Pastry	Empanada Romeo y Julieta	Pastel com goiabada e queijo	\N	\N	Goiabada e queijo	\N	\N	PAST-D04	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	8.00	52e9c7b1-7821-4e9d-966d-8f8ebcab54ce	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	un
bbb90eb2-f86a-4528-967c-705b35da38af	Kibe	Kibbeh	Kibbeh	Kibe frito recheado com carne temperada	\N	\N	Carne moída	\N	\N	SALG-002	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	6.00	6e374778-0c3e-4845-883c-39159e0fcbcc	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	un
4a34c1db-f002-4a2b-a20e-4a1159cf5a92	Enroladinho de Salsicha	Sausage Roll	Enrollado de Salchicha	Massa folhada com salsicha	\N	\N	Salsicha e massa folhada	\N	\N	SALG-004	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	5.00	6e374778-0c3e-4845-883c-39159e0fcbcc	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	un
eb4e76be-d68a-4095-8028-1764645e3dc9	Suco Natural 500ml	Natural Juice 500ml	Jugo Natural 500ml	Suco natural de frutas	\N	\N	Laranja, Limão, Maracujá	\N	\N	BEB-003	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	8.00	d27ac5d2-c7a4-4c04-82ab-81dd375d998f	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	un
fcafc3a6-0a0d-4707-8704-326f52220505	Água Mineral 500ml	Mineral Water 500ml	Agua Mineral 500ml	Água mineral gelada	\N	\N	Com ou sem gás	\N	\N	BEB-004	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	3.00	d27ac5d2-c7a4-4c04-82ab-81dd375d998f	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	un
9f32b9d0-4a16-4bce-ab97-49e4b5c4aa93	Pastel de Palmito	Heart of Palm Pastry	Empanada de Palmito	Pastel vegetariano recheado com palmito refogado	Vegetarian pastry filled with sautéed heart of palm	Empanada vegetariana rellena de palmito salteado	Palmito refogado	\N	\N	PAST-004	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	11.00	1e269b6e-f14a-46c8-9db1-8e82a3ff833e	f	\N	t	32aac50b-6385-4722-9471-4276036ac600	delivery	un
b04dbadf-fc50-42c5-8155-b12d4cefc6b8	Marguerita	Marguerita	Marguerita	A melhor pizza			\N	\N	\N	PIZZA-001	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 21:01:51.363451+00	2025-10-05 20:13:42.530886+00	\N	0.00	2f4a529a-fcfc-41db-8fd6-1a73ddc1af34	f	\N	t	32aac50b-6385-4722-9471-4276036ac600	delivery	un
b74603fc-ce69-4e5d-86a1-b93becc99c77	Pastel de Carne	Beef Pastry	Empanada de Carne	Pastel tradicional recheado com carne moída temperada	\N	\N	Carne moída	\N	\N	PAST-005	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	8.00	5340ca95-32ef-43a7-9097-98ce2ba8794e	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	kg
1e8ff89d-d80b-4b05-bec9-4ed2be428d7a	Pastel de Queijo	Cheese Pastry	Empanada de Queso	Pastel recheado com queijo mussarela derretido	\N	\N	Queijo mussarela	\N	\N	PAST-006	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	f	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-10-04 06:05:01.547157+00	2025-10-05 20:13:42.530886+00	\N	8.00	5340ca95-32ef-43a7-9097-98ce2ba8794e	f	\N	\N	32aac50b-6385-4722-9471-4276036ac600	delivery	kg
550e8400-e29b-41d4-a716-446655440005	Bateria Varta Blue Dynamic E11 60Ah	Battery Varta Blue Dynamic E11 60Ah	Batería Varta Blue Dynamic E11 60Ah	Bateria automotiva de alta qualidade com tecnologia de ponta.	High quality automotive battery with cutting-edge technology.	Batería automotriz de alta calidad con tecnología de vanguardia.	Bateria premium	Premium battery	Batería premium	BATERIA-001	\N	Varta	Blue Dynamic E11	\N	\N	\N	\N	\N	\N	f	t	t	t	\N	\N	\N	\N	\N	\N	\N	f	\N	UN	\N	\N	B	\N	2025-09-20 00:58:41.127127+00	2025-10-05 20:13:42.530886+00	4bdd2c7a-457a-4dab-bdd4-aeec273852fd	280.00	3cd21aef-92a0-4c61-8620-77c15656f546	t	\N	\N	32aac50b-6385-4722-9471-4276036ac600	ecommerce	un
\.


--
-- Data for Name: profiles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.profiles (id, created_at, name, description) FROM stdin;
ac408e22-ddc3-42b8-94f7-cebdd0a6a51b	2025-09-19 23:04:31.703698+00	admin	Administrador do sistema - acesso total
5bcd3877-1891-4b5c-b59c-2ad350992f37	2025-09-19 23:04:31.703698+00	moderator	Moderador - pode gerenciar conteúdo e avaliações
c23a8970-207b-4a96-87ab-ddf173ddfaaf	2025-09-19 23:04:31.703698+00	customer	Cliente padrão
adc5600f-26ee-40d8-b3a5-08777172c230	2025-09-19 23:04:31.703698+00	vip_customer	Cliente VIP - benefícios especiais
2c28d8bb-252b-422b-960c-bd1fd36bfd0e	2025-10-06 11:40:52.564818+00	Cliente	Usuário que consome serviços e produtos
f41e39c6-37d8-4262-9da3-9c1a0e464e44	2025-10-06 11:40:52.564818+00	Prestador	Prestador de serviços (groomer, vet, trainer)
c85185ec-82f6-4df8-a22c-7100b5b4bd23	2025-10-06 11:40:52.564818+00	Funcionário	Funcionário do estabelecimento
b91b0d85-1e30-46a6-91ef-e19588ff91c1	2025-10-06 11:40:52.564818+00	Gerente	Gerente com acesso administrativo limitado
7bf58df1-df6b-4d0c-b93e-2b951c5bb41c	2025-10-06 11:40:52.564818+00	Admin	Administrador com acesso total
2f9b8a3c-128e-472c-b665-edc7ad0351f0	2025-10-06 11:40:52.564818+00	Super Admin	Super administrador do sistema
9c462961-946a-4bca-ba49-cf8435542a9a	2025-10-11 08:10:33.094036+00	delivery_person	Entregador da plataforma
\.


--
-- Data for Name: reviews; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.reviews (id, product_id, user_id, rating, title, comment, is_verified, is_approved, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: search_history; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.search_history (id, user_id, tenant_id, search_term, search_count, last_searched_at, created_at) FROM stdin;
d5e15038-66d4-4523-a6e5-0dcfe498dbee	0cede974-5348-4ec7-93d7-5991f64d7913	32aac50b-6385-4722-9471-4276036ac600	tex	1	2025-10-16 18:56:11.695889+00	2025-10-16 18:56:11.695889+00
cc602a26-6832-4477-8788-f6a4356bcd1a	0cede974-5348-4ec7-93d7-5991f64d7913	32aac50b-6385-4722-9471-4276036ac600	co	1	2025-10-16 18:56:19.994503+00	2025-10-16 18:56:19.994503+00
ed70e57a-b358-4d73-a059-2786e338ff67	0cede974-5348-4ec7-93d7-5991f64d7913	32aac50b-6385-4722-9471-4276036ac600	cox	1	2025-10-16 18:56:20.99765+00	2025-10-16 18:56:20.99765+00
2abb9c2e-ab16-44b0-866a-e35aa2aa2acd	0cede974-5348-4ec7-93d7-5991f64d7913	32aac50b-6385-4722-9471-4276036ac600	carros	2	2025-10-16 19:00:33.771408+00	2025-10-16 19:00:33.520035+00
619c9654-b686-4adf-83d2-6790c3c3d079	0cede974-5348-4ec7-93d7-5991f64d7913	32aac50b-6385-4722-9471-4276036ac600	coxinja	1	2025-10-16 19:13:42.218583+00	2025-10-16 19:13:42.218583+00
b95649cf-f45e-4888-b283-678e767b3c28	0cede974-5348-4ec7-93d7-5991f64d7913	32aac50b-6385-4722-9471-4276036ac600	coxin	2	2025-10-16 19:13:43.062745+00	2025-10-16 19:13:41.367462+00
cb5cc3f4-b8c4-4c2a-ab81-0214e85cb52b	0cede974-5348-4ec7-93d7-5991f64d7913	32aac50b-6385-4722-9471-4276036ac600	coxinh	3	2025-10-16 19:15:43.976354+00	2025-10-16 18:56:22.211318+00
7501b9d8-f147-4def-a8b8-149c657c2e9d	0cede974-5348-4ec7-93d7-5991f64d7913	32aac50b-6385-4722-9471-4276036ac600	coxinha	5	2025-10-16 19:40:13.969062+00	2025-10-16 19:13:44.722115+00
b801883b-61ed-4c00-ac8a-e2620a74d704	0cede974-5348-4ec7-93d7-5991f64d7913	32aac50b-6385-4722-9471-4276036ac600	rouoa	1	2025-10-16 20:05:37.392651+00	2025-10-16 20:05:37.392651+00
\.


--
-- Data for Name: search_terms; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.search_terms (id, tenant_id, term, search_count, is_active, created_at, updated_at) FROM stdin;
19dae790-fc92-4989-b5dc-afa23acffbab	32aac50b-6385-4722-9471-4276036ac600	salgados	80	t	2025-10-16 18:41:47.750022+00	2025-10-16 18:41:47.750022+00
550d9968-a1d4-47d9-b0f3-11d23182eb16	32aac50b-6385-4722-9471-4276036ac600	comida	95	t	2025-10-16 18:41:47.750022+00	2025-10-16 18:41:47.750022+00
9a1b5100-5027-43cc-900c-23811f72238d	32aac50b-6385-4722-9471-4276036ac600	pão	55	t	2025-10-16 18:41:47.750022+00	2025-10-16 18:41:47.750022+00
04f55ae5-cd96-4e49-8030-974a16dfb65b	32aac50b-6385-4722-9471-4276036ac600	refrigerante	75	t	2025-10-16 18:41:47.750022+00	2025-10-16 18:41:47.750022+00
fca21c10-5419-41be-a498-9b3b7a460c88	32aac50b-6385-4722-9471-4276036ac600	bebidas	100	t	2025-10-16 18:41:47.750022+00	2025-10-16 18:41:47.750022+00
84253d44-b793-4f56-878e-854c7f251709	32aac50b-6385-4722-9471-4276036ac600	suco	65	t	2025-10-16 18:41:47.750022+00	2025-10-16 18:41:47.750022+00
462a8867-0743-4cb2-905b-247cf5567c68	32aac50b-6385-4722-9471-4276036ac600	doces	85	t	2025-10-16 18:41:47.750022+00	2025-10-16 18:41:47.750022+00
92f1e3aa-8b41-4824-a076-770f10e48c68	32aac50b-6385-4722-9471-4276036ac600	água	70	t	2025-10-16 18:41:47.750022+00	2025-10-16 18:41:47.750022+00
f9493dde-dfcf-4a62-9044-7fab9b269a89	32aac50b-6385-4722-9471-4276036ac600	café	60	t	2025-10-16 18:41:47.750022+00	2025-10-16 18:41:47.750022+00
ddd4c1d2-81d6-42f9-bbcd-2424cc6f0983	32aac50b-6385-4722-9471-4276036ac600	lanches	90	t	2025-10-16 18:41:47.750022+00	2025-10-16 18:41:47.750022+00
e1093d12-4174-4129-ace6-a85d993db626	32aac50b-6385-4722-9471-4276036ac600	tex	1	t	2025-10-16 18:56:11.695889+00	2025-10-16 18:56:11.695889+00
4cb5df04-7241-4e8e-b790-57fd5b7bb1b7	32aac50b-6385-4722-9471-4276036ac600	co	1	t	2025-10-16 18:56:19.994503+00	2025-10-16 18:56:19.994503+00
06222a1c-52c6-4745-9093-880ff4657328	32aac50b-6385-4722-9471-4276036ac600	cox	1	t	2025-10-16 18:56:20.99765+00	2025-10-16 18:56:20.99765+00
b63c1808-0e77-4dcc-8a4c-d5de0e44fa8e	32aac50b-6385-4722-9471-4276036ac600	carros	2	t	2025-10-16 19:00:33.520035+00	2025-10-16 19:00:33.771408+00
f1a5f4be-51ae-4f50-b4fa-f9bd964773e0	32aac50b-6385-4722-9471-4276036ac600	coxinja	1	t	2025-10-16 19:13:42.218583+00	2025-10-16 19:13:42.218583+00
7a14ef11-dda7-4c3c-a5f8-30790aadf92b	32aac50b-6385-4722-9471-4276036ac600	coxin	2	t	2025-10-16 19:13:41.367462+00	2025-10-16 19:13:43.062745+00
df1ff3a2-4daa-49a2-9cca-2b11b6a702cc	32aac50b-6385-4722-9471-4276036ac600	coxinh	3	t	2025-10-16 18:56:22.211318+00	2025-10-16 19:15:43.976354+00
f999e671-5f93-406c-bef7-ce308f710f59	32aac50b-6385-4722-9471-4276036ac600	coxinha	5	t	2025-10-16 19:13:44.722115+00	2025-10-16 19:40:13.969062+00
2de0bd3f-5fb6-4a61-8496-69f7a7a54dde	32aac50b-6385-4722-9471-4276036ac600	rouoa	1	t	2025-10-16 20:05:37.392651+00	2025-10-16 20:05:37.392651+00
\.


--
-- Data for Name: service_availability; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_availability (id, provider_id, day_of_week, start_time, end_time, is_available, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: service_booking_items; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_booking_items (id, booking_id, service_id, quantity, unit_price, total_price, created_at) FROM stdin;
\.


--
-- Data for Name: service_bookings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_bookings (id, tenant_id, service_id, provider_id, customer_id, customer_name, customer_email, customer_phone, booking_date, start_time, end_time, status, total_price, deposit_paid, payment_status, notes, internal_notes, cancellation_reason, cancelled_at, completed_at, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: service_categories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_categories (id, tenant_id, name_pt, name_en, name_es, description_pt, description_en, description_es, icon, color, sort_order, is_active, created_at, updated_at) FROM stdin;
11ad8d31-1fe4-4e5f-8b31-65c9b69daaac	32aac50b-6385-4722-9471-4276036ac600	Teste	Teste	Teste	Teste	teste	teste	heart	#6366f1	0	t	2025-10-06 21:57:34.655198+00	2025-10-06 21:57:34.655198+00
\.


--
-- Data for Name: service_provider_services; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_provider_services (id, provider_id, service_id, price_override, duration_override, is_available, created_at) FROM stdin;
\.


--
-- Data for Name: service_providers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_providers (id, tenant_id, user_id, name, email, phone, specialties, bio, avatar_url, is_active, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: service_reviews; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.service_reviews (id, booking_id, service_id, provider_id, customer_id, rating, comment, is_public, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: services; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.services (id, tenant_id, category_id, name_pt, name_en, name_es, description_pt, description_en, description_es, price, duration_minutes, requires_booking, is_recurring, max_advance_days, min_advance_hours, max_capacity, is_group_service, requires_deposit, deposit_amount, cancellation_policy, preparation_notes, is_active, sort_order, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: shipping; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.shipping (id, order_id, method, tracking_code, status, estimated_delivery, delivered_at, created_at) FROM stdin;
\.


--
-- Data for Name: shipping_providers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.shipping_providers (id, tenant_id, name, provider_type, is_active, api_credentials, api_endpoint, base_price, price_per_kg, price_per_km, estimated_days_min, estimated_days_max, max_weight_kg, max_dimensions, coverage_ceps, coverage_zones, pickup_start_time, pickup_end_time, pickup_days, freight_calculation_type, calculation_config, created_at, updated_at) FROM stdin;
20f04819-8dc6-42a5-a9ae-2de305b99d68	32aac50b-6385-4722-9471-4276036ac600	Correios	national_postal	t	\N	\N	10.00	0.00	0.00	3	7	30.00	\N	\N	\N	08:00:00	17:00:00	{1,2,3,4,5}	api_based	{"services": ["PAC", "SEDEX", "SEDEX_10"], "api_provider": "correios"}	2025-10-11 00:09:07.833459+00	2025-10-11 00:09:07.833459+00
c5a90b9d-9625-4e9b-a93a-0ad02cb64cf6	32aac50b-6385-4722-9471-4276036ac600	Jadlog	private_courier	t	\N	\N	8.00	0.00	0.00	2	5	30.00	\N	\N	\N	08:00:00	17:00:00	{1,2,3,4,5}	api_based	{"services": ["EXPRESSO", "PACKAGE", "PACKAGE_ECO"], "api_provider": "jadlog"}	2025-10-11 00:09:07.833459+00	2025-10-11 00:09:07.833459+00
d660cda3-2eee-4570-92b2-e69f52f41f39	32aac50b-6385-4722-9471-4276036ac600	Entrega Própria	own_delivery	t	{}	\N	5.00	0.00	1.00	1	2	30.00	\N	\N	\N	08:00:00	17:00:00	{1,2,3,4,5}	per_km	{"inherit_from": "delivery_settings"}	2025-10-11 00:09:07.833459+00	2025-10-11 00:58:37.787166+00
\.


--
-- Data for Name: shipping_services; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.shipping_services (id, shipping_provider_id, name, external_code, base_price, price_per_kg, price_per_km, minimum_price, estimated_days_min, estimated_days_max, max_weight_kg, max_dimensions, service_config, is_active, is_available_weekend, is_available_holiday, created_at, updated_at) FROM stdin;
368a41e6-5b7b-40ac-ba4f-9d964164e61e	20f04819-8dc6-42a5-a9ae-2de305b99d68	PAC	04014	10.00	0.00	0.00	0.00	3	7	30.00	\N	{"service_code": "04014", "correios_service": "PAC"}	t	f	f	2025-10-11 00:09:07.833459+00	2025-10-11 00:09:07.833459+00
7d87a997-83ae-44da-a7c7-b0d7af0eb1da	20f04819-8dc6-42a5-a9ae-2de305b99d68	SEDEX	04065	15.00	0.00	0.00	0.00	1	3	30.00	\N	{"service_code": "04065", "correios_service": "SEDEX"}	t	f	f	2025-10-11 00:09:07.833459+00	2025-10-11 00:09:07.833459+00
08274520-a2ea-4239-9647-242c0e3da6c8	c5a90b9d-9625-4e9b-a93a-0ad02cb64cf6	Expresso	EXPRESSO	8.00	0.00	0.00	0.00	2	4	30.00	\N	{"service_code": "EXPRESSO", "jadlog_service": "EXPRESSO"}	t	f	f	2025-10-11 00:09:07.833459+00	2025-10-11 00:09:07.833459+00
f9315d0b-b274-4849-b15e-1a20ed114058	d660cda3-2eee-4570-92b2-e69f52f41f39	Motoboy	\N	5.00	0.00	0.00	0.00	1	1	30.00	\N	\N	t	f	f	2025-10-11 00:09:07.833459+00	2025-10-11 00:09:07.833459+00
\.


--
-- Data for Name: site_settings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.site_settings (id, key, value, description, category, created_at, updated_at) FROM stdin;
fd3ee01b-8f7f-424a-a8ec-885ba18c7153	header_delivery_phrase	Entrega para todo o Brasil	Frase de entrega no topo do header	header	2025-09-22 19:06:20.542188+00	2025-09-22 19:20:17.841+00
ebfdae88-ce0d-4907-a202-eb150c8a046d	header_phone_number	(11) 99999-9999	Número de telefone no header	header	2025-09-22 19:06:20.542188+00	2025-09-22 19:20:17.922+00
f32a894e-a5ca-4b09-992f-63c7362a57aa	header_right_phrase	Frete grátis acima de R$ 205	Frase do lado direito do header	header	2025-09-22 19:06:20.542188+00	2025-09-22 19:20:18.011+00
9cc439a9-f37f-4076-89c6-a89cd2054e18	header_show_highlights	true	Exibir Destaques no menu	header	2025-09-22 19:06:20.542188+00	2025-09-22 19:20:18.102+00
cb1e3bda-9173-434c-96b9-20349ba83a51	header_show_promotions	true	Exibir Promoções no menu	header	2025-09-22 19:06:20.542188+00	2025-09-22 19:20:18.176+00
81dbbca8-9050-4a7f-9a29-6a140489edac	menu_show_home	true	Exibir item Início no menu	menu	2025-09-22 19:16:03.348081+00	2025-09-22 20:02:39.105+00
54b9b971-b407-409f-9e36-65ab380e363a	menu_show_products	false	Exibir item Produtos no menu	menu	2025-09-22 19:16:03.348081+00	2025-09-22 20:02:39.359+00
0fe960fa-ed4c-4c74-97b3-df371b30aa84	menu_show_about	true	Exibir item Sobre no menu	menu	2025-09-22 19:16:03.348081+00	2025-09-22 20:02:39.539+00
5eb2495f-9bbe-4179-8279-5f50770da2c5	menu_show_contact	true	Exibir item Contato no menu	menu	2025-09-22 19:16:03.348081+00	2025-09-22 20:02:39.693+00
7cf235a6-439e-405a-a6e9-6f38832708ea	menu_show_news	false	Exibir item Notícias no menu	menu	2025-09-22 19:16:03.348081+00	2025-09-22 20:02:39.853+00
bf6d114b-da09-4e7f-8b86-805608555324	menu_show_events	false	Exibir item Eventos no menu	menu	2025-09-22 19:16:03.348081+00	2025-09-22 20:02:40.023+00
f5c2c1e4-cffe-47ca-9b4f-c4c139254489	menu_custom_items	[]	Itens personalizados do menu (JSON)	menu	2025-09-22 19:16:03.348081+00	2025-09-22 20:02:40.168+00
e4d045b6-68cd-4d33-b221-213a330bf524	placeholder_cleanup_completed	2025-09-22 20:40:08.831842+00	Limpeza de URLs via.placeholder.com concluída	general	2025-09-22 20:40:08.831842+00	2025-09-22 20:40:08.831842+00
37e60791-7228-43a8-a0b7-686fcc7cd13e	footer_main_title	Aliança Latino-Americana de Escritórios de Advocacia	Título principal do footer em português	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
ed49e15e-569d-48e8-a1be-153b856cf126	footer_main_title_en	Latin American Alliance of Law Firms	Título principal do footer em inglês	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
ab89c0e3-68ec-470f-b1a0-51c1dc5f4cf9	footer_main_title_es	Alianza Latinoamericana de Despachos de Abogados	Título principal do footer em espanhol	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
5ad3fb19-1a4c-4f46-805b-07f2f8b5a8a9	footer_tagline	Conectando escritórios de advocacia em toda a América Latina.	Frase/tagline do footer em português	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
73f8533e-c2d2-415a-9239-b902adc4251d	footer_tagline_en	Connecting law firms across Latin America.	Frase/tagline do footer em inglês	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
adaf9519-87e1-46a9-baf3-f68dfb6c6d90	footer_tagline_es	Conectando despachos de abogados en toda América Latina.	Frase/tagline do footer em espanhol	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
0c21faab-3dd5-4892-85f2-7c18cbf68afd	footer_copyright_text_en	All rights reserved.	Texto do copyright em inglês	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
62de9252-84ee-4385-a3c8-3d3de073b7b2	footer_copyright_text_es	Todos los derechos reservados.	Texto do copyright em espanhol	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
c2fcb5cc-ee2e-4840-a785-7f83e65ea5b5	footer_image		URL da imagem do footer	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
1e0ca3be-cfb2-447b-95ff-f387a309b9bf	footer_image_alt	ALAE Logo	Texto alternativo da imagem do footer	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
5468fc3f-0aaa-4820-9a21-5559c6688829	footer_background	#f8fafc	Cor de fundo do footer	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
a8114d01-0bd4-45c9-ae4b-59a078eeb5a2	footer_text_color	#64748b	Cor do texto do footer	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
cc84954f-d9ef-4a67-ba92-baa00240fca8	footer_show_contact_link	true	Exibir link de contato no footer	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
dd311e5e-258f-489b-8441-12bc06d963e4	footer_show_admin_link	true	Exibir link de admin no footer	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
b5f5ff1c-5fb2-4f65-acca-8945aada48e0	footer_contact_link_text_en	Contact	Texto do link de contato em inglês	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
73355fb2-b350-47ee-a33c-9760d34a9d25	footer_contact_link_text_es	Contacto	Texto do link de contato em espanhol	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
5836f84c-e523-4b49-a822-eceb63b71b32	footer_contact_link_text	CNPJ: 54.111.111/0001-20	Texto do link de contato em português	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
0a38a92d-df93-4400-a9a8-73f108388e42	footer_copyright_text	Todos os direitos reservados.	Texto do copyright em português	footer	2025-10-01 20:17:11.110398+00	2025-10-01 20:17:11.110398+00
efce4ebd-2271-49cd-81d8-1a28050d711d	active_languages	["pt", "en", "es"]	Lista de códigos de idiomas ativos no site	languages	2025-10-04 00:01:49.620332+00	2025-10-04 00:01:49.620332+00
e18db7ce-9229-44fc-8616-1e83f10ff98e	site_name	{"pt": "Meu Site", "en": "My Site", "es": "Mi Sitio"}	Nome do site em múltiplos idiomas	general	2025-10-04 00:01:49.620332+00	2025-10-04 00:01:49.620332+00
4764e1b7-d725-4c29-81d4-47d4bfac41a6	enable_language_switcher	true	Habilitar seletor de idiomas no frontend	languages	2025-10-04 00:01:49.620332+00	2025-10-04 00:01:49.620332+00
bae19b6c-cbbe-4f5a-95b8-8427e5ad644b	default_language	"pt"	Idioma padrão do site	languages	2025-10-04 00:01:49.620332+00	2025-10-04 00:02:38.891+00
\.


--
-- Data for Name: social_media; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.social_media (id, platform, url, icon, is_active, order_index, created_at, updated_at) FROM stdin;
e55b130a-9957-418e-ae31-c86d9bb55906	facebook	https://facebook.com/empresa	📘	t	0	2025-09-23 12:56:48.485075+00	2025-09-23 12:56:48.485075+00
0c01c9bb-001c-46e2-9495-d40b3d8fc4eb	instagram	https://instagram.com/empresa	📷	t	1	2025-09-23 12:56:48.485075+00	2025-09-23 12:56:48.485075+00
f5eb0262-f070-4133-a8eb-d7212847a311	linkedin	https://linkedin.com/company/empresa	💼	t	2	2025-09-23 12:56:48.485075+00	2025-09-23 12:56:48.485075+00
3778bd9f-e43b-4492-926f-88c2d3655423	whatsapp	https://wa.me/5511999999999	💬	t	3	2025-09-23 12:56:48.485075+00	2025-09-23 12:56:48.485075+00
\.


--
-- Data for Name: specialities; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.specialities (id, created_at, name_pt, name_en, name_es, description_pt, description_en, description_es) FROM stdin;
\.


--
-- Data for Name: stock_batches; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.stock_batches (id, ingredient_id, movement_id, batch_number, purchase_date, expiry_date, original_quantity, current_quantity, unit_id, unit_cost, supplier_id, is_active, created_at, updated_at, tenant_id) FROM stdin;
\.


--
-- Data for Name: stock_movements; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.stock_movements (id, ingredient_id, movement_type, quantity, unit_id, unit_cost, total_cost, reference_number, supplier_id, product_id, user_id, notes, movement_date, created_at, tenant_id) FROM stdin;
\.


--
-- Data for Name: subscription_modules; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.subscription_modules (id, subscription_id, module_id, is_enabled, expires_at, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: subscriptions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.subscriptions (id, tenant_id, plan_id, price, currency, trial_start_date, trial_end_date, current_period_start, current_period_end, cancelled_at, cancel_at_period_end, payment_method, external_subscription_id, metadata, created_at, updated_at, billing_cycle, status) FROM stdin;
1f3466e1-8d29-429b-942b-e661cb05c257	32aac50b-6385-4722-9471-4276036ac600	acff29d9-3e1f-40c7-8ab6-b526801fa84f	29.90	BRL	2025-10-05 20:32:34.929757+00	2025-11-04 20:32:34.929757+00	2025-10-05 20:32:34.929757+00	2025-11-04 20:32:34.929757+00	\N	f	\N	\N	{}	2025-10-05 20:32:34.929757+00	2025-10-05 20:32:34.929757+00	monthly	trial
\.


--
-- Data for Name: suppliers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.suppliers (id, name, trading_name, document, email, phone, address, city, state, zip_code, country, notes, is_active, created_at, updated_at, tenant_id) FROM stdin;
\.


--
-- Data for Name: support_categories; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.support_categories (id, tenant_id, name_pt, name_en, name_es, description_pt, description_en, description_es, icon, color, order_index, is_active, created_at, updated_at) FROM stdin;
fe2dbfee-69ed-4771-9747-7d642a1e39fc	32aac50b-6385-4722-9471-4276036ac600	Pedidos	Orders	Pedidos	Dúvidas sobre pedidos, status de entrega, cancelamentos	\N	\N	shopping_bag	#3B82F6	1	t	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
57b93ef3-c254-4631-971c-e206f4d17604	32aac50b-6385-4722-9471-4276036ac600	Produtos	Products	Productos	Informações sobre produtos, disponibilidade, preços	\N	\N	package	#10B981	2	t	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
8e6d7584-7600-4118-a2ab-fa52b6956be7	32aac50b-6385-4722-9471-4276036ac600	Pagamento	Payment	Pago	Problemas com pagamento, reembolsos, formas de pagamento	\N	\N	credit_card	#F59E0B	3	t	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
e9c1a1c5-5cb7-46c1-b316-f129ad25601f	32aac50b-6385-4722-9471-4276036ac600	Entrega	Delivery	Entrega	Questões sobre entrega, endereços, frete	\N	\N	local_shipping	#EF4444	4	t	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
e928b38a-2273-40b0-8547-76ebd29c1ab2	32aac50b-6385-4722-9471-4276036ac600	Conta	Account	Cuenta	Problemas com conta, login, dados pessoais	\N	\N	person	#8B5CF6	5	t	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
985167fc-e966-4052-95bd-d5aa7766f07e	32aac50b-6385-4722-9471-4276036ac600	Outros	Other	Otros	Outras dúvidas e sugestões	\N	\N	help	#6B7280	6	t	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
\.


--
-- Data for Name: support_faq; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.support_faq (id, tenant_id, category, question_pt, answer_pt, question_en, answer_en, question_es, answer_es, order_index, is_active, view_count, created_at, updated_at) FROM stdin;
715ea34b-034a-4fca-abc9-5375c86204d9	32aac50b-6385-4722-9471-4276036ac600	Pedidos	Como faço um pedido?	Para fazer um pedido, navegue pelos produtos, adicione ao carrinho e finalize a compra.	How do I place an order?	To place an order, browse the products, add to cart and complete the purchase.	\N	\N	1	t	0	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
384528ee-9a54-418b-a64f-1822675f8f10	32aac50b-6385-4722-9471-4276036ac600	Pedidos	Qual o prazo de entrega?	O prazo de entrega varia de 30 a 60 minutos dependendo da sua localização.	What is the delivery time?	Delivery time varies from 30 to 60 minutes depending on your location.	\N	\N	2	t	0	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
f4779dbc-8853-4515-8836-fe2ffb0f3395	32aac50b-6385-4722-9471-4276036ac600	Pedidos	Posso cancelar meu pedido?	Sim, você pode cancelar até 10 minutos após a confirmação do pedido.	Can I cancel my order?	Yes, you can cancel up to 10 minutes after order confirmation.	\N	\N	3	t	0	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
4966b97d-e342-46d2-b287-6918cb182347	32aac50b-6385-4722-9471-4276036ac600	Pedidos	Como acompanho meu pedido?	Você pode acompanhar seu pedido na seção "Meus Pedidos" do aplicativo.	How do I track my order?	You can track your order in the "My Orders" section of the app.	\N	\N	4	t	0	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
6fec3249-a83c-4fd5-a4fb-da132b6df2fd	32aac50b-6385-4722-9471-4276036ac600	Pagamento	Quais formas de pagamento aceitas?	Aceitamos cartão de crédito, débito, PIX e dinheiro na entrega.	What payment methods are accepted?	We accept credit card, debit card, PIX and cash on delivery.	\N	\N	5	t	0	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
723440e1-e925-4120-8021-892bcc8edd96	32aac50b-6385-4722-9471-4276036ac600	Entrega	Qual o valor do frete?	O frete é calculado com base na distância e pode ser gratuito em compras acima de R$ 50.	What is the delivery fee?	Delivery fee is calculated based on distance and may be free for orders over R$ 50.	\N	\N	6	t	0	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
890acce5-44a7-4bca-87cd-b3e03592c132	32aac50b-6385-4722-9471-4276036ac600	Conta	Como altero meus dados?	Acesse "Meus Dados" no menu do perfil para alterar suas informações.	How do I change my data?	Go to "My Data" in the profile menu to change your information.	\N	\N	7	t	0	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
3c2ede6a-e399-4987-9de9-2f4679c99592	32aac50b-6385-4722-9471-4276036ac600	Produtos	Os produtos são frescos?	Sim, trabalhamos apenas com produtos frescos e de qualidade.	Are the products fresh?	Yes, we only work with fresh and quality products.	\N	\N	8	t	0	2025-10-15 13:12:21.101589+00	2025-10-15 13:12:21.101589+00
\.


--
-- Data for Name: support_ticket_ratings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.support_ticket_ratings (id, ticket_id, user_id, rating, comment, created_at) FROM stdin;
\.


--
-- Data for Name: support_ticket_responses; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.support_ticket_responses (id, ticket_id, user_id, message, is_internal, attachments, created_at) FROM stdin;
\.


--
-- Data for Name: support_tickets; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.support_tickets (id, user_id, tenant_id, subject, category, priority, status, description, contact_info, assigned_to, resolution, created_at, updated_at, resolved_at, closed_at) FROM stdin;
\.


--
-- Data for Name: tables; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tables (id, number, name, capacity, floor, area, status, qr_code, is_active, created_at, updated_at) FROM stdin;
aa9c4bab-87c0-4cda-a44f-74d63050b9d5	2		4			available	\N	t	2025-10-04 05:27:50.73058+00	2025-10-04 05:27:50.73058+00
79eda066-2d65-4058-a467-b634a1c4dae8	3		4			available	\N	t	2025-10-04 05:27:53.835814+00	2025-10-04 05:27:53.835814+00
ea7e1aa6-4111-4c00-84d8-bc9f03aa3b69	4		4			available	\N	t	2025-10-04 05:27:58.458193+00	2025-10-04 05:27:58.458193+00
a148deb0-8c34-4c53-8ad3-196213bc14b2	5		4			available	\N	t	2025-10-04 05:28:01.823583+00	2025-10-04 05:28:01.823583+00
dc90bdf1-8ca1-4598-97f6-424bba01503a	6		4			available	\N	t	2025-10-04 05:28:04.339139+00	2025-10-04 05:28:04.339139+00
7025e0ef-8c49-41b7-a9f2-32ef6bd63e02	7		4			available	\N	t	2025-10-04 05:28:07.359795+00	2025-10-04 05:28:07.359795+00
9f2bbd26-9529-4eff-b333-06d42cb3f9a1	8		4			available	\N	t	2025-10-04 05:28:09.441095+00	2025-10-04 05:28:09.441095+00
6e9a6774-ffd3-4bf9-88e7-9a25b9e23f02	9		4			available	\N	t	2025-10-04 05:28:11.379672+00	2025-10-04 05:28:11.379672+00
b17ae2f1-56fe-4000-aaf2-592777539425	11		4			available	\N	t	2025-10-04 05:28:19.665263+00	2025-10-04 05:28:19.665263+00
fed9ffae-d31e-43c7-94a3-1944b8fb5c0b	12		4			available	\N	t	2025-10-04 05:28:22.736838+00	2025-10-04 05:28:22.736838+00
3f4b071f-47f8-4f78-9850-e0bffc0d13a7	13		4			available	\N	t	2025-10-04 05:28:25.518162+00	2025-10-04 05:28:25.518162+00
529c8b88-8f79-4a8a-89db-edf93eb0b3d1	14		4			available	\N	t	2025-10-04 05:28:28.319763+00	2025-10-04 05:28:28.319763+00
582f99c9-74fe-4192-bc07-9b304fa9628b	15		4			available	\N	t	2025-10-04 05:28:32.906361+00	2025-10-04 05:28:32.906361+00
6a016190-8248-47a9-b4e9-68a29bb5314f	18		4			available	\N	t	2025-10-04 05:28:44.151442+00	2025-10-04 05:28:44.151442+00
dba7625b-207f-4fcd-9ebc-aa22eaef3153	1		4			available	\N	t	2025-10-04 05:27:41.239451+00	2025-10-04 05:27:41.239451+00
4109c44a-34f3-43a4-bd8b-56e5e63b49c7	16		4			occupied	\N	t	2025-10-04 05:28:36.327563+00	2025-10-07 01:02:57.011+00
17aa371f-72a0-4995-a879-48638a395e1d	10		4			occupied	\N	t	2025-10-04 05:28:15.036046+00	2025-10-07 04:25:28.232+00
22374ca1-62b8-409c-96cf-082c4a60d659	17		4			occupied	\N	t	2025-10-04 05:28:40.93534+00	2025-10-13 21:50:59.174+00
\.


--
-- Data for Name: tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tags (id, created_at, tag, color) FROM stdin;
441f3ed2-c6be-438b-b1e1-9982f11068d1	2025-09-20 08:42:14.00258+00	Frete Grátis	#10B981
97ab6635-b240-4c3c-ad1e-1201c6f60f7c	2025-09-20 08:42:14.00258+00	Promoção	#EF4444
6d91b8a1-16f2-456d-9612-6ca82392424b	2025-09-20 08:42:14.00258+00	Novidade	#3B82F6
5eb55415-7c6a-419e-9c56-893ecd46d494	2025-09-20 08:42:14.00258+00	Oferta Especial	#F59E0B
\.


--
-- Data for Name: tenant_customers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tenant_customers (id, tenant_id, user_id, customer_name, customer_email, customer_phone, customer_document, street, number, complement, neighborhood, city, state, zip_code, latitude, longitude, notes, preferred_payment_method, customer_type, total_orders, total_spent, average_order_value, last_order_date, first_order_date, is_active, is_blocked, block_reason, created_at, updated_at) FROM stdin;
08e60e1b-aea5-42ed-ab5a-5f9685cf46a7	32aac50b-6385-4722-9471-4276036ac600	\N	JESLLEY OLIVEIRA PIRES	jade@teste.com	48991171055	1111111111								\N	\N		\N	regular	0	0.00	0.00	\N	\N	t	f		2025-10-11 09:45:59.980297+00	2025-10-11 09:45:59.980297+00
\.


--
-- Data for Name: tenant_delivery_persons; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tenant_delivery_persons (id, tenant_id, delivery_person_id, commission_percentage, fixed_payment_per_delivery, coverage_zones, max_distance_km, is_active, is_preferred, work_schedule, hired_at, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: tenant_invitations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tenant_invitations (id, tenant_id, email, role, invited_by, token, expires_at, accepted_at, created_at) FROM stdin;
\.


--
-- Data for Name: tenant_users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tenant_users (id, tenant_id, user_id, role, permissions, is_active, invited_by, invited_at, joined_at, created_at, updated_at) FROM stdin;
c4eafd3b-730c-49ff-a59e-227ad39ddb9a	32aac50b-6385-4722-9471-4276036ac600	0cede974-5348-4ec7-93d7-5991f64d7913	admin	{}	t	\N	\N	2025-10-06 17:13:54.204879+00	2025-10-06 17:13:54.204879+00	2025-10-06 17:13:54.204879+00
\.


--
-- Data for Name: tenants; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tenants (id, name, slug, logo_url, primary_color, secondary_color, delivery_time_min, delivery_time_max, rating, minimum_order_value, phone, address, is_active, created_at, updated_at, admin_user_id, terms_use, privacy_policy, return_policy) FROM stdin;
32aac50b-6385-4722-9471-4276036ac600	Estabelecimento Padrão	default	\N	#ef4444	#f97316	30	45	4.8	25.00	\N	\N	t	2025-10-05 20:13:42.530886+00	2025-10-05 20:13:42.530886+00	\N	Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.	Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.	Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
\.


--
-- Data for Name: testimonials; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.testimonials (id, testimonial_type, product_id, author_name, author_email, author_position, author_company, author_image, title, content, rating, is_approved, is_featured, display_order, language, created_at, updated_at, tenant_id) FROM stdin;
c16ec9b4-17cd-4902-815f-ea8e7f49bd9b	company	\N	João Silva	\N	CEO	Tech Solutions	\N	Excelente parceria	Trabalhar com a ALAE tem sido uma experiência transformadora para nossa empresa. A rede de escritórios de advocacia é extremamente profissional e conectada.	5	t	t	0	pt	2025-10-01 21:41:02.955391+00	2025-10-06 14:08:38.698393+00	32aac50b-6385-4722-9471-4276036ac600
0fad66b1-461d-43e5-a8bf-9a921e30f30f	company	\N	Maria Santos	\N	Diretora Jurídica	Global Corp	\N	Recomendo fortemente	A ALAE nos conectou com os melhores escritórios de advocacia da América Latina. Altamente recomendado!	5	t	t	0	pt	2025-10-01 21:41:02.955391+00	2025-10-06 14:08:38.698393+00	32aac50b-6385-4722-9471-4276036ac600
9e6e905e-5da0-477d-989b-86b56cec1c32	company	\N	John Smith	\N	Legal Director	International Inc	\N	Outstanding network	ALAE has been instrumental in connecting us with top-tier law firms across Latin America. Their network is unparalleled.	5	t	f	0	en	2025-10-01 21:41:02.955391+00	2025-10-06 14:08:38.698393+00	32aac50b-6385-4722-9471-4276036ac600
71294077-e092-4503-8a85-414bdc0a6234	company	\N	Dra. Maria Fernanda Costa	maria.costa@example.com	Diretora Jurídica	TechCorp Brasil	\N	Profissionalismo e eficiência	Como empresa de tecnologia em expansão na América Latina, precisávamos de parceiros jurídicos confiáveis em cada país. A ALAE nos conectou com escritórios de primeira linha que entendem nosso negócio. O suporte tem sido impecável e os resultados excedem nossas expectativas.	5	t	t	1	pt	2025-10-01 21:50:48.650329+00	2025-10-06 14:08:38.698393+00	32aac50b-6385-4722-9471-4276036ac600
2c7e8c88-3c85-49ef-8888-d927e6b259bb	company	\N	John Patterson	john.patterson@example.com	Legal Director	International Corp	\N	Outstanding legal network	ALAE has been instrumental in our Latin American operations. Their network of law firms is top-tier, and their coordination across multiple jurisdictions is seamless. We have successfully navigated complex legal matters in 8 countries thanks to their expertise and dedication.	5	t	t	2	en	2025-10-01 21:50:48.650329+00	2025-10-06 14:08:38.698393+00	32aac50b-6385-4722-9471-4276036ac600
33b8bc37-a9da-450c-a522-7ddfbeb2730f	company	\N	Dr. Roberto Mendoza	roberto.mendoza@example.com	Socio Senior	Mendoza & Partners	\N	Red colaborativa excepcional	Como socio de un despacho boutique, la colaboración con ALAE nos ha abierto puertas en toda América Latina. La calidad de los despachos asociados es extraordinaria y los casos que hemos trabajado juntos han sido muy exitosos. Es una alianza que agrega valor real a nuestros clientes.	5	t	t	3	es	2025-10-01 21:50:48.650329+00	2025-10-06 14:08:38.698393+00	32aac50b-6385-4722-9471-4276036ac600
f186fc8d-6ca9-4b4f-b04d-0e5bc2aa5229	company	\N	Dra. Ana Paula Santos	ana.santos@example.com	Coordenadora Jurídica	Banco Internacional S.A.	\N	Solução completa para compliance	Trabalhamos com a ALAE em questões de compliance bancário em múltiplas jurisdições. A capacidade de coordenar escritórios especializados em diferentes países, mantendo padrões consistentes de qualidade, é impressionante. Sem dúvida, a melhor rede de escritórios jurídicos da América Latina.	5	t	t	4	pt	2025-10-01 21:50:48.650329+00	2025-10-06 14:08:38.698393+00	32aac50b-6385-4722-9471-4276036ac600
caf5502f-8180-40f8-a254-2ec43fa0dc61	company	\N	Dr. Fernando Gutiérrez	fernando.gutierrez@example.com	Director Legal	Constructora Continental	\N	Apoyo legal integral	Nuestra empresa de construcción opera en 6 países de América Latina. ALAE nos proporcionó acceso a abogados especializados en cada mercado, con conocimiento profundo de las regulaciones locales. Los proyectos fluyen mejor y evitamos problemas legales gracias a su asesoría proactiva.	5	t	t	5	es	2025-10-01 21:50:48.650329+00	2025-10-06 14:08:38.698393+00	32aac50b-6385-4722-9471-4276036ac600
3698c718-6a58-422a-b40a-bb4ddcd65572	company	\N	Dr. Carlos Eduardo Silva	carlos.silva@example.com	Sócio-Diretor	Silva & Advogados Associados	\N	Parceria estratégica excepcional	A ALAE transformou completamente nossa forma de trabalhar com clientes internacionais na América Latina. A rede de escritórios parceiros é extremamente qualificada e a comunicação é fluida. Conseguimos expandir nossos serviços jurídicos para 5 novos países em menos de um ano. Recomendo fortemente!	5	t	t	0	pt	2025-10-01 21:50:48.650329+00	2025-10-07 00:07:46.076733+00	32aac50b-6385-4722-9471-4276036ac600
533b9ee6-c025-462a-8560-8f631bd92ff8	company	\N	Sarah Mitchell	sarah.mitchell@example.com	General Counsel	Global Investments LLC	\N	Best legal alliance in LATAM	We invested millions in Latin American markets and needed reliable legal counsel. ALAE delivered beyond expectations. Their member firms handled M&A transactions, regulatory compliance, and litigation with exceptional skill. This alliance is a game-changer for international business in the region.	5	t	t	6	en	2025-10-01 21:50:48.650329+00	2025-10-06 14:08:38.698393+00	32aac50b-6385-4722-9471-4276036ac600
30762763-0be8-4543-af4e-1d272ee1f935	company	\N	Dr. Lucas Rodrigues	lucas.rodrigues@example.com	Advogado Sênior	Rodrigues Advocacia	\N	Networking que funciona	Além da qualidade técnica dos escritórios associados, o que mais me impressiona na ALAE é o espírito colaborativo. Conseguimos trocar experiências, aprender com casos de outros países e oferecer aos nossos clientes uma visão verdadeiramente regional. É uma comunidade jurídica de alto nível.	5	t	t	7	pt	2025-10-01 21:50:48.650329+00	2025-10-06 14:08:38.698393+00	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: user_address; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_address (id, created_at, title, address, number, complement, district, city, state, zip_code, lat, lng, user_id, is_default, is_billing, tenant_id, is_active, updated_at) FROM stdin;
308dcc38-65ab-41c9-a01b-048093d4365a	2025-10-05 17:29:12.529635+00	Casa Mãe	Rua Araxa	238	casa 11	Oswaldo Rezende	Uberlândia	MG	38425315	\N	\N	0cede974-5348-4ec7-93d7-5991f64d7913	f	f	32aac50b-6385-4722-9471-4276036ac600	t	2025-10-26 22:47:27.491968+00
ef304871-cdfd-4f02-8066-f9c2d30d5b49	2025-09-20 07:51:13.290156+00	Casa	Rua Valterli Tomaz de Oliveira	1531		Shopping Park	Uberlândia	Minas Gerais	38425-315	\N	\N	0cede974-5348-4ec7-93d7-5991f64d7913	f	t	32aac50b-6385-4722-9471-4276036ac600	t	2025-10-26 22:47:27.491968+00
0b157727-4507-469f-9c4f-a69ebdc6a19a	2025-10-26 17:51:00.035614+00	\N	Rua Araxá, 238	238	\N	Osvaldo Rezende	Uberlândia	MG	38400-425	-18.919733	-48.2920738	0cede974-5348-4ec7-93d7-5991f64d7913	f	f	32aac50b-6385-4722-9471-4276036ac600	t	2025-10-26 22:47:27.491968+00
e84966d1-dda5-4809-bccd-da311ba40e39	2025-10-11 01:41:09.664659+00	Trabalho	Av Afonso Pena	123		Centro	Uberlândia	MG	38400-404	\N	\N	0cede974-5348-4ec7-93d7-5991f64d7913	t	f	32aac50b-6385-4722-9471-4276036ac600	t	2025-10-26 22:47:27.491968+00
f5646431-8d33-47dc-92f8-36594a0b6d11	2025-10-27 20:39:17.183036+00	\N	Avenida Coacyara, 110	110	bloco 24 apto 04	Parque Dom Pedro II	Campinas	SP	13056-430	-22.972987	-47.14106289999999	b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae	f	f	32aac50b-6385-4722-9471-4276036ac600	t	2025-10-27 20:39:17.183036+00
\.


--
-- Data for Name: user_discounts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_discounts (id, user_id, discount_id, order_id, used_at) FROM stdin;
\.


--
-- Data for Name: user_favorites; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_favorites (id, created_at, user_id, product_id, tenant_id) FROM stdin;
650b7902-e3bf-45a9-bd21-e663292ad276	2025-10-26 18:50:22.578055+00	0cede974-5348-4ec7-93d7-5991f64d7913	524b22db-64f4-475d-a7cc-ab6a2de30f6a	32aac50b-6385-4722-9471-4276036ac600
2e56e0d9-35f6-4f74-87ff-726828f49599	2025-10-26 18:50:25.59373+00	0cede974-5348-4ec7-93d7-5991f64d7913	1e8ff89d-d80b-4b05-bec9-4ed2be428d7a	32aac50b-6385-4722-9471-4276036ac600
\.


--
-- Data for Name: user_profile; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_profile (id, user_id, created_at, profile_id) FROM stdin;
93da271d-4239-4122-a83d-1bbc04caeee8	0cede974-5348-4ec7-93d7-5991f64d7913	2025-09-10 02:14:25.496681+00	\N
\.


--
-- Data for Name: user_roles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_roles (id, user_id, role, created_at, updated_at) FROM stdin;
918f80b2-310a-48f2-a77d-8a936cb9426b	b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae	user	2025-10-27 20:35:45.44436+00	2025-10-27 20:35:45.44436+00
\.


--
-- Data for Name: user_settings; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_settings (id, user_id, tenant_id, notifications_orders, notifications_promotions, notifications_offers, dark_mode, app_sounds, vibration, created_at, updated_at) FROM stdin;
f40f46db-284c-487c-b65a-24125df5d2b3	0cede974-5348-4ec7-93d7-5991f64d7913	32aac50b-6385-4722-9471-4276036ac600	t	f	t	t	t	t	2025-10-28 14:03:29.769309+00	2025-10-28 14:10:46.676022+00
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, display_name, email, phone, document, created_at, updated_at, last_name, birthday, preferred_language, image_url) FROM stdin;
0cede974-5348-4ec7-93d7-5991f64d7913	Jeslley Pires	jeslleypires@gmail.com	(48) 99117-1055	072.874.636-01	2025-09-20 07:06:01.23429+00	2025-10-05 15:37:54.312955+00	Pires	1987-07-30	pt	https://fglyzvxmbjmxassqyzxk.supabase.co/storage/v1/object/public/business/users/0cede974-5348-4ec7-93d7-5991f64d7913_1761574285375.jpg
b7e3f02a-ba1f-4cb1-b7c8-b043466cd3ae	andreri.up	andreri.up@gmail.com	\N	\N	2025-10-27 20:35:45.44436+00	2025-10-27 20:35:45.44436+00	\N	\N	pt	\N
\.


--
-- Data for Name: waiters; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.waiters (id, user_id, name, code, phone, is_active, commission_percentage, created_at, updated_at) FROM stdin;
18881fc5-03af-4fc6-b480-c08dc0030add	\N	José	12	4444444444444	t	0.00	2025-10-04 05:27:12.677844+00	2025-10-04 05:27:12.677844+00
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-09-10 01:29:37
20211116045059	2025-09-10 01:29:41
20211116050929	2025-09-10 01:29:45
20211116051442	2025-09-10 01:29:48
20211116212300	2025-09-10 01:29:52
20211116213355	2025-09-10 01:29:55
20211116213934	2025-09-10 01:29:59
20211116214523	2025-09-10 01:30:03
20211122062447	2025-09-10 01:30:06
20211124070109	2025-09-10 01:30:10
20211202204204	2025-09-10 01:30:13
20211202204605	2025-09-10 01:30:16
20211210212804	2025-09-10 01:30:27
20211228014915	2025-09-10 01:30:30
20220107221237	2025-09-10 01:30:33
20220228202821	2025-09-10 01:30:37
20220312004840	2025-09-10 01:30:40
20220603231003	2025-09-10 01:30:45
20220603232444	2025-09-10 01:30:49
20220615214548	2025-09-10 01:30:52
20220712093339	2025-09-10 01:30:56
20220908172859	2025-09-10 01:30:59
20220916233421	2025-09-10 01:31:03
20230119133233	2025-09-10 01:31:06
20230128025114	2025-09-10 01:31:11
20230128025212	2025-09-10 01:31:14
20230227211149	2025-09-10 01:31:17
20230228184745	2025-09-10 01:31:21
20230308225145	2025-09-10 01:31:24
20230328144023	2025-09-10 01:31:27
20231018144023	2025-09-10 01:31:31
20231204144023	2025-09-10 01:31:36
20231204144024	2025-09-10 01:31:40
20231204144025	2025-09-10 01:31:43
20240108234812	2025-09-10 01:31:47
20240109165339	2025-09-10 01:31:50
20240227174441	2025-09-10 01:31:56
20240311171622	2025-09-10 01:32:01
20240321100241	2025-09-10 01:32:08
20240401105812	2025-09-10 01:32:17
20240418121054	2025-09-10 01:32:22
20240523004032	2025-09-10 01:32:34
20240618124746	2025-09-10 01:32:37
20240801235015	2025-09-10 01:32:41
20240805133720	2025-09-10 01:32:44
20240827160934	2025-09-10 01:32:47
20240919163303	2025-09-10 01:32:52
20240919163305	2025-09-10 01:32:55
20241019105805	2025-09-10 01:32:59
20241030150047	2025-09-10 01:33:11
20241108114728	2025-09-10 01:33:16
20241121104152	2025-09-10 01:33:19
20241130184212	2025-09-10 01:33:23
20241220035512	2025-09-10 01:33:26
20241220123912	2025-09-10 01:33:30
20241224161212	2025-09-10 01:33:33
20250107150512	2025-09-10 01:33:36
20250110162412	2025-09-10 01:33:40
20250123174212	2025-09-10 01:33:43
20250128220012	2025-09-10 01:33:46
20250506224012	2025-09-10 01:33:49
20250523164012	2025-09-10 01:33:52
20250714121412	2025-09-10 01:33:56
20250905041441	2025-10-01 20:14:44
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id, type) FROM stdin;
business	business	\N	2025-09-17 19:01:09.142827+00	2025-09-17 19:01:09.142827+00	t	f	\N	\N	\N	STANDARD
\.


--
-- Data for Name: buckets_analytics; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets_analytics (id, type, format, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-09-10 01:29:32.016136
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-09-10 01:29:32.036965
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-09-10 01:29:32.042478
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-09-10 01:29:32.076196
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-09-10 01:29:32.152692
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-09-10 01:29:32.156256
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-09-10 01:29:32.160473
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-09-10 01:29:32.164407
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-09-10 01:29:32.167828
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-09-10 01:29:32.171287
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-09-10 01:29:32.176178
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-09-10 01:29:32.180655
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-09-10 01:29:32.187351
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-09-10 01:29:32.190603
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-09-10 01:29:32.194696
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-09-10 01:29:32.222651
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-09-10 01:29:32.22698
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-09-10 01:29:32.230447
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-09-10 01:29:32.234422
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-09-10 01:29:32.240716
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-09-10 01:29:32.244247
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-09-10 01:29:32.249801
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-09-10 01:29:32.282089
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-09-10 01:29:32.295252
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-09-10 01:29:32.299518
25	custom-metadata	d974c6057c3db1c1f847afa0e291e6165693b990	2025-09-10 01:29:32.303241
26	objects-prefixes	ef3f7871121cdc47a65308e6702519e853422ae2	2025-09-17 19:00:40.413141
27	search-v2	33b8f2a7ae53105f028e13e9fcda9dc4f356b4a2	2025-09-17 19:00:40.453587
28	object-bucket-name-sorting	ba85ec41b62c6a30a3f136788227ee47f311c436	2025-09-17 19:00:40.470468
29	create-prefixes	a7b1a22c0dc3ab630e3055bfec7ce7d2045c5b7b	2025-09-17 19:00:40.47888
30	update-object-levels	6c6f6cc9430d570f26284a24cf7b210599032db7	2025-09-17 19:00:40.486127
31	objects-level-index	33f1fef7ec7fea08bb892222f4f0f5d79bab5eb8	2025-09-17 19:00:40.599781
32	backward-compatible-index-on-objects	2d51eeb437a96868b36fcdfb1ddefdf13bef1647	2025-09-17 19:00:40.609469
33	backward-compatible-index-on-prefixes	fe473390e1b8c407434c0e470655945b110507bf	2025-09-17 19:00:40.619646
34	optimize-search-function-v1	82b0e469a00e8ebce495e29bfa70a0797f7ebd2c	2025-09-17 19:00:40.622486
35	add-insert-trigger-prefixes	63bb9fd05deb3dc5e9fa66c83e82b152f0caf589	2025-09-17 19:00:40.634285
36	optimise-existing-functions	81cf92eb0c36612865a18016a38496c530443899	2025-09-17 19:00:40.642769
37	add-bucket-name-length-trigger	3944135b4e3e8b22d6d4cbb568fe3b0b51df15c1	2025-09-17 19:00:40.655749
38	iceberg-catalog-flag-on-buckets	19a8bd89d5dfa69af7f222a46c726b7c41e462c5	2025-09-17 19:00:40.66385
39	add-search-v2-sort-support	39cf7d1e6bf515f4b02e41237aba845a7b492853	2025-10-02 05:47:54.680374
40	fix-prefix-race-conditions-optimized	fd02297e1c67df25a9fc110bf8c8a9af7fb06d1f	2025-10-02 05:47:54.706853
41	add-object-level-update-trigger	44c22478bf01744b2129efc480cd2edc9a7d60e9	2025-10-02 05:47:54.733616
42	rollback-prefix-triggers	f2ab4f526ab7f979541082992593938c05ee4b47	2025-10-02 05:47:54.741927
43	fix-object-level	ab837ad8f1c7d00cc0b7310e989a23388ff29fc6	2025-10-02 05:47:54.75714
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata, level) FROM stdin;
127fdd10-79f5-40e9-8fae-9e9b1222ea52	business	images/.emptyFolderPlaceholder	\N	2025-09-17 19:02:39.735701+00	2025-09-17 19:02:39.735701+00	2025-09-17 19:02:39.735701+00	{"eTag": "\\"d41d8cd98f00b204e9800998ecf8427e\\"", "size": 0, "mimetype": "application/octet-stream", "cacheControl": "max-age=3600", "lastModified": "2025-09-17T19:02:39.737Z", "contentLength": 0, "httpStatusCode": 200}	db25005e-a966-4d92-98f1-44b3222acbf3	\N	{}	2
c32a6fac-a229-4e9f-82c5-27807d56f0b7	business	images/1758136483055.jpeg	0cede974-5348-4ec7-93d7-5991f64d7913	2025-09-17 19:14:44.0652+00	2025-09-17 19:14:44.0652+00	2025-09-17 19:14:44.0652+00	{"eTag": "\\"6bdb8036cf41f49a2562abff2818aa68\\"", "size": 82450, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2025-09-17T19:14:44.000Z", "contentLength": 82450, "httpStatusCode": 200}	ab864254-806a-4b5a-a0fb-f3f3da677ebf	0cede974-5348-4ec7-93d7-5991f64d7913	{}	2
4f546f25-c35b-402f-af5a-f4ee085360c3	business	images/1758154423561-49bwqyi9o.png	0cede974-5348-4ec7-93d7-5991f64d7913	2025-09-18 00:13:44.008406+00	2025-09-18 00:13:44.008406+00	2025-09-18 00:13:44.008406+00	{"eTag": "\\"f1e608c05eb3872355391eac896baf58\\"", "size": 148583, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2025-09-18T00:13:44.000Z", "contentLength": 148583, "httpStatusCode": 200}	506c73c2-d43c-45e2-9380-c63769fcc4e3	0cede974-5348-4ec7-93d7-5991f64d7913	{}	2
2c0f6194-9826-4e84-99c2-f41eb33c0bf5	business	images/1758154424279-qfy8m4rmc.png	0cede974-5348-4ec7-93d7-5991f64d7913	2025-09-18 00:13:44.691018+00	2025-09-18 00:13:44.691018+00	2025-09-18 00:13:44.691018+00	{"eTag": "\\"ddf68a2567d7afdc3e26b09bffe52dfb\\"", "size": 316941, "mimetype": "image/png", "cacheControl": "max-age=3600", "lastModified": "2025-09-18T00:13:45.000Z", "contentLength": 316941, "httpStatusCode": 200}	1e4ed417-ce39-488b-bf69-c8105fd5883b	0cede974-5348-4ec7-93d7-5991f64d7913	{}	2
c55c0148-c212-432e-be88-76dd7b192d33	business	users/.emptyFolderPlaceholder	\N	2025-10-27 11:34:29.161311+00	2025-10-27 11:34:29.161311+00	2025-10-27 11:34:29.161311+00	{"eTag": "\\"d41d8cd98f00b204e9800998ecf8427e\\"", "size": 0, "mimetype": "application/octet-stream", "cacheControl": "max-age=3600", "lastModified": "2025-10-27T11:34:29.160Z", "contentLength": 0, "httpStatusCode": 200}	a201aeae-ca2d-4c63-80f1-540f40644a49	\N	{}	2
2ed343d2-7433-482a-843b-53f1edea4252	business	users/0cede974-5348-4ec7-93d7-5991f64d7913_1761574285375.jpg	0cede974-5348-4ec7-93d7-5991f64d7913	2025-10-27 14:11:25.826231+00	2025-10-27 14:11:25.826231+00	2025-10-27 14:11:25.826231+00	{"eTag": "\\"f9c568e17225c17c698891a3040e9b7b\\"", "size": 92194, "mimetype": "image/jpeg", "cacheControl": "max-age=3600", "lastModified": "2025-10-27T14:11:26.000Z", "contentLength": 92194, "httpStatusCode": 200}	bda89100-ede6-417d-aa12-5fb903390030	0cede974-5348-4ec7-93d7-5991f64d7913	{}	2
\.


--
-- Data for Name: prefixes; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.prefixes (bucket_id, name, created_at, updated_at) FROM stdin;
business	images	2025-09-17 19:02:39.735701+00	2025-09-17 19:02:39.735701+00
business	users	2025-10-27 11:34:29.161311+00	2025-10-27 11:34:29.161311+00
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: supabase_migrations; Owner: postgres
--

COPY supabase_migrations.schema_migrations (version, statements, name, created_by, idempotency_key) FROM stdin;
20250910020407	{"-- Create countries table for organizing offices\nCREATE TABLE countries (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  name_pt TEXT NOT NULL,\n  name_en TEXT NOT NULL,\n  name_es TEXT NOT NULL,\n  code TEXT UNIQUE NOT NULL, -- ISO country code (BR, AR, CL, etc.)\n  flag_emoji TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create offices table for ALAE law offices\nCREATE TABLE offices (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  name TEXT NOT NULL,\n  country_id UUID REFERENCES countries(id) ON DELETE RESTRICT,\n  city TEXT NOT NULL,\n  address TEXT NOT NULL,\n  latitude DECIMAL(10, 8),\n  longitude DECIMAL(11, 8),\n  phone TEXT,\n  email TEXT,\n  website TEXT,\n  description_pt TEXT,\n  description_en TEXT,\n  description_es TEXT,\n  contact_person TEXT,\n  specialties TEXT[], -- Array of practice areas\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create news table for news articles\nCREATE TABLE news (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  title_pt TEXT NOT NULL,\n  title_en TEXT NOT NULL,\n  title_es TEXT NOT NULL,\n  summary_pt TEXT NOT NULL,\n  summary_en TEXT NOT NULL,\n  summary_es TEXT NOT NULL,\n  content_pt TEXT,\n  content_en TEXT,\n  content_es TEXT,\n  category_pt TEXT NOT NULL,\n  category_en TEXT NOT NULL,\n  category_es TEXT NOT NULL,\n  image_url TEXT,\n  published_date DATE NOT NULL,\n  is_featured BOOLEAN DEFAULT false,\n  is_published BOOLEAN DEFAULT true,\n  author TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create events table for ALAE events\nCREATE TABLE events (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  title_pt TEXT NOT NULL,\n  title_en TEXT NOT NULL,\n  title_es TEXT NOT NULL,\n  description_pt TEXT NOT NULL,\n  description_en TEXT NOT NULL,\n  description_es TEXT NOT NULL,\n  event_date DATE NOT NULL,\n  event_time TIME,\n  location_pt TEXT NOT NULL,\n  location_en TEXT NOT NULL,\n  location_es TEXT NOT NULL,\n  venue TEXT,\n  type_pt TEXT NOT NULL, -- Simpósio, Reunião, Webinar, etc.\n  type_en TEXT NOT NULL,\n  type_es TEXT NOT NULL,\n  max_attendees INTEGER,\n  current_attendees INTEGER DEFAULT 0,\n  registration_url TEXT,\n  is_virtual BOOLEAN DEFAULT false,\n  is_featured BOOLEAN DEFAULT false,\n  is_published BOOLEAN DEFAULT true,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create event_images table for multiple images per event\nCREATE TABLE event_images (\n  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n  event_id UUID REFERENCES events(id) ON DELETE CASCADE,\n  image_url TEXT NOT NULL,\n  caption_pt TEXT,\n  caption_en TEXT,\n  caption_es TEXT,\n  display_order INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create indexes for better performance\nCREATE INDEX idx_offices_country_id ON offices(country_id);\nCREATE INDEX idx_offices_city ON offices(city);\nCREATE INDEX idx_news_published_date ON news(published_date DESC);\nCREATE INDEX idx_news_category_pt ON news(category_pt);\nCREATE INDEX idx_news_is_featured ON news(is_featured);\nCREATE INDEX idx_events_event_date ON events(event_date);\nCREATE INDEX idx_events_type_pt ON events(type_pt);\nCREATE INDEX idx_events_is_featured ON events(is_featured);\nCREATE INDEX idx_event_images_event_id ON event_images(event_id);\n\n-- Update timestamps trigger function\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Create triggers for automatic timestamp updates\nCREATE TRIGGER update_countries_updated_at BEFORE UPDATE ON countries FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();\nCREATE TRIGGER update_offices_updated_at BEFORE UPDATE ON offices FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();\nCREATE TRIGGER update_news_updated_at BEFORE UPDATE ON news FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();\nCREATE TRIGGER update_events_updated_at BEFORE UPDATE ON events FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();\n\n-- Insert sample countries\nINSERT INTO countries (name_pt, name_en, name_es, code, flag_emoji) VALUES\n('Brasil', 'Brazil', 'Brasil', 'BR', '🇧🇷'),\n('Argentina', 'Argentina', 'Argentina', 'AR', '🇦🇷'),\n('Chile', 'Chile', 'Chile', 'CL', '🇨🇱'),\n('Peru', 'Peru', 'Perú', 'PE', '🇵🇪'),\n('Colômbia', 'Colombia', 'Colombia', 'CO', '🇨🇴'),\n('Uruguai', 'Uruguay', 'Uruguay', 'UY', '🇺🇾'),\n('Paraguai', 'Paraguay', 'Paraguay', 'PY', '🇵🇾'),\n('México', 'Mexico', 'México', 'MX', '🇲🇽');\n\n-- Insert sample offices\nINSERT INTO offices (name, country_id, city, address, latitude, longitude, phone, email, description_pt, description_en, description_es, contact_person, specialties) \nSELECT \n  'ALAE Brasil - São Paulo',\n  c.id,\n  'São Paulo',\n  'Av. Paulista, 1000 - Bela Vista, São Paulo - SP',\n  -23.5505,\n  -46.6333,\n  '+55 (11) 3000-0000',\n  'saopaulo@alae.org',\n  'Escritório principal da ALAE no Brasil, especializado em direito empresarial e internacional.',\n  'ALAE main office in Brazil, specialized in corporate and international law.',\n  'Oficina principal de ALAE en Brasil, especializada en derecho empresarial e internacional.',\n  'Dr. João Silva',\n  ARRAY['Direito Empresarial', 'Direito Internacional', 'Fusões e Aquisições']\nFROM countries c WHERE c.code = 'BR';\n\nINSERT INTO offices (name, country_id, city, address, latitude, longitude, phone, email, description_pt, description_en, description_es, contact_person, specialties) \nSELECT \n  'ALAE Argentina - Buenos Aires',\n  c.id,\n  'Buenos Aires',\n  'Av. Corrientes, 500 - Centro, Buenos Aires',\n  -34.6037,\n  -58.3816,\n  '+54 (11) 4000-0000',\n  'buenosaires@alae.org',\n  'Escritório da ALAE na Argentina, focado em direito comercial latino-americano.',\n  'ALAE office in Argentina, focused on Latin American commercial law.',\n  'Oficina de ALAE en Argentina, enfocada en derecho comercial latinoamericano.',\n  'Dra. María García',\n  ARRAY['Direito Comercial', 'Arbitragem Internacional', 'Direito Tributário']\nFROM countries c WHERE c.code = 'AR';\n\nINSERT INTO offices (name, country_id, city, address, latitude, longitude, phone, email, description_pt, description_en, description_es, contact_person, specialties) \nSELECT \n  'ALAE Chile - Santiago',\n  c.id,\n  'Santiago',\n  'Av. Providencia, 1000 - Providencia, Santiago',\n  -33.4489,\n  -70.6693,\n  '+56 (2) 2000-0000',\n  'santiago@alae.org',\n  'Escritório da ALAE no Chile, especializado em direito minerário e ambiental.',\n  'ALAE office in Chile, specialized in mining and environmental law.',\n  'Oficina de ALAE en Chile, especializada en derecho minero y ambiental.',\n  'Dr. Carlos Mendoza',\n  ARRAY['Direito Minerário', 'Direito Ambiental', 'Energia']\nFROM countries c WHERE c.code = 'CL';\n\n-- Insert sample news\nINSERT INTO news (title_pt, title_en, title_es, summary_pt, summary_en, summary_es, content_pt, content_en, content_es, category_pt, category_en, category_es, published_date, is_featured, author) VALUES\n(\n  'Nova Regulamentação de Investimentos Estrangeiros na América Latina',\n  'New Foreign Investment Regulation in Latin America',\n  'Nueva Regulación de Inversión Extranjera en América Latina',\n  'Análise das mudanças regulatórias que afetam investimentos estrangeiros na região.',\n  'Analysis of regulatory changes affecting foreign investments in the region.',\n  'Análisis de los cambios regulatorios que afectan las inversiones extranjeras en la región.',\n  'Conteúdo completo sobre as novas regulamentações...',\n  'Full content about the new regulations...',\n  'Contenido completo sobre las nuevas regulaciones...',\n  'Regulamentação',\n  'Regulation',\n  'Regulación',\n  CURRENT_DATE - INTERVAL '5 days',\n  true,\n  'Dr. João Silva'\n),\n(\n  'Simpósio ALAE 2024: Sustentabilidade e Direito',\n  'ALAE Symposium 2024: Sustainability and Law',\n  'Simposio ALAE 2024: Sostenibilidad y Derecho',\n  'Evento anual da ALAE discutirá as intersecções entre direito e sustentabilidade.',\n  'ALAE annual event will discuss intersections between law and sustainability.',\n  'Evento anual de ALAE discutirá las intersecciones entre derecho y sostenibilidad.',\n  'Detalhes do simpósio e palestrantes confirmados...',\n  'Symposium details and confirmed speakers...',\n  'Detalles del simposio y ponentes confirmados...',\n  'Eventos',\n  'Events',\n  'Eventos',\n  CURRENT_DATE - INTERVAL '2 days',\n  true,\n  'Dra. María García'\n);\n\n-- Insert sample events\nINSERT INTO events (title_pt, title_en, title_es, description_pt, description_en, description_es, event_date, event_time, location_pt, location_en, location_es, venue, type_pt, type_en, type_es, max_attendees, is_virtual, is_featured) VALUES\n(\n  'Conferência Anual ALAE 2024',\n  'ALAE Annual Conference 2024',\n  'Conferencia Anual ALAE 2024',\n  'Conferência anual da ALAE reunindo os principais especialistas em direito empresarial da América Latina.',\n  'ALAE annual conference bringing together leading corporate law experts from Latin America.',\n  'Conferencia anual de ALAE reuniendo a los principales expertos en derecho empresarial de América Latina.',\n  CURRENT_DATE + INTERVAL '30 days',\n  '09:00:00',\n  'São Paulo, Brasil',\n  'São Paulo, Brazil',\n  'São Paulo, Brasil',\n  'Hotel Copacabana Palace',\n  'Conferência',\n  'Conference',\n  'Conferencia',\n  500,\n  false,\n  true\n),\n(\n  'Webinar: ESG e Compliance na América Latina',\n  'Webinar: ESG and Compliance in Latin America',\n  'Webinar: ESG y Compliance en América Latina',\n  'Discussão sobre as melhores práticas de ESG e compliance para empresas latino-americanas.',\n  'Discussion on ESG and compliance best practices for Latin American companies.',\n  'Discusión sobre las mejores prácticas de ESG y compliance para empresas latinoamericanas.',\n  CURRENT_DATE + INTERVAL '15 days',\n  '14:00:00',\n  'Online',\n  'Online',\n  'Online',\n  'Plataforma Virtual ALAE',\n  'Webinar',\n  'Webinar',\n  'Webinar',\n  200,\n  true,\n  true\n);"}		juniorbatata904@gmail.com	\N
20250910020509	{"-- Enable Row Level Security on all tables\nALTER TABLE public.countries ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.offices ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.news ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.events ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.event_images ENABLE ROW LEVEL SECURITY;\n\n-- Create public read policies for all tables (since this is a public website)\nCREATE POLICY \\"Countries are publicly readable\\" ON public.countries FOR SELECT USING (true);\nCREATE POLICY \\"Offices are publicly readable\\" ON public.offices FOR SELECT USING (true);\nCREATE POLICY \\"Published news are publicly readable\\" ON public.news FOR SELECT USING (is_published = true);\nCREATE POLICY \\"Published events are publicly readable\\" ON public.events FOR SELECT USING (is_published = true);\nCREATE POLICY \\"Event images are publicly readable\\" ON public.event_images FOR SELECT USING (true);\n\n-- Fix the search_path issue in the trigger function\nCREATE OR REPLACE FUNCTION public.update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER SET search_path = public;"}		juniorbatata904@gmail.com	\N
20250910020755	{"-- Create user roles enum\nCREATE TYPE public.app_role AS ENUM ('admin', 'moderator', 'user');\n\n-- Create profiles table for user information\nCREATE TABLE public.profiles (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,\n  display_name TEXT NOT NULL,\n  email TEXT NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n  UNIQUE(user_id)\n);\n\n-- Create user_roles table\nCREATE TABLE public.user_roles (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n  role app_role NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n  UNIQUE (user_id, role)\n);\n\n-- Enable RLS on new tables\nALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;\n\n-- Create security definer function to check roles\nCREATE OR REPLACE FUNCTION public.has_role(_user_id uuid, _role app_role)\nRETURNS BOOLEAN\nLANGUAGE SQL\nSTABLE\nSECURITY DEFINER\nSET search_path = public\nAS $$\n  SELECT EXISTS (\n    SELECT 1\n    FROM public.user_roles\n    WHERE user_id = _user_id\n      AND role = _role\n  )\n$$;\n\n-- Create function to get current user role\nCREATE OR REPLACE FUNCTION public.get_current_user_role()\nRETURNS app_role\nLANGUAGE SQL\nSTABLE\nSECURITY DEFINER\nSET search_path = public\nAS $$\n  SELECT role FROM public.user_roles WHERE user_id = auth.uid() LIMIT 1\n$$;\n\n-- RLS Policies for profiles\nCREATE POLICY \\"Users can view their own profile\\" ON public.profiles FOR SELECT USING (auth.uid() = user_id);\nCREATE POLICY \\"Users can update their own profile\\" ON public.profiles FOR UPDATE USING (auth.uid() = user_id);\nCREATE POLICY \\"Admins can view all profiles\\" ON public.profiles FOR SELECT USING (public.has_role(auth.uid(), 'admin'));\nCREATE POLICY \\"Admins can update all profiles\\" ON public.profiles FOR UPDATE USING (public.has_role(auth.uid(), 'admin'));\n\n-- RLS Policies for user_roles\nCREATE POLICY \\"Users can view their own roles\\" ON public.user_roles FOR SELECT USING (auth.uid() = user_id);\nCREATE POLICY \\"Admins can view all roles\\" ON public.user_roles FOR SELECT USING (public.has_role(auth.uid(), 'admin'));\nCREATE POLICY \\"Admins can manage all roles\\" ON public.user_roles FOR ALL USING (public.has_role(auth.uid(), 'admin'));\n\n-- Admin policies for content management\nCREATE POLICY \\"Admins can manage countries\\" ON public.countries FOR ALL USING (public.has_role(auth.uid(), 'admin'));\nCREATE POLICY \\"Admins can manage offices\\" ON public.offices FOR ALL USING (public.has_role(auth.uid(), 'admin'));\nCREATE POLICY \\"Admins can manage news\\" ON public.news FOR ALL USING (public.has_role(auth.uid(), 'admin'));\nCREATE POLICY \\"Admins can manage events\\" ON public.events FOR ALL USING (public.has_role(auth.uid(), 'admin'));\nCREATE POLICY \\"Admins can manage event images\\" ON public.event_images FOR ALL USING (public.has_role(auth.uid(), 'admin'));\n\n-- Function to handle new user registration\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS TRIGGER\nLANGUAGE PLPGSQL\nSECURITY DEFINER\nSET search_path = public\nAS $$\nBEGIN\n  INSERT INTO public.profiles (user_id, display_name, email)\n  VALUES (\n    NEW.id,\n    COALESCE(NEW.raw_user_meta_data->>'display_name', NEW.email),\n    NEW.email\n  );\n  \n  -- First user becomes admin, others get user role\n  INSERT INTO public.user_roles (user_id, role)\n  VALUES (\n    NEW.id,\n    CASE \n      WHEN (SELECT COUNT(*) FROM auth.users) = 1 THEN 'admin'::app_role\n      ELSE 'user'::app_role\n    END\n  );\n  \n  RETURN NEW;\nEND;\n$$;\n\n-- Trigger for new user registration\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();\n\n-- Add triggers for timestamps\nCREATE TRIGGER update_profiles_updated_at \n  BEFORE UPDATE ON public.profiles \n  FOR EACH ROW EXECUTE PROCEDURE public.update_updated_at_column();\n\n-- Insert admin user data for existing users (if any)\nDO $$\nBEGIN\n  -- This will only run if there are existing auth users without profiles\n  INSERT INTO public.profiles (user_id, display_name, email)\n  SELECT \n    au.id,\n    COALESCE(au.raw_user_meta_data->>'display_name', au.email),\n    au.email\n  FROM auth.users au\n  LEFT JOIN public.profiles p ON p.user_id = au.id\n  WHERE p.user_id IS NULL;\n  \n  -- Give admin role to first user if no roles exist\n  INSERT INTO public.user_roles (user_id, role)\n  SELECT \n    au.id,\n    'admin'::app_role\n  FROM auth.users au\n  LEFT JOIN public.user_roles ur ON ur.user_id = au.id\n  WHERE ur.user_id IS NULL\n  ORDER BY au.created_at\n  LIMIT 1;\n  \n  -- Give user role to other users\n  INSERT INTO public.user_roles (user_id, role)\n  SELECT \n    au.id,\n    'user'::app_role\n  FROM auth.users au\n  LEFT JOIN public.user_roles ur ON ur.user_id = au.id\n  WHERE ur.user_id IS NULL;\nEND\n$$;"}		juniorbatata904@gmail.com	\N
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 317, true);


--
-- Name: batch_sequence; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.batch_sequence', 4, true);


--
-- Name: chat_messages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.chat_messages_id_seq', 1, true);


--
-- Name: chats_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.chats_id_seq', 1, true);


--
-- Name: dados_cliente_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.dados_cliente_id_seq', 1, true);


--
-- Name: documents_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.documents_id_seq', 1, false);


--
-- Name: n8n_chat_histories_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.n8n_chat_histories_id_seq', 2, true);


--
-- Name: order_sequence; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.order_sequence', 1, false);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: oauth_authorizations oauth_authorizations_authorization_code_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_authorizations
    ADD CONSTRAINT oauth_authorizations_authorization_code_key UNIQUE (authorization_code);


--
-- Name: oauth_authorizations oauth_authorizations_authorization_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_authorizations
    ADD CONSTRAINT oauth_authorizations_authorization_id_key UNIQUE (authorization_id);


--
-- Name: oauth_authorizations oauth_authorizations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_authorizations
    ADD CONSTRAINT oauth_authorizations_pkey PRIMARY KEY (id);


--
-- Name: oauth_clients oauth_clients_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_clients
    ADD CONSTRAINT oauth_clients_pkey PRIMARY KEY (id);


--
-- Name: oauth_consents oauth_consents_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_consents
    ADD CONSTRAINT oauth_consents_pkey PRIMARY KEY (id);


--
-- Name: oauth_consents oauth_consents_user_client_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_consents
    ADD CONSTRAINT oauth_consents_user_client_unique UNIQUE (user_id, client_id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: accounts accounts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.accounts
    ADD CONSTRAINT accounts_pkey PRIMARY KEY (id);


--
-- Name: api_keys api_keys_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.api_keys
    ADD CONSTRAINT api_keys_pkey PRIMARY KEY (id);


--
-- Name: banners banners_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.banners
    ADD CONSTRAINT banners_pkey PRIMARY KEY (id);


--
-- Name: brands brands_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.brands
    ADD CONSTRAINT brands_pkey PRIMARY KEY (id);


--
-- Name: business_settings business_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.business_settings
    ADD CONSTRAINT business_settings_pkey PRIMARY KEY (id);


--
-- Name: business_settings business_settings_tenant_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.business_settings
    ADD CONSTRAINT business_settings_tenant_id_key UNIQUE (tenant_id);


--
-- Name: business_types business_types_code_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.business_types
    ADD CONSTRAINT business_types_code_key UNIQUE (code);


--
-- Name: business_types business_types_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.business_types
    ADD CONSTRAINT business_types_pkey PRIMARY KEY (id);


--
-- Name: cash_register_sessions cash_register_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cash_register_sessions
    ADD CONSTRAINT cash_register_sessions_pkey PRIMARY KEY (id);


--
-- Name: cash_register_transactions cash_register_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cash_register_transactions
    ADD CONSTRAINT cash_register_transactions_pkey PRIMARY KEY (id);


--
-- Name: categories categories_code_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.categories
    ADD CONSTRAINT categories_code_key UNIQUE (code);


--
-- Name: categories categories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.categories
    ADD CONSTRAINT categories_pkey PRIMARY KEY (id);


--
-- Name: category_printer_mapping category_printer_mapping_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.category_printer_mapping
    ADD CONSTRAINT category_printer_mapping_pkey PRIMARY KEY (id);


--
-- Name: category_printer_mapping category_printer_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.category_printer_mapping
    ADD CONSTRAINT category_printer_unique UNIQUE (category_id, printer_station_id);


--
-- Name: chat_messages chat_messages_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chat_messages
    ADD CONSTRAINT chat_messages_pkey PRIMARY KEY (id);


--
-- Name: chats chats_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chats
    ADD CONSTRAINT chats_pkey PRIMARY KEY (id);


--
-- Name: company_vehicle_usage company_vehicle_usage_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.company_vehicle_usage
    ADD CONSTRAINT company_vehicle_usage_pkey PRIMARY KEY (id);


--
-- Name: company_vehicles company_vehicles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.company_vehicles
    ADD CONSTRAINT company_vehicles_pkey PRIMARY KEY (id);


--
-- Name: company_vehicles company_vehicles_tenant_id_vehicle_plate_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.company_vehicles
    ADD CONSTRAINT company_vehicles_tenant_id_vehicle_plate_key UNIQUE (tenant_id, vehicle_plate);


--
-- Name: countries countries_code_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.countries
    ADD CONSTRAINT countries_code_key UNIQUE (code);


--
-- Name: countries countries_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.countries
    ADD CONSTRAINT countries_pkey PRIMARY KEY (id);


--
-- Name: dados_cliente dados_cliente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.dados_cliente
    ADD CONSTRAINT dados_cliente_pkey PRIMARY KEY (id);


--
-- Name: delivery_addresses delivery_addresses_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_addresses
    ADD CONSTRAINT delivery_addresses_pkey PRIMARY KEY (id);


--
-- Name: delivery_orders delivery_orders_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_orders
    ADD CONSTRAINT delivery_orders_pkey PRIMARY KEY (id);


--
-- Name: delivery_person_ratings delivery_person_ratings_delivery_order_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_ratings
    ADD CONSTRAINT delivery_person_ratings_delivery_order_id_key UNIQUE (delivery_order_id);


--
-- Name: delivery_person_ratings delivery_person_ratings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_ratings
    ADD CONSTRAINT delivery_person_ratings_pkey PRIMARY KEY (id);


--
-- Name: delivery_person_status_history delivery_person_status_history_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_status_history
    ADD CONSTRAINT delivery_person_status_history_pkey PRIMARY KEY (id);


--
-- Name: delivery_person_transactions delivery_person_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_transactions
    ADD CONSTRAINT delivery_person_transactions_pkey PRIMARY KEY (id);


--
-- Name: delivery_person_vehicles delivery_person_vehicles_delivery_person_id_vehicle_plate_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_vehicles
    ADD CONSTRAINT delivery_person_vehicles_delivery_person_id_vehicle_plate_key UNIQUE (delivery_person_id, vehicle_plate);


--
-- Name: delivery_person_vehicles delivery_person_vehicles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_vehicles
    ADD CONSTRAINT delivery_person_vehicles_pkey PRIMARY KEY (id);


--
-- Name: delivery_person_wallet delivery_person_wallet_delivery_person_id_tenant_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_wallet
    ADD CONSTRAINT delivery_person_wallet_delivery_person_id_tenant_id_key UNIQUE (delivery_person_id, tenant_id);


--
-- Name: delivery_person_wallet delivery_person_wallet_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_wallet
    ADD CONSTRAINT delivery_person_wallet_pkey PRIMARY KEY (id);


--
-- Name: delivery_persons delivery_persons_document_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_persons
    ADD CONSTRAINT delivery_persons_document_key UNIQUE (document);


--
-- Name: delivery_persons delivery_persons_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_persons
    ADD CONSTRAINT delivery_persons_email_key UNIQUE (email);


--
-- Name: delivery_persons delivery_persons_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_persons
    ADD CONSTRAINT delivery_persons_pkey PRIMARY KEY (id);


--
-- Name: delivery_settings delivery_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_settings
    ADD CONSTRAINT delivery_settings_pkey PRIMARY KEY (id);


--
-- Name: delivery_vehicle_assignments delivery_vehicle_assignments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_vehicle_assignments
    ADD CONSTRAINT delivery_vehicle_assignments_pkey PRIMARY KEY (id);


--
-- Name: delivery_zone_ceps delivery_zone_ceps_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_zone_ceps
    ADD CONSTRAINT delivery_zone_ceps_pkey PRIMARY KEY (id);


--
-- Name: delivery_zones delivery_zones_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_zones
    ADD CONSTRAINT delivery_zones_pkey PRIMARY KEY (id);


--
-- Name: discounts discounts_code_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.discounts
    ADD CONSTRAINT discounts_code_key UNIQUE (code);


--
-- Name: discounts discounts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.discounts
    ADD CONSTRAINT discounts_pkey PRIMARY KEY (id);


--
-- Name: documents documents_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_pkey PRIMARY KEY (id);


--
-- Name: event_images event_images_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event_images
    ADD CONSTRAINT event_images_pkey PRIMARY KEY (id);


--
-- Name: events events_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.events
    ADD CONSTRAINT events_pkey PRIMARY KEY (id);


--
-- Name: financial_categories financial_categories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.financial_categories
    ADD CONSTRAINT financial_categories_pkey PRIMARY KEY (id);


--
-- Name: financial_transactions financial_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.financial_transactions
    ADD CONSTRAINT financial_transactions_pkey PRIMARY KEY (id);


--
-- Name: freight_quotes freight_quotes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.freight_quotes
    ADD CONSTRAINT freight_quotes_pkey PRIMARY KEY (id);


--
-- Name: gallery_images gallery_images_entity_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gallery_images
    ADD CONSTRAINT gallery_images_entity_unique UNIQUE (entity_id, entity_type, media_item_id);


--
-- Name: group_discounts group_discounts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.group_discounts
    ADD CONSTRAINT group_discounts_pkey PRIMARY KEY (id);


--
-- Name: ingredient_cost_history ingredient_cost_history_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ingredient_cost_history
    ADD CONSTRAINT ingredient_cost_history_pkey PRIMARY KEY (id);


--
-- Name: ingredients ingredients_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ingredients
    ADD CONSTRAINT ingredients_pkey PRIMARY KEY (id);


--
-- Name: installments installments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.installments
    ADD CONSTRAINT installments_pkey PRIMARY KEY (id);


--
-- Name: languages languages_code_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.languages
    ADD CONSTRAINT languages_code_unique UNIQUE (code);


--
-- Name: languages languages_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.languages
    ADD CONSTRAINT languages_pkey PRIMARY KEY (id);


--
-- Name: measurement_units measurement_units_abbreviation_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.measurement_units
    ADD CONSTRAINT measurement_units_abbreviation_unique UNIQUE (abbreviation);


--
-- Name: measurement_units measurement_units_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.measurement_units
    ADD CONSTRAINT measurement_units_pkey PRIMARY KEY (id);


--
-- Name: media_items media_items_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.media_items
    ADD CONSTRAINT media_items_pkey PRIMARY KEY (id);


--
-- Name: menu_items menu_items_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.menu_items
    ADD CONSTRAINT menu_items_pkey PRIMARY KEY (id);


--
-- Name: modules modules_code_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.modules
    ADD CONSTRAINT modules_code_key UNIQUE (code);


--
-- Name: modules modules_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.modules
    ADD CONSTRAINT modules_pkey PRIMARY KEY (id);


--
-- Name: n8n_chat_histories n8n_chat_histories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.n8n_chat_histories
    ADD CONSTRAINT n8n_chat_histories_pkey PRIMARY KEY (id);


--
-- Name: gallery_images news_gallery_images_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gallery_images
    ADD CONSTRAINT news_gallery_images_pkey PRIMARY KEY (id);


--
-- Name: news news_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.news
    ADD CONSTRAINT news_pkey PRIMARY KEY (id);


--
-- Name: notification_recipients notification_recipients_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_recipients
    ADD CONSTRAINT notification_recipients_pkey PRIMARY KEY (id);


--
-- Name: notifications notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- Name: office_especialities office_especialities_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.office_especialities
    ADD CONSTRAINT office_especialities_pkey PRIMARY KEY (id);


--
-- Name: offices offices_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.offices
    ADD CONSTRAINT offices_pkey PRIMARY KEY (id);


--
-- Name: order_item_modifiers order_item_modifiers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_item_modifiers
    ADD CONSTRAINT order_item_modifiers_pkey PRIMARY KEY (id);


--
-- Name: order_items order_items_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_items
    ADD CONSTRAINT order_items_pkey PRIMARY KEY (id);


--
-- Name: order_session_item_modifiers order_session_item_modifiers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_session_item_modifiers
    ADD CONSTRAINT order_session_item_modifiers_pkey PRIMARY KEY (id);


--
-- Name: order_session_items order_session_items_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_session_items
    ADD CONSTRAINT order_session_items_pkey PRIMARY KEY (id);


--
-- Name: order_sessions order_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_sessions
    ADD CONSTRAINT order_sessions_pkey PRIMARY KEY (id);


--
-- Name: orders orders_order_number_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.orders
    ADD CONSTRAINT orders_order_number_key UNIQUE (order_number);


--
-- Name: orders orders_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.orders
    ADD CONSTRAINT orders_pkey PRIMARY KEY (id);


--
-- Name: payments payments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.payments
    ADD CONSTRAINT payments_pkey PRIMARY KEY (id);


--
-- Name: plan_modules plan_modules_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.plan_modules
    ADD CONSTRAINT plan_modules_pkey PRIMARY KEY (id);


--
-- Name: plan_modules plan_modules_plan_id_module_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.plan_modules
    ADD CONSTRAINT plan_modules_plan_id_module_id_key UNIQUE (plan_id, module_id);


--
-- Name: plans plans_name_business_type_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.plans
    ADD CONSTRAINT plans_name_business_type_unique UNIQUE (name, business_type);


--
-- Name: plans plans_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.plans
    ADD CONSTRAINT plans_pkey PRIMARY KEY (id);


--
-- Name: printer_stations printer_stations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.printer_stations
    ADD CONSTRAINT printer_stations_pkey PRIMARY KEY (id);


--
-- Name: product_categories product_categories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_categories
    ADD CONSTRAINT product_categories_pkey PRIMARY KEY (id);


--
-- Name: product_composition_eligibility product_composition_eligibility_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_composition_eligibility
    ADD CONSTRAINT product_composition_eligibility_pkey PRIMARY KEY (id);


--
-- Name: product_compositions product_compositions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_compositions
    ADD CONSTRAINT product_compositions_pkey PRIMARY KEY (id);


--
-- Name: product_cost_history product_cost_history_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_cost_history
    ADD CONSTRAINT product_cost_history_pkey PRIMARY KEY (id);


--
-- Name: product_images product_images_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_images
    ADD CONSTRAINT product_images_pkey PRIMARY KEY (id);


--
-- Name: product_ingredient_compositions product_ingredient_compositions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_compositions
    ADD CONSTRAINT product_ingredient_compositions_pkey PRIMARY KEY (id);


--
-- Name: product_ingredient_compositions product_ingredient_compositions_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_compositions
    ADD CONSTRAINT product_ingredient_compositions_unique UNIQUE (product_id, ingredient_id);


--
-- Name: product_ingredient_quantities product_ingredient_quantities_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_quantities
    ADD CONSTRAINT product_ingredient_quantities_pkey PRIMARY KEY (id);


--
-- Name: product_ingredient_quantities product_ingredient_quantities_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_quantities
    ADD CONSTRAINT product_ingredient_quantities_unique UNIQUE (product_id, ingredient_id, modifier_id);


--
-- Name: product_modifier_group_modifiers product_modifier_group_modifiers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_group_modifiers
    ADD CONSTRAINT product_modifier_group_modifiers_pkey PRIMARY KEY (id);


--
-- Name: product_modifier_group_relations product_modifier_group_relations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_group_relations
    ADD CONSTRAINT product_modifier_group_relations_pkey PRIMARY KEY (id);


--
-- Name: product_modifier_groups product_modifier_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_groups
    ADD CONSTRAINT product_modifier_groups_pkey PRIMARY KEY (id);


--
-- Name: product_modifier_prices product_modifier_prices_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_prices
    ADD CONSTRAINT product_modifier_prices_pkey PRIMARY KEY (id);


--
-- Name: product_modifier_prices product_modifier_prices_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_prices
    ADD CONSTRAINT product_modifier_prices_unique UNIQUE (product_id, modifier_id);


--
-- Name: product_modifiers product_modifiers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifiers
    ADD CONSTRAINT product_modifiers_pkey PRIMARY KEY (id);


--
-- Name: product_prices product_prices_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_prices
    ADD CONSTRAINT product_prices_pkey PRIMARY KEY (id);


--
-- Name: product_stock_batches product_stock_batches_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock_batches
    ADD CONSTRAINT product_stock_batches_pkey PRIMARY KEY (id);


--
-- Name: product_stock_movements product_stock_movements_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock_movements
    ADD CONSTRAINT product_stock_movements_pkey PRIMARY KEY (id);


--
-- Name: product_stock product_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock
    ADD CONSTRAINT product_stock_pkey PRIMARY KEY (id);


--
-- Name: product_variants product_variants_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_variants
    ADD CONSTRAINT product_variants_pkey PRIMARY KEY (id);


--
-- Name: product_variants product_variants_sku_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_variants
    ADD CONSTRAINT product_variants_sku_key UNIQUE (sku);


--
-- Name: products products_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_pkey PRIMARY KEY (id);


--
-- Name: products products_sku_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_sku_key UNIQUE (sku);


--
-- Name: profiles profiles_name_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_name_unique UNIQUE (name);


--
-- Name: profiles profiles_pkey1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_pkey1 PRIMARY KEY (id);


--
-- Name: reviews reviews_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_pkey PRIMARY KEY (id);


--
-- Name: search_history search_history_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.search_history
    ADD CONSTRAINT search_history_pkey PRIMARY KEY (id);


--
-- Name: search_history search_history_unique_user_term_per_tenant; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.search_history
    ADD CONSTRAINT search_history_unique_user_term_per_tenant UNIQUE (user_id, tenant_id, search_term);


--
-- Name: search_terms search_terms_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.search_terms
    ADD CONSTRAINT search_terms_pkey PRIMARY KEY (id);


--
-- Name: search_terms search_terms_unique_term_per_tenant; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.search_terms
    ADD CONSTRAINT search_terms_unique_term_per_tenant UNIQUE (tenant_id, term);


--
-- Name: service_availability service_availability_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_availability
    ADD CONSTRAINT service_availability_pkey PRIMARY KEY (id);


--
-- Name: service_booking_items service_booking_items_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_booking_items
    ADD CONSTRAINT service_booking_items_pkey PRIMARY KEY (id);


--
-- Name: service_bookings service_bookings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_bookings
    ADD CONSTRAINT service_bookings_pkey PRIMARY KEY (id);


--
-- Name: service_categories service_categories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_categories
    ADD CONSTRAINT service_categories_pkey PRIMARY KEY (id);


--
-- Name: service_provider_services service_provider_services_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_provider_services
    ADD CONSTRAINT service_provider_services_pkey PRIMARY KEY (id);


--
-- Name: service_provider_services service_provider_services_provider_id_service_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_provider_services
    ADD CONSTRAINT service_provider_services_provider_id_service_id_key UNIQUE (provider_id, service_id);


--
-- Name: service_providers service_providers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_providers
    ADD CONSTRAINT service_providers_pkey PRIMARY KEY (id);


--
-- Name: service_reviews service_reviews_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_reviews
    ADD CONSTRAINT service_reviews_pkey PRIMARY KEY (id);


--
-- Name: services services_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.services
    ADD CONSTRAINT services_pkey PRIMARY KEY (id);


--
-- Name: shipping shipping_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.shipping
    ADD CONSTRAINT shipping_pkey PRIMARY KEY (id);


--
-- Name: shipping_providers shipping_providers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.shipping_providers
    ADD CONSTRAINT shipping_providers_pkey PRIMARY KEY (id);


--
-- Name: shipping_services shipping_services_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.shipping_services
    ADD CONSTRAINT shipping_services_pkey PRIMARY KEY (id);


--
-- Name: site_settings site_settings_key_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.site_settings
    ADD CONSTRAINT site_settings_key_key UNIQUE (key);


--
-- Name: site_settings site_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.site_settings
    ADD CONSTRAINT site_settings_pkey PRIMARY KEY (id);


--
-- Name: social_media social_media_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.social_media
    ADD CONSTRAINT social_media_pkey PRIMARY KEY (id);


--
-- Name: specialities specialities_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.specialities
    ADD CONSTRAINT specialities_pkey PRIMARY KEY (id);


--
-- Name: stock_batches stock_batches_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_batches
    ADD CONSTRAINT stock_batches_pkey PRIMARY KEY (id);


--
-- Name: stock_movements stock_movements_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_movements
    ADD CONSTRAINT stock_movements_pkey PRIMARY KEY (id);


--
-- Name: subscription_modules subscription_modules_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subscription_modules
    ADD CONSTRAINT subscription_modules_pkey PRIMARY KEY (id);


--
-- Name: subscription_modules subscription_modules_subscription_id_module_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subscription_modules
    ADD CONSTRAINT subscription_modules_subscription_id_module_id_key UNIQUE (subscription_id, module_id);


--
-- Name: subscriptions subscriptions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subscriptions
    ADD CONSTRAINT subscriptions_pkey PRIMARY KEY (id);


--
-- Name: suppliers suppliers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.suppliers
    ADD CONSTRAINT suppliers_pkey PRIMARY KEY (id);


--
-- Name: support_categories support_categories_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_categories
    ADD CONSTRAINT support_categories_pkey PRIMARY KEY (id);


--
-- Name: support_faq support_faq_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_faq
    ADD CONSTRAINT support_faq_pkey PRIMARY KEY (id);


--
-- Name: support_ticket_ratings support_ticket_ratings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_ticket_ratings
    ADD CONSTRAINT support_ticket_ratings_pkey PRIMARY KEY (id);


--
-- Name: support_ticket_ratings support_ticket_ratings_ticket_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_ticket_ratings
    ADD CONSTRAINT support_ticket_ratings_ticket_id_user_id_key UNIQUE (ticket_id, user_id);


--
-- Name: support_ticket_responses support_ticket_responses_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_ticket_responses
    ADD CONSTRAINT support_ticket_responses_pkey PRIMARY KEY (id);


--
-- Name: support_tickets support_tickets_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_tickets
    ADD CONSTRAINT support_tickets_pkey PRIMARY KEY (id);


--
-- Name: tables tables_number_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tables
    ADD CONSTRAINT tables_number_unique UNIQUE (number);


--
-- Name: tables tables_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tables
    ADD CONSTRAINT tables_pkey PRIMARY KEY (id);


--
-- Name: tags tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: tenant_customers tenant_customers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_customers
    ADD CONSTRAINT tenant_customers_pkey PRIMARY KEY (id);


--
-- Name: tenant_customers tenant_customers_tenant_id_customer_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_customers
    ADD CONSTRAINT tenant_customers_tenant_id_customer_email_key UNIQUE (tenant_id, customer_email);


--
-- Name: tenant_delivery_persons tenant_delivery_persons_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_delivery_persons
    ADD CONSTRAINT tenant_delivery_persons_pkey PRIMARY KEY (id);


--
-- Name: tenant_delivery_persons tenant_delivery_persons_tenant_id_delivery_person_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_delivery_persons
    ADD CONSTRAINT tenant_delivery_persons_tenant_id_delivery_person_id_key UNIQUE (tenant_id, delivery_person_id);


--
-- Name: tenant_invitations tenant_invitations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_invitations
    ADD CONSTRAINT tenant_invitations_pkey PRIMARY KEY (id);


--
-- Name: tenant_invitations tenant_invitations_tenant_email_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_invitations
    ADD CONSTRAINT tenant_invitations_tenant_email_unique UNIQUE (tenant_id, email);


--
-- Name: tenant_invitations tenant_invitations_token_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_invitations
    ADD CONSTRAINT tenant_invitations_token_key UNIQUE (token);


--
-- Name: tenant_users tenant_users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_users
    ADD CONSTRAINT tenant_users_pkey PRIMARY KEY (id);


--
-- Name: tenant_users tenant_users_tenant_user_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_users
    ADD CONSTRAINT tenant_users_tenant_user_unique UNIQUE (tenant_id, user_id);


--
-- Name: tenants tenants_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenants
    ADD CONSTRAINT tenants_pkey PRIMARY KEY (id);


--
-- Name: tenants tenants_slug_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenants
    ADD CONSTRAINT tenants_slug_key UNIQUE (slug);


--
-- Name: testimonials testimonials_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.testimonials
    ADD CONSTRAINT testimonials_pkey PRIMARY KEY (id);


--
-- Name: product_composition_eligibility unique_composition_category; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_composition_eligibility
    ADD CONSTRAINT unique_composition_category UNIQUE (composition_id, category_id);


--
-- Name: product_composition_eligibility unique_composition_product; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_composition_eligibility
    ADD CONSTRAINT unique_composition_product UNIQUE (composition_id, product_id);


--
-- Name: product_modifier_group_modifiers unique_group_modifier; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_group_modifiers
    ADD CONSTRAINT unique_group_modifier UNIQUE (group_id, modifier_id);


--
-- Name: notification_recipients unique_notification_user; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_recipients
    ADD CONSTRAINT unique_notification_user UNIQUE (notification_id, user_id);


--
-- Name: product_modifier_group_relations unique_product_group; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_group_relations
    ADD CONSTRAINT unique_product_group UNIQUE (product_id, group_id);


--
-- Name: product_variants unique_product_variant; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_variants
    ADD CONSTRAINT unique_product_variant UNIQUE (product_id, name_pt);


--
-- Name: reviews unique_user_product_review; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT unique_user_product_review UNIQUE (user_id, product_id);


--
-- Name: user_address user_address_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_address
    ADD CONSTRAINT user_address_pkey PRIMARY KEY (id);


--
-- Name: user_discounts user_discounts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_discounts
    ADD CONSTRAINT user_discounts_pkey PRIMARY KEY (id);


--
-- Name: user_favorites user_favorites_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_favorites
    ADD CONSTRAINT user_favorites_pkey PRIMARY KEY (id);


--
-- Name: user_favorites user_favorites_unique_user_product_tenant; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_favorites
    ADD CONSTRAINT user_favorites_unique_user_product_tenant UNIQUE (user_id, product_id, tenant_id);


--
-- Name: user_profile user_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_roles_pkey PRIMARY KEY (id);


--
-- Name: user_roles user_roles_pkey1; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_pkey1 PRIMARY KEY (id);


--
-- Name: user_roles user_roles_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_user_id_key UNIQUE (user_id);


--
-- Name: user_settings user_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_settings
    ADD CONSTRAINT user_settings_pkey PRIMARY KEY (id);


--
-- Name: user_settings user_settings_user_id_tenant_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_settings
    ADD CONSTRAINT user_settings_user_id_tenant_id_key UNIQUE (user_id, tenant_id);


--
-- Name: users users_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_email_key UNIQUE (email);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: waiters waiters_code_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.waiters
    ADD CONSTRAINT waiters_code_unique UNIQUE (code);


--
-- Name: waiters waiters_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.waiters
    ADD CONSTRAINT waiters_pkey PRIMARY KEY (id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets_analytics buckets_analytics_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets_analytics
    ADD CONSTRAINT buckets_analytics_pkey PRIMARY KEY (id);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: prefixes prefixes_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.prefixes
    ADD CONSTRAINT prefixes_pkey PRIMARY KEY (bucket_id, level, name);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_idempotency_key_key; Type: CONSTRAINT; Schema: supabase_migrations; Owner: postgres
--

ALTER TABLE ONLY supabase_migrations.schema_migrations
    ADD CONSTRAINT schema_migrations_idempotency_key_key UNIQUE (idempotency_key);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: supabase_migrations; Owner: postgres
--

ALTER TABLE ONLY supabase_migrations.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: oauth_auth_pending_exp_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX oauth_auth_pending_exp_idx ON auth.oauth_authorizations USING btree (expires_at) WHERE (status = 'pending'::auth.oauth_authorization_status);


--
-- Name: oauth_clients_deleted_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX oauth_clients_deleted_at_idx ON auth.oauth_clients USING btree (deleted_at);


--
-- Name: oauth_consents_active_client_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX oauth_consents_active_client_idx ON auth.oauth_consents USING btree (client_id) WHERE (revoked_at IS NULL);


--
-- Name: oauth_consents_active_user_client_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX oauth_consents_active_user_client_idx ON auth.oauth_consents USING btree (user_id, client_id) WHERE (revoked_at IS NULL);


--
-- Name: oauth_consents_user_order_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX oauth_consents_user_order_idx ON auth.oauth_consents USING btree (user_id, granted_at DESC);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_oauth_client_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_oauth_client_id_idx ON auth.sessions USING btree (oauth_client_id);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: sso_providers_resource_id_pattern_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_providers_resource_id_pattern_idx ON auth.sso_providers USING btree (resource_id text_pattern_ops);


--
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: idx_accounts_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_accounts_tenant_id ON public.accounts USING btree (tenant_id);


--
-- Name: idx_api_keys_service; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_api_keys_service ON public.api_keys USING btree (service_name);


--
-- Name: idx_api_keys_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_api_keys_tenant ON public.api_keys USING btree (tenant_id);


--
-- Name: idx_banners_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_banners_tenant_id ON public.banners USING btree (tenant_id);


--
-- Name: idx_brands_is_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_brands_is_active ON public.brands USING btree (is_active);


--
-- Name: idx_brands_name; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_brands_name ON public.brands USING btree (name);


--
-- Name: idx_brands_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_brands_tenant_id ON public.brands USING btree (tenant_id);


--
-- Name: idx_business_settings_business_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_business_settings_business_type ON public.business_settings USING btree (business_type);


--
-- Name: idx_business_settings_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_business_settings_tenant_id ON public.business_settings USING btree (tenant_id);


--
-- Name: idx_business_types_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_business_types_active ON public.business_types USING btree (is_active);


--
-- Name: idx_business_types_code; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_business_types_code ON public.business_types USING btree (code);


--
-- Name: idx_business_types_sort_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_business_types_sort_order ON public.business_types USING btree (sort_order);


--
-- Name: idx_cash_register_sessions_is_closed; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_cash_register_sessions_is_closed ON public.cash_register_sessions USING btree (is_closed);


--
-- Name: idx_categories_code; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_categories_code ON public.categories USING btree (code);


--
-- Name: idx_categories_is_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_categories_is_active ON public.categories USING btree (is_active);


--
-- Name: idx_categories_name_pt; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_categories_name_pt ON public.categories USING btree (name_pt);


--
-- Name: idx_categories_parent_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_categories_parent_id ON public.categories USING btree (parent_id);


--
-- Name: idx_categories_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_categories_tenant_id ON public.categories USING btree (tenant_id);


--
-- Name: idx_categories_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_categories_type ON public.categories USING btree (category_type);


--
-- Name: idx_company_vehicle_usage_dates; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_company_vehicle_usage_dates ON public.company_vehicle_usage USING btree (start_date, end_date);


--
-- Name: idx_company_vehicle_usage_person; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_company_vehicle_usage_person ON public.company_vehicle_usage USING btree (delivery_person_id);


--
-- Name: idx_company_vehicle_usage_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_company_vehicle_usage_tenant ON public.company_vehicle_usage USING btree (tenant_id);


--
-- Name: idx_company_vehicle_usage_vehicle; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_company_vehicle_usage_vehicle ON public.company_vehicle_usage USING btree (company_vehicle_id);


--
-- Name: idx_company_vehicles_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_company_vehicles_active ON public.company_vehicles USING btree (is_active, is_available);


--
-- Name: idx_company_vehicles_current_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_company_vehicles_current_user ON public.company_vehicles USING btree (current_delivery_person_id) WHERE (current_delivery_person_id IS NOT NULL);


--
-- Name: idx_company_vehicles_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_company_vehicles_tenant ON public.company_vehicles USING btree (tenant_id);


--
-- Name: idx_delivery_addresses_default; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_addresses_default ON public.delivery_addresses USING btree (user_id, is_default);


--
-- Name: idx_delivery_addresses_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_addresses_user ON public.delivery_addresses USING btree (user_id);


--
-- Name: idx_delivery_addresses_zip; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_addresses_zip ON public.delivery_addresses USING btree (zip_code);


--
-- Name: idx_delivery_orders_address; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_orders_address ON public.delivery_orders USING btree (delivery_address_id);


--
-- Name: idx_delivery_orders_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_orders_order ON public.delivery_orders USING btree (order_id);


--
-- Name: idx_delivery_orders_person; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_orders_person ON public.delivery_orders USING btree (delivery_person_id);


--
-- Name: idx_delivery_orders_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_orders_status ON public.delivery_orders USING btree (status);


--
-- Name: idx_delivery_orders_zone; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_orders_zone ON public.delivery_orders USING btree (delivery_zone_id);


--
-- Name: idx_delivery_person_ratings_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_ratings_order ON public.delivery_person_ratings USING btree (delivery_order_id);


--
-- Name: idx_delivery_person_ratings_person; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_ratings_person ON public.delivery_person_ratings USING btree (delivery_person_id);


--
-- Name: idx_delivery_person_ratings_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_ratings_user ON public.delivery_person_ratings USING btree (user_id);


--
-- Name: idx_delivery_person_status_history_created; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_status_history_created ON public.delivery_person_status_history USING btree (created_at);


--
-- Name: idx_delivery_person_status_history_person; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_status_history_person ON public.delivery_person_status_history USING btree (delivery_person_id);


--
-- Name: idx_delivery_person_transactions_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_transactions_order ON public.delivery_person_transactions USING btree (delivery_order_id);


--
-- Name: idx_delivery_person_transactions_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_transactions_status ON public.delivery_person_transactions USING btree (status);


--
-- Name: idx_delivery_person_transactions_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_transactions_type ON public.delivery_person_transactions USING btree (type);


--
-- Name: idx_delivery_person_transactions_wallet; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_transactions_wallet ON public.delivery_person_transactions USING btree (wallet_id);


--
-- Name: idx_delivery_person_vehicles_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_vehicles_active ON public.delivery_person_vehicles USING btree (is_active);


--
-- Name: idx_delivery_person_vehicles_person; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_vehicles_person ON public.delivery_person_vehicles USING btree (delivery_person_id);


--
-- Name: idx_delivery_person_vehicles_primary; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_vehicles_primary ON public.delivery_person_vehicles USING btree (delivery_person_id, is_primary) WHERE (is_primary = true);


--
-- Name: idx_delivery_person_wallet_person; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_wallet_person ON public.delivery_person_wallet USING btree (delivery_person_id);


--
-- Name: idx_delivery_person_wallet_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_person_wallet_tenant ON public.delivery_person_wallet USING btree (tenant_id);


--
-- Name: idx_delivery_persons_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_persons_active ON public.delivery_persons USING btree (is_active);


--
-- Name: idx_delivery_persons_document; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_persons_document ON public.delivery_persons USING btree (document);


--
-- Name: idx_delivery_persons_email; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_persons_email ON public.delivery_persons USING btree (email);


--
-- Name: idx_delivery_persons_location; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_persons_location ON public.delivery_persons USING btree (current_latitude, current_longitude);


--
-- Name: idx_delivery_persons_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_persons_status ON public.delivery_persons USING btree (status);


--
-- Name: idx_delivery_persons_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_persons_user ON public.delivery_persons USING btree (user_profile_id);


--
-- Name: idx_delivery_settings_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_settings_tenant ON public.delivery_settings USING btree (tenant_id);


--
-- Name: idx_delivery_vehicle_assignments_company_vehicle; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_vehicle_assignments_company_vehicle ON public.delivery_vehicle_assignments USING btree (company_vehicle_id);


--
-- Name: idx_delivery_vehicle_assignments_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_vehicle_assignments_date ON public.delivery_vehicle_assignments USING btree (assignment_date);


--
-- Name: idx_delivery_vehicle_assignments_person; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_vehicle_assignments_person ON public.delivery_vehicle_assignments USING btree (delivery_person_id);


--
-- Name: idx_delivery_vehicle_assignments_personal_vehicle; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_vehicle_assignments_personal_vehicle ON public.delivery_vehicle_assignments USING btree (personal_vehicle_id);


--
-- Name: idx_delivery_zone_ceps_range; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_zone_ceps_range ON public.delivery_zone_ceps USING btree (cep_start, cep_end);


--
-- Name: idx_delivery_zone_ceps_zone; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_zone_ceps_zone ON public.delivery_zone_ceps USING btree (delivery_zone_id);


--
-- Name: idx_delivery_zones_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_zones_active ON public.delivery_zones USING btree (is_active);


--
-- Name: idx_delivery_zones_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_delivery_zones_tenant ON public.delivery_zones USING btree (tenant_id);


--
-- Name: idx_discounts_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_discounts_active ON public.discounts USING btree (is_active);


--
-- Name: idx_discounts_applies_to_first_purchase; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_discounts_applies_to_first_purchase ON public.discounts USING btree (applies_to_first_purchase_only) WHERE (applies_to_first_purchase_only = true);


--
-- Name: idx_discounts_category_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_discounts_category_id ON public.discounts USING btree (category_id);


--
-- Name: idx_discounts_code; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_discounts_code ON public.discounts USING btree (code);


--
-- Name: idx_discounts_order_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_discounts_order_index ON public.discounts USING btree (order_index);


--
-- Name: idx_discounts_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_discounts_tenant_id ON public.discounts USING btree (tenant_id);


--
-- Name: idx_discounts_valid_dates; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_discounts_valid_dates ON public.discounts USING btree (valid_from, valid_until);


--
-- Name: idx_event_images_event_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_event_images_event_id ON public.event_images USING btree (event_id);


--
-- Name: idx_events_event_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_events_event_date ON public.events USING btree (event_date);


--
-- Name: idx_events_is_featured; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_events_is_featured ON public.events USING btree (is_featured);


--
-- Name: idx_events_is_published; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_events_is_published ON public.events USING btree (is_published);


--
-- Name: idx_events_type_pt; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_events_type_pt ON public.events USING btree (type_pt);


--
-- Name: idx_financial_transactions_account; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_financial_transactions_account ON public.financial_transactions USING btree (account_id);


--
-- Name: idx_financial_transactions_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_financial_transactions_date ON public.financial_transactions USING btree (transaction_date);


--
-- Name: idx_financial_transactions_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_financial_transactions_status ON public.financial_transactions USING btree (status);


--
-- Name: idx_financial_transactions_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_financial_transactions_type ON public.financial_transactions USING btree (type);


--
-- Name: idx_freight_quotes_ceps; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_freight_quotes_ceps ON public.freight_quotes USING btree (origin_cep, destination_cep);


--
-- Name: idx_freight_quotes_expires; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_freight_quotes_expires ON public.freight_quotes USING btree (expires_at);


--
-- Name: idx_freight_quotes_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_freight_quotes_order ON public.freight_quotes USING btree (order_id);


--
-- Name: idx_freight_quotes_service; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_freight_quotes_service ON public.freight_quotes USING btree (shipping_service_id);


--
-- Name: idx_freight_quotes_valid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_freight_quotes_valid ON public.freight_quotes USING btree (is_valid);


--
-- Name: idx_gallery_entity_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_gallery_entity_id ON public.gallery_images USING btree (entity_id);


--
-- Name: idx_gallery_images_entity; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_gallery_images_entity ON public.gallery_images USING btree (entity_id, entity_type);


--
-- Name: idx_gallery_images_media_item_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_gallery_images_media_item_id ON public.gallery_images USING btree (media_item_id);


--
-- Name: idx_gallery_images_sort_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_gallery_images_sort_order ON public.gallery_images USING btree (sort_order);


--
-- Name: idx_gallery_media_item_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_gallery_media_item_id ON public.gallery_images USING btree (media_item_id);


--
-- Name: idx_gallery_sort_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_gallery_sort_order ON public.gallery_images USING btree (entity_id, sort_order);


--
-- Name: idx_group_discounts_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_group_discounts_active ON public.group_discounts USING btree (is_active);


--
-- Name: idx_group_discounts_dates; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_group_discounts_dates ON public.group_discounts USING btree (start_date, end_date);


--
-- Name: idx_group_discounts_promotion; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_group_discounts_promotion ON public.group_discounts USING btree (sankhya_promotion_number);


--
-- Name: idx_group_discounts_sankhya_group; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_group_discounts_sankhya_group ON public.group_discounts USING btree (sankhya_group_code);


--
-- Name: idx_group_modifiers_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_group_modifiers_active ON public.product_modifier_group_modifiers USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_group_modifiers_group; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_group_modifiers_group ON public.product_modifier_group_modifiers USING btree (group_id);


--
-- Name: idx_group_modifiers_modifier; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_group_modifiers_modifier ON public.product_modifier_group_modifiers USING btree (modifier_id);


--
-- Name: idx_ingredient_cost_history_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_ingredient_cost_history_date ON public.ingredient_cost_history USING btree (effective_date DESC);


--
-- Name: idx_ingredient_cost_history_ingredient; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_ingredient_cost_history_ingredient ON public.ingredient_cost_history USING btree (ingredient_id);


--
-- Name: idx_ingredient_cost_history_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_ingredient_cost_history_tenant_id ON public.ingredient_cost_history USING btree (tenant_id);


--
-- Name: idx_ingredients_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_ingredients_active ON public.ingredients USING btree (is_active);


--
-- Name: idx_ingredients_item_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_ingredients_item_type ON public.ingredients USING btree (item_type);


--
-- Name: idx_ingredients_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_ingredients_tenant_id ON public.ingredients USING btree (tenant_id);


--
-- Name: idx_installments_due_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_installments_due_date ON public.installments USING btree (due_date);


--
-- Name: idx_installments_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_installments_status ON public.installments USING btree (status);


--
-- Name: idx_languages_is_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_languages_is_active ON public.languages USING btree (is_active);


--
-- Name: idx_languages_sort_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_languages_sort_order ON public.languages USING btree (sort_order);


--
-- Name: idx_media_items_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_media_items_created_at ON public.media_items USING btree (created_at DESC);


--
-- Name: idx_media_items_filename; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_media_items_filename ON public.media_items USING btree (filename);


--
-- Name: idx_menu_items_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_menu_items_active ON public.menu_items USING btree (is_active);


--
-- Name: idx_menu_items_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_menu_items_order ON public.menu_items USING btree (order_index);


--
-- Name: idx_modules_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_modules_active ON public.modules USING btree (is_active);


--
-- Name: idx_modules_code; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_modules_code ON public.modules USING btree (code);


--
-- Name: idx_news_category_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_news_category_id ON public.news USING btree (category_id);


--
-- Name: idx_news_is_featured; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_news_is_featured ON public.news USING btree (is_featured);


--
-- Name: idx_news_is_published; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_news_is_published ON public.news USING btree (is_published);


--
-- Name: idx_news_published_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_news_published_date ON public.news USING btree (published_date DESC);


--
-- Name: idx_notification_recipients_is_read; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notification_recipients_is_read ON public.notification_recipients USING btree (is_read);


--
-- Name: idx_notification_recipients_notification_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notification_recipients_notification_id ON public.notification_recipients USING btree (notification_id);


--
-- Name: idx_notification_recipients_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notification_recipients_user_id ON public.notification_recipients USING btree (user_id);


--
-- Name: idx_notification_recipients_user_unread; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notification_recipients_user_unread ON public.notification_recipients USING btree (user_id, is_read) WHERE (is_read = false);


--
-- Name: idx_notifications_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notifications_active ON public.notifications USING btree (is_active);


--
-- Name: idx_notifications_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notifications_created_at ON public.notifications USING btree (created_at DESC);


--
-- Name: idx_notifications_expires; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notifications_expires ON public.notifications USING btree (expires_at);


--
-- Name: idx_notifications_scheduled; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notifications_scheduled ON public.notifications USING btree (scheduled_at);


--
-- Name: idx_notifications_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notifications_tenant_id ON public.notifications USING btree (tenant_id);


--
-- Name: idx_notifications_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notifications_type ON public.notifications USING btree (notification_type);


--
-- Name: idx_offices_city; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_offices_city ON public.offices USING btree (city);


--
-- Name: idx_offices_country_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_offices_country_id ON public.offices USING btree (country_id);


--
-- Name: idx_order_item_modifiers_modifier_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_order_item_modifiers_modifier_id ON public.order_item_modifiers USING btree (modifier_id);


--
-- Name: idx_order_item_modifiers_order_item_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_order_item_modifiers_order_item_id ON public.order_item_modifiers USING btree (order_item_id);


--
-- Name: idx_order_items_order_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_order_items_order_id ON public.order_items USING btree (order_id);


--
-- Name: idx_order_items_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_order_items_product_id ON public.order_items USING btree (product_id);


--
-- Name: idx_orders_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_orders_created_at ON public.orders USING btree (created_at);


--
-- Name: idx_orders_draft_expires; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_orders_draft_expires ON public.orders USING btree (draft_expires_at) WHERE (is_draft = true);


--
-- Name: idx_orders_payment_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_orders_payment_status ON public.orders USING btree (payment_status);


--
-- Name: idx_orders_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_orders_status ON public.orders USING btree (status);


--
-- Name: idx_orders_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_orders_tenant_id ON public.orders USING btree (tenant_id);


--
-- Name: idx_orders_user_draft; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_orders_user_draft ON public.orders USING btree (user_id, is_draft) WHERE (is_draft = true);


--
-- Name: idx_orders_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_orders_user_id ON public.orders USING btree (user_id);


--
-- Name: idx_payments_order_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_payments_order_id ON public.payments USING btree (order_id);


--
-- Name: idx_payments_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_payments_status ON public.payments USING btree (status);


--
-- Name: idx_plan_modules_module; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_plan_modules_module ON public.plan_modules USING btree (module_id);


--
-- Name: idx_plan_modules_plan; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_plan_modules_plan ON public.plan_modules USING btree (plan_id);


--
-- Name: idx_plans_business_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_plans_business_type ON public.plans USING btree (business_type);


--
-- Name: idx_product_categories_is_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_categories_is_active ON public.product_categories USING btree (is_active);


--
-- Name: idx_product_categories_parent_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_categories_parent_id ON public.product_categories USING btree (parent_id);


--
-- Name: idx_product_categories_slug_en; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_categories_slug_en ON public.product_categories USING btree (slug_en);


--
-- Name: idx_product_categories_slug_es; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_categories_slug_es ON public.product_categories USING btree (slug_es);


--
-- Name: idx_product_categories_slug_pt; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_categories_slug_pt ON public.product_categories USING btree (slug_pt);


--
-- Name: idx_product_categories_sort_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_categories_sort_order ON public.product_categories USING btree (sort_order);


--
-- Name: idx_product_categories_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_categories_tenant_id ON public.product_categories USING btree (tenant_id);


--
-- Name: idx_product_compositions_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_compositions_active ON public.product_compositions USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_product_cost_history_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_cost_history_date ON public.product_cost_history USING btree (movement_date);


--
-- Name: idx_product_cost_history_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_cost_history_product_id ON public.product_cost_history USING btree (product_id);


--
-- Name: idx_product_images_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_images_product_id ON public.product_images USING btree (product_id);


--
-- Name: idx_product_images_sort_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_images_sort_order ON public.product_images USING btree (product_id, sort_order);


--
-- Name: idx_product_ingredient_compositions_ingredient; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_ingredient_compositions_ingredient ON public.product_ingredient_compositions USING btree (ingredient_id);


--
-- Name: idx_product_ingredient_compositions_product; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_ingredient_compositions_product ON public.product_ingredient_compositions USING btree (product_id);


--
-- Name: idx_product_ingredient_quantities_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_ingredient_quantities_active ON public.product_ingredient_quantities USING btree (is_active);


--
-- Name: idx_product_ingredient_quantities_ingredient_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_ingredient_quantities_ingredient_id ON public.product_ingredient_quantities USING btree (ingredient_id);


--
-- Name: idx_product_ingredient_quantities_modifier_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_ingredient_quantities_modifier_id ON public.product_ingredient_quantities USING btree (modifier_id);


--
-- Name: idx_product_ingredient_quantities_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_ingredient_quantities_product_id ON public.product_ingredient_quantities USING btree (product_id);


--
-- Name: idx_product_modifier_group_relations_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifier_group_relations_tenant_id ON public.product_modifier_group_relations USING btree (tenant_id);


--
-- Name: idx_product_modifier_groups_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifier_groups_active ON public.product_modifier_groups USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_product_modifier_groups_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifier_groups_tenant_id ON public.product_modifier_groups USING btree (tenant_id);


--
-- Name: idx_product_modifier_prices_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifier_prices_active ON public.product_modifier_prices USING btree (is_active);


--
-- Name: idx_product_modifier_prices_modifier_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifier_prices_modifier_id ON public.product_modifier_prices USING btree (modifier_id);


--
-- Name: idx_product_modifier_prices_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifier_prices_product_id ON public.product_modifier_prices USING btree (product_id);


--
-- Name: idx_product_modifier_relations_group; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifier_relations_group ON public.product_modifier_group_relations USING btree (group_id);


--
-- Name: idx_product_modifier_relations_product; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifier_relations_product ON public.product_modifier_group_relations USING btree (product_id);


--
-- Name: idx_product_modifiers_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifiers_active ON public.product_modifiers USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_product_modifiers_ingredient_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifiers_ingredient_id ON public.product_modifiers USING btree (ingredient_id);


--
-- Name: idx_product_modifiers_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifiers_tenant_id ON public.product_modifiers USING btree (tenant_id);


--
-- Name: idx_product_modifiers_use_ingredient_stock; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_modifiers_use_ingredient_stock ON public.product_modifiers USING btree (use_ingredient_stock);


--
-- Name: idx_product_prices_discount_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_prices_discount_type ON public.product_prices USING btree (discount_type);


--
-- Name: idx_product_prices_is_on_sale; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_prices_is_on_sale ON public.product_prices USING btree (is_on_sale);


--
-- Name: idx_product_prices_is_promotional; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_prices_is_promotional ON public.product_prices USING btree (is_promotional);


--
-- Name: idx_product_prices_on_sale; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_prices_on_sale ON public.product_prices USING btree (is_on_sale);


--
-- Name: idx_product_prices_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_prices_product_id ON public.product_prices USING btree (product_id);


--
-- Name: idx_product_prices_promotional; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_prices_promotional ON public.product_prices USING btree (is_promotional);


--
-- Name: idx_product_prices_promotional_dates; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_prices_promotional_dates ON public.product_prices USING btree (promotional_start_date, promotional_end_date);


--
-- Name: idx_product_prices_sale_dates; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_prices_sale_dates ON public.product_prices USING btree (sale_start_date, sale_end_date);


--
-- Name: idx_product_prices_sankhya_company; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_prices_sankhya_company ON public.product_prices USING btree (sankhya_company_code);


--
-- Name: idx_product_prices_sankhya_promotion; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_prices_sankhya_promotion ON public.product_prices USING btree (sankhya_promotion_number);


--
-- Name: idx_product_reviews_stats_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_product_reviews_stats_product_id ON public.product_reviews_stats USING btree (product_id);


--
-- Name: idx_product_stock_batches_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_batches_active ON public.product_stock_batches USING btree (is_active);


--
-- Name: idx_product_stock_batches_expiry; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_batches_expiry ON public.product_stock_batches USING btree (expiry_date);


--
-- Name: idx_product_stock_batches_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_batches_product_id ON public.product_stock_batches USING btree (product_id);


--
-- Name: idx_product_stock_batches_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_batches_tenant_id ON public.product_stock_batches USING btree (tenant_id);


--
-- Name: idx_product_stock_movements_movement_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_movements_movement_date ON public.product_stock_movements USING btree (movement_date);


--
-- Name: idx_product_stock_movements_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_movements_product_id ON public.product_stock_movements USING btree (product_id);


--
-- Name: idx_product_stock_movements_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_movements_tenant_id ON public.product_stock_movements USING btree (tenant_id);


--
-- Name: idx_product_stock_movements_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_movements_type ON public.product_stock_movements USING btree (movement_type);


--
-- Name: idx_product_stock_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_product_id ON public.product_stock USING btree (product_id);


--
-- Name: idx_product_stock_quantity; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_quantity ON public.product_stock USING btree (quantity);


--
-- Name: idx_product_stock_stock_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_stock_status ON public.product_stock USING btree (stock_status);


--
-- Name: idx_product_stock_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_stock_tenant_id ON public.product_stock USING btree (tenant_id);


--
-- Name: idx_product_variants_default; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_variants_default ON public.product_variants USING btree (is_default) WHERE (is_default = true);


--
-- Name: idx_product_variants_product; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_product_variants_product ON public.product_variants USING btree (product_id);


--
-- Name: idx_products_barcode; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_barcode ON public.products USING btree (barcode);


--
-- Name: idx_products_best_seller; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_best_seller ON public.products USING btree (is_best_seller) WHERE ((is_best_seller = true) AND (is_active = true));


--
-- Name: idx_products_brand_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_brand_id ON public.products USING btree (brand_id);


--
-- Name: idx_products_image_url; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_image_url ON public.products USING btree (image_url) WHERE (image_url IS NOT NULL);


--
-- Name: idx_products_is_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_is_active ON public.products USING btree (is_active);


--
-- Name: idx_products_is_featured; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_is_featured ON public.products USING btree (is_featured);


--
-- Name: idx_products_is_published; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_is_published ON public.products USING btree (is_published);


--
-- Name: idx_products_sku; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_sku ON public.products USING btree (sku);


--
-- Name: idx_products_tags; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_tags ON public.products USING gin (tags);


--
-- Name: idx_products_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_tenant_id ON public.products USING btree (tenant_id);


--
-- Name: idx_products_type_unit; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_type_unit ON public.products USING btree (product_type, unit);


--
-- Name: idx_products_unit; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_products_unit ON public.products USING btree (unit);


--
-- Name: idx_reviews_approved; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_reviews_approved ON public.reviews USING btree (is_approved);


--
-- Name: idx_reviews_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_reviews_created_at ON public.reviews USING btree (created_at);


--
-- Name: idx_reviews_is_approved; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_reviews_is_approved ON public.reviews USING btree (is_approved);


--
-- Name: idx_reviews_product_approved_created; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_reviews_product_approved_created ON public.reviews USING btree (product_id, is_approved, created_at DESC);


--
-- Name: idx_reviews_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_reviews_product_id ON public.reviews USING btree (product_id);


--
-- Name: idx_reviews_rating; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_reviews_rating ON public.reviews USING btree (rating);


--
-- Name: idx_reviews_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_reviews_user_id ON public.reviews USING btree (user_id);


--
-- Name: idx_search_history_term; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_search_history_term ON public.search_history USING btree (search_term);


--
-- Name: idx_search_history_user_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_search_history_user_tenant ON public.search_history USING btree (user_id, tenant_id, last_searched_at DESC);


--
-- Name: idx_search_terms_tenant_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_search_terms_tenant_active ON public.search_terms USING btree (tenant_id, is_active, search_count DESC);


--
-- Name: idx_search_terms_term; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_search_terms_term ON public.search_terms USING btree (term);


--
-- Name: idx_service_availability_provider_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_availability_provider_id ON public.service_availability USING btree (provider_id);


--
-- Name: idx_service_bookings_customer_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_bookings_customer_id ON public.service_bookings USING btree (customer_id);


--
-- Name: idx_service_bookings_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_bookings_date ON public.service_bookings USING btree (booking_date);


--
-- Name: idx_service_bookings_provider_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_bookings_provider_id ON public.service_bookings USING btree (provider_id);


--
-- Name: idx_service_bookings_service_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_bookings_service_id ON public.service_bookings USING btree (service_id);


--
-- Name: idx_service_bookings_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_bookings_status ON public.service_bookings USING btree (status);


--
-- Name: idx_service_bookings_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_bookings_tenant_id ON public.service_bookings USING btree (tenant_id);


--
-- Name: idx_service_categories_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_categories_active ON public.service_categories USING btree (is_active);


--
-- Name: idx_service_categories_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_categories_tenant_id ON public.service_categories USING btree (tenant_id);


--
-- Name: idx_service_providers_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_providers_active ON public.service_providers USING btree (is_active);


--
-- Name: idx_service_providers_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_providers_tenant_id ON public.service_providers USING btree (tenant_id);


--
-- Name: idx_service_reviews_provider_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_reviews_provider_id ON public.service_reviews USING btree (provider_id);


--
-- Name: idx_service_reviews_service_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_reviews_service_id ON public.service_reviews USING btree (service_id);


--
-- Name: idx_service_session_items_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_session_items_status ON public.order_session_items USING btree (kitchen_status);


--
-- Name: idx_service_sessions_is_closed; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_sessions_is_closed ON public.order_sessions USING btree (is_closed);


--
-- Name: idx_service_sessions_table_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_service_sessions_table_id ON public.order_sessions USING btree (table_id);


--
-- Name: idx_services_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_services_active ON public.services USING btree (is_active);


--
-- Name: idx_services_category_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_services_category_id ON public.services USING btree (category_id);


--
-- Name: idx_services_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_services_tenant_id ON public.services USING btree (tenant_id);


--
-- Name: idx_shipping_order_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shipping_order_id ON public.shipping USING btree (order_id);


--
-- Name: idx_shipping_providers_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shipping_providers_active ON public.shipping_providers USING btree (is_active);


--
-- Name: idx_shipping_providers_calculation_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shipping_providers_calculation_type ON public.shipping_providers USING btree (freight_calculation_type);


--
-- Name: idx_shipping_providers_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shipping_providers_tenant ON public.shipping_providers USING btree (tenant_id);


--
-- Name: idx_shipping_providers_tenant_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shipping_providers_tenant_active ON public.shipping_providers USING btree (tenant_id, is_active);


--
-- Name: idx_shipping_providers_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shipping_providers_type ON public.shipping_providers USING btree (provider_type);


--
-- Name: idx_shipping_services_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shipping_services_active ON public.shipping_services USING btree (is_active);


--
-- Name: idx_shipping_services_external_code; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shipping_services_external_code ON public.shipping_services USING btree (external_code);


--
-- Name: idx_shipping_services_provider; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_shipping_services_provider ON public.shipping_services USING btree (shipping_provider_id);


--
-- Name: idx_site_settings_category; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_site_settings_category ON public.site_settings USING btree (category);


--
-- Name: idx_site_settings_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_site_settings_key ON public.site_settings USING btree (key);


--
-- Name: idx_social_media_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_social_media_active ON public.social_media USING btree (is_active);


--
-- Name: idx_social_media_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_social_media_order ON public.social_media USING btree (order_index);


--
-- Name: idx_social_media_platform; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_social_media_platform ON public.social_media USING btree (platform);


--
-- Name: idx_stock_batches_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_stock_batches_active ON public.stock_batches USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_stock_batches_expiry; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_stock_batches_expiry ON public.stock_batches USING btree (expiry_date) WHERE (expiry_date IS NOT NULL);


--
-- Name: idx_stock_batches_ingredient; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_stock_batches_ingredient ON public.stock_batches USING btree (ingredient_id);


--
-- Name: idx_stock_batches_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_stock_batches_tenant_id ON public.stock_batches USING btree (tenant_id);


--
-- Name: idx_stock_movements_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_stock_movements_date ON public.stock_movements USING btree (movement_date DESC);


--
-- Name: idx_stock_movements_ingredient; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_stock_movements_ingredient ON public.stock_movements USING btree (ingredient_id);


--
-- Name: idx_stock_movements_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_stock_movements_tenant_id ON public.stock_movements USING btree (tenant_id);


--
-- Name: idx_stock_movements_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_stock_movements_type ON public.stock_movements USING btree (movement_type);


--
-- Name: idx_subscription_modules_module; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_subscription_modules_module ON public.subscription_modules USING btree (module_id);


--
-- Name: idx_subscription_modules_subscription; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_subscription_modules_subscription ON public.subscription_modules USING btree (subscription_id);


--
-- Name: idx_subscriptions_current_period_end; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_subscriptions_current_period_end ON public.subscriptions USING btree (current_period_end);


--
-- Name: idx_subscriptions_plan_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_subscriptions_plan_id ON public.subscriptions USING btree (plan_id);


--
-- Name: idx_subscriptions_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_subscriptions_tenant_id ON public.subscriptions USING btree (tenant_id);


--
-- Name: idx_suppliers_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_suppliers_tenant_id ON public.suppliers USING btree (tenant_id);


--
-- Name: idx_support_categories_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_categories_active ON public.support_categories USING btree (is_active);


--
-- Name: idx_support_categories_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_categories_tenant_id ON public.support_categories USING btree (tenant_id);


--
-- Name: idx_support_faq_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_faq_active ON public.support_faq USING btree (is_active);


--
-- Name: idx_support_faq_category; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_faq_category ON public.support_faq USING btree (category);


--
-- Name: idx_support_faq_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_faq_order ON public.support_faq USING btree (order_index);


--
-- Name: idx_support_faq_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_faq_tenant_id ON public.support_faq USING btree (tenant_id);


--
-- Name: idx_support_ticket_ratings_ticket_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_ticket_ratings_ticket_id ON public.support_ticket_ratings USING btree (ticket_id);


--
-- Name: idx_support_ticket_ratings_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_ticket_ratings_user_id ON public.support_ticket_ratings USING btree (user_id);


--
-- Name: idx_support_ticket_responses_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_ticket_responses_created_at ON public.support_ticket_responses USING btree (created_at DESC);


--
-- Name: idx_support_ticket_responses_ticket_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_ticket_responses_ticket_id ON public.support_ticket_responses USING btree (ticket_id);


--
-- Name: idx_support_ticket_responses_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_ticket_responses_user_id ON public.support_ticket_responses USING btree (user_id);


--
-- Name: idx_support_tickets_assigned_to; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_tickets_assigned_to ON public.support_tickets USING btree (assigned_to);


--
-- Name: idx_support_tickets_category; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_tickets_category ON public.support_tickets USING btree (category);


--
-- Name: idx_support_tickets_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_tickets_created_at ON public.support_tickets USING btree (created_at DESC);


--
-- Name: idx_support_tickets_priority; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_tickets_priority ON public.support_tickets USING btree (priority);


--
-- Name: idx_support_tickets_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_tickets_status ON public.support_tickets USING btree (status);


--
-- Name: idx_support_tickets_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_tickets_tenant_id ON public.support_tickets USING btree (tenant_id);


--
-- Name: idx_support_tickets_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_support_tickets_user_id ON public.support_tickets USING btree (user_id);


--
-- Name: idx_tables_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tables_status ON public.tables USING btree (status);


--
-- Name: idx_tenant_customers_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_active ON public.tenant_customers USING btree (is_active);


--
-- Name: idx_tenant_customers_city; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_city ON public.tenant_customers USING btree (city);


--
-- Name: idx_tenant_customers_document; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_document ON public.tenant_customers USING btree (customer_document);


--
-- Name: idx_tenant_customers_email; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_email ON public.tenant_customers USING btree (customer_email);


--
-- Name: idx_tenant_customers_last_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_last_order ON public.tenant_customers USING btree (last_order_date DESC);


--
-- Name: idx_tenant_customers_phone; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_phone ON public.tenant_customers USING btree (customer_phone);


--
-- Name: idx_tenant_customers_state; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_state ON public.tenant_customers USING btree (state);


--
-- Name: idx_tenant_customers_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_tenant_id ON public.tenant_customers USING btree (tenant_id);


--
-- Name: idx_tenant_customers_total_spent; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_total_spent ON public.tenant_customers USING btree (total_spent DESC);


--
-- Name: idx_tenant_customers_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_type ON public.tenant_customers USING btree (customer_type);


--
-- Name: idx_tenant_customers_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_user_id ON public.tenant_customers USING btree (user_id);


--
-- Name: idx_tenant_customers_zip_code; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_customers_zip_code ON public.tenant_customers USING btree (zip_code);


--
-- Name: idx_tenant_delivery_persons_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_delivery_persons_active ON public.tenant_delivery_persons USING btree (is_active);


--
-- Name: idx_tenant_delivery_persons_person; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_delivery_persons_person ON public.tenant_delivery_persons USING btree (delivery_person_id);


--
-- Name: idx_tenant_delivery_persons_preferred; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_delivery_persons_preferred ON public.tenant_delivery_persons USING btree (tenant_id, is_preferred);


--
-- Name: idx_tenant_delivery_persons_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_delivery_persons_tenant ON public.tenant_delivery_persons USING btree (tenant_id);


--
-- Name: idx_tenant_invitations_email; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_invitations_email ON public.tenant_invitations USING btree (email);


--
-- Name: idx_tenant_invitations_expires; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_invitations_expires ON public.tenant_invitations USING btree (expires_at);


--
-- Name: idx_tenant_invitations_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_invitations_tenant_id ON public.tenant_invitations USING btree (tenant_id);


--
-- Name: idx_tenant_invitations_token; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_invitations_token ON public.tenant_invitations USING btree (token);


--
-- Name: idx_tenant_users_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_users_active ON public.tenant_users USING btree (is_active);


--
-- Name: idx_tenant_users_role; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_users_role ON public.tenant_users USING btree (role);


--
-- Name: idx_tenant_users_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_users_tenant_id ON public.tenant_users USING btree (tenant_id);


--
-- Name: idx_tenant_users_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tenant_users_user_id ON public.tenant_users USING btree (user_id);


--
-- Name: idx_testimonials_approved; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testimonials_approved ON public.testimonials USING btree (is_approved);


--
-- Name: idx_testimonials_display_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testimonials_display_order ON public.testimonials USING btree (display_order);


--
-- Name: idx_testimonials_featured; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testimonials_featured ON public.testimonials USING btree (is_featured);


--
-- Name: idx_testimonials_language; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testimonials_language ON public.testimonials USING btree (language);


--
-- Name: idx_testimonials_product; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testimonials_product ON public.testimonials USING btree (product_id) WHERE (product_id IS NOT NULL);


--
-- Name: idx_testimonials_rating; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testimonials_rating ON public.testimonials USING btree (rating);


--
-- Name: idx_testimonials_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testimonials_tenant ON public.testimonials USING btree (tenant_id);


--
-- Name: idx_testimonials_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_testimonials_type ON public.testimonials USING btree (testimonial_type);


--
-- Name: idx_user_address_default; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_address_default ON public.user_address USING btree (is_default) WHERE (is_default = true);


--
-- Name: idx_user_address_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_address_tenant ON public.user_address USING btree (tenant_id);


--
-- Name: idx_user_address_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_address_user ON public.user_address USING btree (user_id);


--
-- Name: idx_user_address_zip_code; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_address_zip_code ON public.user_address USING btree (zip_code);


--
-- Name: idx_user_discounts_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_discounts_user_id ON public.user_discounts USING btree (user_id);


--
-- Name: idx_user_favorites_product_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_favorites_product_id ON public.user_favorites USING btree (product_id);


--
-- Name: idx_user_favorites_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_favorites_tenant_id ON public.user_favorites USING btree (tenant_id);


--
-- Name: idx_user_favorites_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_favorites_user_id ON public.user_favorites USING btree (user_id);


--
-- Name: idx_user_favorites_user_tenant; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_favorites_user_tenant ON public.user_favorites USING btree (user_id, tenant_id);


--
-- Name: idx_user_profile_profile_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_profile_profile_id ON public.user_profile USING btree (profile_id);


--
-- Name: idx_user_profile_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_profile_user_id ON public.user_profile USING btree (user_id);


--
-- Name: idx_user_roles_role; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_roles_role ON public.user_roles USING btree (role);


--
-- Name: idx_user_roles_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_roles_user_id ON public.user_roles USING btree (user_id);


--
-- Name: idx_user_settings_tenant_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_settings_tenant_id ON public.user_settings USING btree (tenant_id);


--
-- Name: idx_user_settings_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_settings_user_id ON public.user_settings USING btree (user_id);


--
-- Name: idx_users_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_users_created_at ON public.users USING btree (created_at);


--
-- Name: idx_users_email; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_users_email ON public.users USING btree (email);


--
-- Name: idx_users_preferred_language; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_users_preferred_language ON public.users USING btree (preferred_language);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- Name: messages_inserted_at_topic_index; Type: INDEX; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE INDEX messages_inserted_at_topic_index ON ONLY realtime.messages USING btree (inserted_at DESC, topic) WHERE ((extension = 'broadcast'::text) AND (private IS TRUE));


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_name_bucket_level_unique; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX idx_name_bucket_level_unique ON storage.objects USING btree (name COLLATE "C", bucket_id, level);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: idx_objects_lower_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_lower_name ON storage.objects USING btree ((path_tokens[level]), lower(name) text_pattern_ops, bucket_id, level);


--
-- Name: idx_prefixes_lower_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_prefixes_lower_name ON storage.prefixes USING btree (bucket_id, level, ((string_to_array(name, '/'::text))[level]), lower(name) text_pattern_ops);


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: objects_bucket_id_level_idx; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX objects_bucket_id_level_idx ON storage.objects USING btree (bucket_id, level, name COLLATE "C");


--
-- Name: order_summary _RETURN; Type: RULE; Schema: public; Owner: postgres
--

CREATE OR REPLACE VIEW public.order_summary AS
 SELECT o.id,
    o.order_number,
    o.user_id,
    o.tenant_id,
    o.status,
    o.payment_status,
    o.payment_method,
    o.total_amount,
    o.shipping_amount,
    o.discount_amount,
    o.is_draft,
    o.created_at,
    o.updated_at,
    count(DISTINCT oi.id) AS items_count,
    count(oim.id) AS modifiers_count,
    sum(oi.quantity) AS total_items_quantity,
    u.email AS user_email,
    u.display_name AS user_name
   FROM (((public.orders o
     LEFT JOIN public.order_items oi ON ((o.id = oi.order_id)))
     LEFT JOIN public.order_item_modifiers oim ON ((oi.id = oim.order_item_id)))
     LEFT JOIN public.users u ON ((o.user_id = u.id)))
  GROUP BY o.id, u.email, u.display_name;


--
-- Name: delivery_persons_with_tenants _RETURN; Type: RULE; Schema: public; Owner: postgres
--

CREATE OR REPLACE VIEW public.delivery_persons_with_tenants AS
 SELECT dp.id,
    dp.user_profile_id AS user_id,
    dp.full_name,
    dp.phone,
    dp.email,
    dp.document,
    dp.birth_date,
    dp.street,
    dp.number,
    dp.complement,
    dp.neighborhood,
    dp.city,
    dp.state,
    dp.zip_code,
    dp.vehicle_type,
    dp.vehicle_plate,
    dp.vehicle_model,
    dp.vehicle_color,
    dp.driver_license,
    dp.driver_license_category,
    dp.driver_license_expiry,
    dp.has_vehicle_insurance,
    dp.vehicle_insurance_expiry,
    dp.photo_url,
    dp.documents,
    dp.status,
    dp.is_active,
    dp.is_verified,
    dp.current_latitude,
    dp.current_longitude,
    dp.last_location_update,
    dp.total_deliveries,
    dp.successful_deliveries,
    dp.failed_deliveries,
    dp.average_rating,
    dp.total_ratings,
    dp.created_at,
    dp.updated_at,
    json_agg(json_build_object('tenant_id', t.id, 'tenant_name', t.name, 'tenant_slug', t.slug, 'is_active', tdp.is_active, 'is_preferred', tdp.is_preferred, 'commission_percentage', tdp.commission_percentage, 'fixed_payment_per_delivery', tdp.fixed_payment_per_delivery, 'hired_at', tdp.hired_at)) AS tenants
   FROM ((public.delivery_persons dp
     LEFT JOIN public.tenant_delivery_persons tdp ON ((tdp.delivery_person_id = dp.id)))
     LEFT JOIN public.tenants t ON ((t.id = tdp.tenant_id)))
  GROUP BY dp.id;


--
-- Name: delivery_person_stats _RETURN; Type: RULE; Schema: public; Owner: postgres
--

CREATE OR REPLACE VIEW public.delivery_person_stats AS
 SELECT dp.id,
    dp.full_name,
    dp.status,
    dp.vehicle_type,
    dp.total_deliveries,
    dp.successful_deliveries,
    dp.failed_deliveries,
        CASE
            WHEN (dp.total_deliveries > 0) THEN round((((dp.successful_deliveries)::numeric / (dp.total_deliveries)::numeric) * (100)::numeric), 2)
            ELSE (0)::numeric
        END AS success_rate,
    dp.average_rating,
    dp.total_ratings,
    count(DISTINCT tdp.tenant_id) AS active_tenants,
    sum(dpw.balance) AS total_balance,
    sum(dpw.total_earned) AS lifetime_earnings
   FROM ((public.delivery_persons dp
     LEFT JOIN public.tenant_delivery_persons tdp ON (((tdp.delivery_person_id = dp.id) AND (tdp.is_active = true))))
     LEFT JOIN public.delivery_person_wallet dpw ON ((dpw.delivery_person_id = dp.id)))
  GROUP BY dp.id;


--
-- Name: users on_auth_user_created; Type: TRIGGER; Schema: auth; Owner: supabase_auth_admin
--

CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


--
-- Name: gallery_images check_entity_exists_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER check_entity_exists_trigger BEFORE INSERT OR UPDATE ON public.gallery_images FOR EACH ROW EXECUTE FUNCTION public.check_entity_exists();


--
-- Name: delivery_addresses ensure_single_default_address_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ensure_single_default_address_trigger BEFORE INSERT OR UPDATE ON public.delivery_addresses FOR EACH ROW EXECUTE FUNCTION public.ensure_single_default_address();


--
-- Name: user_address ensure_single_default_address_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ensure_single_default_address_trigger BEFORE INSERT OR UPDATE ON public.user_address FOR EACH ROW EXECUTE FUNCTION public.ensure_single_default_address();


--
-- Name: delivery_person_vehicles ensure_single_primary_vehicle_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER ensure_single_primary_vehicle_trigger BEFORE INSERT OR UPDATE ON public.delivery_person_vehicles FOR EACH ROW WHEN ((new.is_primary = true)) EXECUTE FUNCTION public.ensure_single_primary_vehicle();


--
-- Name: company_vehicle_usage handle_updated_at_company_vehicle_usage; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER handle_updated_at_company_vehicle_usage BEFORE UPDATE ON public.company_vehicle_usage FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: company_vehicles handle_updated_at_company_vehicles; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER handle_updated_at_company_vehicles BEFORE UPDATE ON public.company_vehicles FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: delivery_person_vehicles handle_updated_at_delivery_person_vehicles; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER handle_updated_at_delivery_person_vehicles BEFORE UPDATE ON public.delivery_person_vehicles FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: delivery_vehicle_assignments handle_updated_at_delivery_vehicle_assignments; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER handle_updated_at_delivery_vehicle_assignments BEFORE UPDATE ON public.delivery_vehicle_assignments FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: tenant_customers handle_updated_at_tenant_customers; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER handle_updated_at_tenant_customers BEFORE UPDATE ON public.tenant_customers FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: delivery_persons log_delivery_person_status_change_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER log_delivery_person_status_change_trigger AFTER UPDATE ON public.delivery_persons FOR EACH ROW EXECUTE FUNCTION public.log_delivery_person_status_change();


--
-- Name: orders on_order_created_update_customer_stats; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER on_order_created_update_customer_stats AFTER INSERT ON public.orders FOR EACH ROW WHEN (((new.is_draft = false) AND (new.status <> 'draft'::public.order_status) AND (new.user_id IS NOT NULL))) EXECUTE FUNCTION public.update_tenant_customer_stats_on_order();


--
-- Name: order_items trigger_calculate_order_total_items; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_calculate_order_total_items AFTER INSERT OR DELETE OR UPDATE ON public.order_items FOR EACH ROW EXECUTE FUNCTION public.calculate_order_total_from_items();


--
-- Name: order_item_modifiers trigger_calculate_order_total_modifiers; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_calculate_order_total_modifiers AFTER INSERT OR DELETE OR UPDATE ON public.order_item_modifiers FOR EACH ROW EXECUTE FUNCTION public.calculate_order_total_from_modifiers();


--
-- Name: stock_movements trigger_convert_purchase_unit; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_convert_purchase_unit BEFORE INSERT ON public.stock_movements FOR EACH ROW WHEN ((new.movement_type = 'purchase'::public.stock_movement_type)) EXECUTE FUNCTION public.convert_purchase_to_ingredient_unit();


--
-- Name: languages trigger_ensure_single_default_language; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_ensure_single_default_language BEFORE INSERT OR UPDATE ON public.languages FOR EACH ROW EXECUTE FUNCTION public.ensure_single_default_language();


--
-- Name: notifications trigger_notifications_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_notifications_updated_at BEFORE UPDATE ON public.notifications FOR EACH ROW EXECUTE FUNCTION public.update_notifications_updated_at();


--
-- Name: search_terms trigger_search_terms_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_search_terms_updated_at BEFORE UPDATE ON public.search_terms FOR EACH ROW EXECUTE FUNCTION public.trigger_set_timestamp_search_terms();


--
-- Name: product_modifier_group_relations trigger_set_tenant_id_group_relations; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_set_tenant_id_group_relations BEFORE INSERT ON public.product_modifier_group_relations FOR EACH ROW EXECUTE FUNCTION public.set_tenant_id_for_group_relations();


--
-- Name: product_modifier_groups trigger_set_tenant_id_modifier_groups; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_set_tenant_id_modifier_groups BEFORE INSERT ON public.product_modifier_groups FOR EACH ROW EXECUTE FUNCTION public.set_tenant_id_for_modifier_groups();


--
-- Name: product_modifiers trigger_set_tenant_id_modifiers; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_set_tenant_id_modifiers BEFORE INSERT ON public.product_modifiers FOR EACH ROW EXECUTE FUNCTION public.set_tenant_id_for_modifiers();


--
-- Name: support_categories trigger_support_categories_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_support_categories_updated_at BEFORE UPDATE ON public.support_categories FOR EACH ROW EXECUTE FUNCTION public.update_support_categories_updated_at();


--
-- Name: support_faq trigger_support_faq_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_support_faq_updated_at BEFORE UPDATE ON public.support_faq FOR EACH ROW EXECUTE FUNCTION public.update_support_faq_updated_at();


--
-- Name: support_tickets trigger_support_tickets_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_support_tickets_updated_at BEFORE UPDATE ON public.support_tickets FOR EACH ROW EXECUTE FUNCTION public.update_support_tickets_updated_at();


--
-- Name: financial_transactions trigger_update_account_balance; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_account_balance AFTER INSERT OR DELETE OR UPDATE ON public.financial_transactions FOR EACH ROW EXECUTE FUNCTION public.update_account_balance();


--
-- Name: product_modifiers trigger_update_modifier_availability_on_modifier_change; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_modifier_availability_on_modifier_change AFTER INSERT OR UPDATE ON public.product_modifiers FOR EACH ROW EXECUTE FUNCTION public.update_modifier_availability();


--
-- Name: stock_movements trigger_update_modifier_availability_on_stock_change; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_modifier_availability_on_stock_change AFTER INSERT OR DELETE OR UPDATE ON public.stock_movements FOR EACH ROW EXECUTE FUNCTION public.update_modifier_availability();


--
-- Name: product_ingredient_compositions trigger_update_product_cost; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_product_cost AFTER INSERT OR DELETE OR UPDATE ON public.product_ingredient_compositions FOR EACH ROW EXECUTE FUNCTION public.update_product_cost_trigger();


--
-- Name: reviews trigger_update_reviews_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_reviews_updated_at BEFORE UPDATE ON public.reviews FOR EACH ROW EXECUTE FUNCTION public.update_reviews_updated_at();


--
-- Name: orders trigger_update_tenant_customer_stats; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_tenant_customer_stats AFTER INSERT OR UPDATE ON public.orders FOR EACH ROW EXECUTE FUNCTION public.update_tenant_customer_stats();


--
-- Name: user_settings trigger_update_user_settings_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_update_user_settings_updated_at BEFORE UPDATE ON public.user_settings FOR EACH ROW EXECUTE FUNCTION public.update_user_settings_updated_at();


--
-- Name: api_keys update_api_keys_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_api_keys_updated_at BEFORE UPDATE ON public.api_keys FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: company_vehicle_usage update_company_vehicle_current_user_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_company_vehicle_current_user_trigger AFTER INSERT OR UPDATE ON public.company_vehicle_usage FOR EACH ROW EXECUTE FUNCTION public.update_company_vehicle_current_user();


--
-- Name: delivery_addresses update_delivery_addresses_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_delivery_addresses_updated_at BEFORE UPDATE ON public.delivery_addresses FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: delivery_orders update_delivery_orders_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_delivery_orders_updated_at BEFORE UPDATE ON public.delivery_orders FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: delivery_person_ratings update_delivery_person_rating_stats_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_delivery_person_rating_stats_trigger AFTER INSERT ON public.delivery_person_ratings FOR EACH ROW EXECUTE FUNCTION public.update_delivery_person_rating_stats();


--
-- Name: delivery_person_transactions update_delivery_person_wallet_balance_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_delivery_person_wallet_balance_trigger AFTER UPDATE ON public.delivery_person_transactions FOR EACH ROW EXECUTE FUNCTION public.update_delivery_person_wallet_balance();


--
-- Name: delivery_persons update_delivery_persons_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_delivery_persons_updated_at BEFORE UPDATE ON public.delivery_persons FOR EACH ROW EXECUTE FUNCTION public.update_delivery_person_updated_at();


--
-- Name: delivery_settings update_delivery_settings_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_delivery_settings_updated_at BEFORE UPDATE ON public.delivery_settings FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: delivery_zones update_delivery_zones_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_delivery_zones_updated_at BEFORE UPDATE ON public.delivery_zones FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: shipping_providers update_shipping_providers_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_shipping_providers_updated_at BEFORE UPDATE ON public.shipping_providers FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: shipping_services update_shipping_services_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_shipping_services_updated_at BEFORE UPDATE ON public.shipping_services FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: tenant_delivery_persons update_tenant_delivery_persons_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_tenant_delivery_persons_updated_at BEFORE UPDATE ON public.tenant_delivery_persons FOR EACH ROW EXECUTE FUNCTION public.update_delivery_person_updated_at();


--
-- Name: testimonials update_testimonials_updated_at_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_testimonials_updated_at_trigger BEFORE UPDATE ON public.testimonials FOR EACH ROW EXECUTE FUNCTION public.update_testimonials_updated_at();


--
-- Name: user_address update_user_address_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_user_address_updated_at BEFORE UPDATE ON public.user_address FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: buckets enforce_bucket_name_length_trigger; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER enforce_bucket_name_length_trigger BEFORE INSERT OR UPDATE OF name ON storage.buckets FOR EACH ROW EXECUTE FUNCTION storage.enforce_bucket_name_length();


--
-- Name: objects objects_delete_delete_prefix; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER objects_delete_delete_prefix AFTER DELETE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.delete_prefix_hierarchy_trigger();


--
-- Name: objects objects_insert_create_prefix; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER objects_insert_create_prefix BEFORE INSERT ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.objects_insert_prefix_trigger();


--
-- Name: objects objects_update_create_prefix; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER objects_update_create_prefix BEFORE UPDATE ON storage.objects FOR EACH ROW WHEN (((new.name <> old.name) OR (new.bucket_id <> old.bucket_id))) EXECUTE FUNCTION storage.objects_update_prefix_trigger();


--
-- Name: prefixes prefixes_create_hierarchy; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER prefixes_create_hierarchy BEFORE INSERT ON storage.prefixes FOR EACH ROW WHEN ((pg_trigger_depth() < 1)) EXECUTE FUNCTION storage.prefixes_insert_trigger();


--
-- Name: prefixes prefixes_delete_hierarchy; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER prefixes_delete_hierarchy AFTER DELETE ON storage.prefixes FOR EACH ROW EXECUTE FUNCTION storage.delete_prefix_hierarchy_trigger();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: oauth_authorizations oauth_authorizations_client_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_authorizations
    ADD CONSTRAINT oauth_authorizations_client_id_fkey FOREIGN KEY (client_id) REFERENCES auth.oauth_clients(id) ON DELETE CASCADE;


--
-- Name: oauth_authorizations oauth_authorizations_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_authorizations
    ADD CONSTRAINT oauth_authorizations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: oauth_consents oauth_consents_client_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_consents
    ADD CONSTRAINT oauth_consents_client_id_fkey FOREIGN KEY (client_id) REFERENCES auth.oauth_clients(id) ON DELETE CASCADE;


--
-- Name: oauth_consents oauth_consents_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_consents
    ADD CONSTRAINT oauth_consents_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_oauth_client_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_oauth_client_id_fkey FOREIGN KEY (oauth_client_id) REFERENCES auth.oauth_clients(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: accounts accounts_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.accounts
    ADD CONSTRAINT accounts_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: api_keys api_keys_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.api_keys
    ADD CONSTRAINT api_keys_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: banners banners_tag_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.banners
    ADD CONSTRAINT banners_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.tags(id);


--
-- Name: banners banners_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.banners
    ADD CONSTRAINT banners_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: brands brands_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.brands
    ADD CONSTRAINT brands_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: business_settings business_settings_business_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.business_settings
    ADD CONSTRAINT business_settings_business_type_fkey FOREIGN KEY (business_type) REFERENCES public.business_types(code) ON UPDATE CASCADE;


--
-- Name: CONSTRAINT business_settings_business_type_fkey ON business_settings; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON CONSTRAINT business_settings_business_type_fkey ON public.business_settings IS 'Foreign key reference to business_types table';


--
-- Name: business_settings business_settings_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.business_settings
    ADD CONSTRAINT business_settings_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: cash_register_sessions cash_register_sessions_closed_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cash_register_sessions
    ADD CONSTRAINT cash_register_sessions_closed_by_fkey FOREIGN KEY (closed_by) REFERENCES public.users(id);


--
-- Name: cash_register_sessions cash_register_sessions_opened_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cash_register_sessions
    ADD CONSTRAINT cash_register_sessions_opened_by_fkey FOREIGN KEY (opened_by) REFERENCES public.users(id);


--
-- Name: cash_register_transactions cash_register_transactions_service_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cash_register_transactions
    ADD CONSTRAINT cash_register_transactions_service_session_id_fkey FOREIGN KEY (service_session_id) REFERENCES public.order_sessions(id);


--
-- Name: cash_register_transactions cash_register_transactions_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cash_register_transactions
    ADD CONSTRAINT cash_register_transactions_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.cash_register_sessions(id) ON DELETE CASCADE;


--
-- Name: categories categories_parent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.categories
    ADD CONSTRAINT categories_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.categories(id) ON DELETE SET NULL;


--
-- Name: categories categories_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.categories
    ADD CONSTRAINT categories_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: category_printer_mapping category_printer_mapping_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.category_printer_mapping
    ADD CONSTRAINT category_printer_mapping_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.product_categories(id) ON DELETE CASCADE;


--
-- Name: category_printer_mapping category_printer_mapping_printer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.category_printer_mapping
    ADD CONSTRAINT category_printer_mapping_printer_id_fkey FOREIGN KEY (printer_station_id) REFERENCES public.printer_stations(id) ON DELETE CASCADE;


--
-- Name: company_vehicle_usage company_vehicle_usage_company_vehicle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.company_vehicle_usage
    ADD CONSTRAINT company_vehicle_usage_company_vehicle_id_fkey FOREIGN KEY (company_vehicle_id) REFERENCES public.company_vehicles(id) ON DELETE CASCADE;


--
-- Name: company_vehicle_usage company_vehicle_usage_delivery_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.company_vehicle_usage
    ADD CONSTRAINT company_vehicle_usage_delivery_person_id_fkey FOREIGN KEY (delivery_person_id) REFERENCES public.delivery_persons(id) ON DELETE CASCADE;


--
-- Name: company_vehicle_usage company_vehicle_usage_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.company_vehicle_usage
    ADD CONSTRAINT company_vehicle_usage_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: company_vehicles company_vehicles_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.company_vehicles
    ADD CONSTRAINT company_vehicles_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: delivery_addresses delivery_addresses_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_addresses
    ADD CONSTRAINT delivery_addresses_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: delivery_orders delivery_orders_delivery_address_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_orders
    ADD CONSTRAINT delivery_orders_delivery_address_id_fkey FOREIGN KEY (delivery_address_id) REFERENCES public.delivery_addresses(id);


--
-- Name: delivery_orders delivery_orders_delivery_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_orders
    ADD CONSTRAINT delivery_orders_delivery_person_id_fkey FOREIGN KEY (delivery_person_id) REFERENCES public.delivery_persons(id);


--
-- Name: delivery_orders delivery_orders_delivery_zone_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_orders
    ADD CONSTRAINT delivery_orders_delivery_zone_id_fkey FOREIGN KEY (delivery_zone_id) REFERENCES public.delivery_zones(id);


--
-- Name: delivery_orders delivery_orders_freight_quote_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_orders
    ADD CONSTRAINT delivery_orders_freight_quote_id_fkey FOREIGN KEY (freight_quote_id) REFERENCES public.freight_quotes(id);


--
-- Name: delivery_orders delivery_orders_order_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_orders
    ADD CONSTRAINT delivery_orders_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id) ON DELETE CASCADE;


--
-- Name: delivery_orders delivery_orders_shipping_provider_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_orders
    ADD CONSTRAINT delivery_orders_shipping_provider_id_fkey FOREIGN KEY (shipping_provider_id) REFERENCES public.shipping_providers(id);


--
-- Name: delivery_orders delivery_orders_shipping_service_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_orders
    ADD CONSTRAINT delivery_orders_shipping_service_id_fkey FOREIGN KEY (shipping_service_id) REFERENCES public.shipping_services(id);


--
-- Name: delivery_person_ratings delivery_person_ratings_delivery_order_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_ratings
    ADD CONSTRAINT delivery_person_ratings_delivery_order_id_fkey FOREIGN KEY (delivery_order_id) REFERENCES public.delivery_orders(id) ON DELETE CASCADE;


--
-- Name: delivery_person_ratings delivery_person_ratings_delivery_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_ratings
    ADD CONSTRAINT delivery_person_ratings_delivery_person_id_fkey FOREIGN KEY (delivery_person_id) REFERENCES public.delivery_persons(id) ON DELETE CASCADE;


--
-- Name: delivery_person_ratings delivery_person_ratings_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_ratings
    ADD CONSTRAINT delivery_person_ratings_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: delivery_person_status_history delivery_person_status_history_changed_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_status_history
    ADD CONSTRAINT delivery_person_status_history_changed_by_fkey FOREIGN KEY (changed_by) REFERENCES public.user_profile(id) ON DELETE SET NULL;


--
-- Name: delivery_person_status_history delivery_person_status_history_delivery_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_status_history
    ADD CONSTRAINT delivery_person_status_history_delivery_person_id_fkey FOREIGN KEY (delivery_person_id) REFERENCES public.delivery_persons(id) ON DELETE CASCADE;


--
-- Name: delivery_person_transactions delivery_person_transactions_delivery_order_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_transactions
    ADD CONSTRAINT delivery_person_transactions_delivery_order_id_fkey FOREIGN KEY (delivery_order_id) REFERENCES public.delivery_orders(id);


--
-- Name: delivery_person_transactions delivery_person_transactions_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_transactions
    ADD CONSTRAINT delivery_person_transactions_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.delivery_person_wallet(id) ON DELETE CASCADE;


--
-- Name: delivery_person_vehicles delivery_person_vehicles_delivery_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_vehicles
    ADD CONSTRAINT delivery_person_vehicles_delivery_person_id_fkey FOREIGN KEY (delivery_person_id) REFERENCES public.delivery_persons(id) ON DELETE CASCADE;


--
-- Name: delivery_person_wallet delivery_person_wallet_delivery_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_wallet
    ADD CONSTRAINT delivery_person_wallet_delivery_person_id_fkey FOREIGN KEY (delivery_person_id) REFERENCES public.delivery_persons(id) ON DELETE CASCADE;


--
-- Name: delivery_person_wallet delivery_person_wallet_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_person_wallet
    ADD CONSTRAINT delivery_person_wallet_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: delivery_persons delivery_persons_user_profile_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_persons
    ADD CONSTRAINT delivery_persons_user_profile_id_fkey FOREIGN KEY (user_profile_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: delivery_settings delivery_settings_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_settings
    ADD CONSTRAINT delivery_settings_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: delivery_vehicle_assignments delivery_vehicle_assignments_company_vehicle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_vehicle_assignments
    ADD CONSTRAINT delivery_vehicle_assignments_company_vehicle_id_fkey FOREIGN KEY (company_vehicle_id) REFERENCES public.company_vehicles(id) ON DELETE SET NULL;


--
-- Name: delivery_vehicle_assignments delivery_vehicle_assignments_delivery_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_vehicle_assignments
    ADD CONSTRAINT delivery_vehicle_assignments_delivery_person_id_fkey FOREIGN KEY (delivery_person_id) REFERENCES public.delivery_persons(id) ON DELETE CASCADE;


--
-- Name: delivery_vehicle_assignments delivery_vehicle_assignments_personal_vehicle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_vehicle_assignments
    ADD CONSTRAINT delivery_vehicle_assignments_personal_vehicle_id_fkey FOREIGN KEY (personal_vehicle_id) REFERENCES public.delivery_person_vehicles(id) ON DELETE SET NULL;


--
-- Name: delivery_zone_ceps delivery_zone_ceps_delivery_zone_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_zone_ceps
    ADD CONSTRAINT delivery_zone_ceps_delivery_zone_id_fkey FOREIGN KEY (delivery_zone_id) REFERENCES public.delivery_zones(id) ON DELETE CASCADE;


--
-- Name: delivery_zones delivery_zones_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.delivery_zones
    ADD CONSTRAINT delivery_zones_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: discounts discounts_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.discounts
    ADD CONSTRAINT discounts_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.product_categories(id);


--
-- Name: discounts discounts_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.discounts
    ADD CONSTRAINT discounts_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: event_images event_images_event_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event_images
    ADD CONSTRAINT event_images_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id) ON DELETE CASCADE;


--
-- Name: financial_categories financial_categories_parent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.financial_categories
    ADD CONSTRAINT financial_categories_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.financial_categories(id) ON DELETE CASCADE;


--
-- Name: financial_transactions financial_transactions_account_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.financial_transactions
    ADD CONSTRAINT financial_transactions_account_id_fkey FOREIGN KEY (account_id) REFERENCES public.accounts(id);


--
-- Name: financial_transactions financial_transactions_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.financial_transactions
    ADD CONSTRAINT financial_transactions_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.financial_categories(id);


--
-- Name: financial_transactions financial_transactions_order_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.financial_transactions
    ADD CONSTRAINT financial_transactions_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id);


--
-- Name: financial_transactions financial_transactions_supplier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.financial_transactions
    ADD CONSTRAINT financial_transactions_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id);


--
-- Name: product_modifier_group_relations fk_product_modifier_group_relations_tenant_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_group_relations
    ADD CONSTRAINT fk_product_modifier_group_relations_tenant_id FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: product_modifier_groups fk_product_modifier_groups_tenant_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_groups
    ADD CONSTRAINT fk_product_modifier_groups_tenant_id FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: product_modifiers fk_product_modifiers_tenant_id; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifiers
    ADD CONSTRAINT fk_product_modifiers_tenant_id FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: reviews fk_reviews_product; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT fk_reviews_product FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: reviews fk_reviews_user; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT fk_reviews_user FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: freight_quotes freight_quotes_order_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.freight_quotes
    ADD CONSTRAINT freight_quotes_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id) ON DELETE CASCADE;


--
-- Name: freight_quotes freight_quotes_shipping_service_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.freight_quotes
    ADD CONSTRAINT freight_quotes_shipping_service_id_fkey FOREIGN KEY (shipping_service_id) REFERENCES public.shipping_services(id) ON DELETE CASCADE;


--
-- Name: gallery_images gallery_images_media_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gallery_images
    ADD CONSTRAINT gallery_images_media_item_id_fkey FOREIGN KEY (media_item_id) REFERENCES public.media_items(id) ON DELETE CASCADE;


--
-- Name: ingredient_cost_history ingredient_cost_history_ingredient_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ingredient_cost_history
    ADD CONSTRAINT ingredient_cost_history_ingredient_id_fkey FOREIGN KEY (ingredient_id) REFERENCES public.ingredients(id) ON DELETE CASCADE;


--
-- Name: ingredient_cost_history ingredient_cost_history_supplier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ingredient_cost_history
    ADD CONSTRAINT ingredient_cost_history_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id);


--
-- Name: ingredient_cost_history ingredient_cost_history_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ingredient_cost_history
    ADD CONSTRAINT ingredient_cost_history_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: ingredients ingredients_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ingredients
    ADD CONSTRAINT ingredients_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: ingredients ingredients_unit_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ingredients
    ADD CONSTRAINT ingredients_unit_id_fkey FOREIGN KEY (unit_id) REFERENCES public.measurement_units(id);


--
-- Name: installments installments_transaction_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.installments
    ADD CONSTRAINT installments_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES public.financial_transactions(id) ON DELETE CASCADE;


--
-- Name: measurement_units measurement_units_base_unit_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.measurement_units
    ADD CONSTRAINT measurement_units_base_unit_id_fkey FOREIGN KEY (base_unit_id) REFERENCES public.measurement_units(id);


--
-- Name: menu_items menu_items_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.menu_items
    ADD CONSTRAINT menu_items_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(id) ON DELETE CASCADE;


--
-- Name: news news_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.news
    ADD CONSTRAINT news_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.categories(id);


--
-- Name: notification_recipients notification_recipients_notification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_recipients
    ADD CONSTRAINT notification_recipients_notification_id_fkey FOREIGN KEY (notification_id) REFERENCES public.notifications(id) ON DELETE CASCADE;


--
-- Name: notification_recipients notification_recipients_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification_recipients
    ADD CONSTRAINT notification_recipients_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: notifications notifications_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: office_especialities office_especialities_office_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.office_especialities
    ADD CONSTRAINT office_especialities_office_id_fkey FOREIGN KEY (office_id) REFERENCES public.offices(id);


--
-- Name: office_especialities office_especialities_specialitie_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.office_especialities
    ADD CONSTRAINT office_especialities_specialitie_id_fkey FOREIGN KEY (specialitie_id) REFERENCES public.specialities(id);


--
-- Name: offices offices_country_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.offices
    ADD CONSTRAINT offices_country_id_fkey FOREIGN KEY (country_id) REFERENCES public.countries(id) ON DELETE RESTRICT;


--
-- Name: order_item_modifiers order_item_modifiers_modifier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_item_modifiers
    ADD CONSTRAINT order_item_modifiers_modifier_id_fkey FOREIGN KEY (modifier_id) REFERENCES public.product_modifiers(id);


--
-- Name: order_item_modifiers order_item_modifiers_order_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_item_modifiers
    ADD CONSTRAINT order_item_modifiers_order_item_id_fkey FOREIGN KEY (order_item_id) REFERENCES public.order_items(id) ON DELETE CASCADE;


--
-- Name: order_items order_items_order_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_items
    ADD CONSTRAINT order_items_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id) ON DELETE CASCADE;


--
-- Name: order_items order_items_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_items
    ADD CONSTRAINT order_items_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id);


--
-- Name: order_session_item_modifiers order_session_item_modifiers_modifier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_session_item_modifiers
    ADD CONSTRAINT order_session_item_modifiers_modifier_id_fkey FOREIGN KEY (modifier_id) REFERENCES public.product_modifiers(id);


--
-- Name: order_session_item_modifiers order_session_item_modifiers_order_item_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_session_item_modifiers
    ADD CONSTRAINT order_session_item_modifiers_order_item_id_fkey FOREIGN KEY (order_item_id) REFERENCES public.order_session_items(id) ON DELETE CASCADE;


--
-- Name: order_session_items order_session_items_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_session_items
    ADD CONSTRAINT order_session_items_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id);


--
-- Name: order_session_items order_session_items_session_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_session_items
    ADD CONSTRAINT order_session_items_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.order_sessions(id) ON DELETE CASCADE;


--
-- Name: order_sessions order_sessions_table_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_sessions
    ADD CONSTRAINT order_sessions_table_id_fkey FOREIGN KEY (table_id) REFERENCES public.tables(id);


--
-- Name: order_sessions order_sessions_waiter_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.order_sessions
    ADD CONSTRAINT order_sessions_waiter_id_fkey FOREIGN KEY (waiter_id) REFERENCES public.waiters(id);


--
-- Name: orders orders_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.orders
    ADD CONSTRAINT orders_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: orders orders_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.orders
    ADD CONSTRAINT orders_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: payments payments_order_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.payments
    ADD CONSTRAINT payments_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id);


--
-- Name: plan_modules plan_modules_module_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.plan_modules
    ADD CONSTRAINT plan_modules_module_id_fkey FOREIGN KEY (module_id) REFERENCES public.modules(id) ON DELETE CASCADE;


--
-- Name: plan_modules plan_modules_plan_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.plan_modules
    ADD CONSTRAINT plan_modules_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES public.plans(id) ON DELETE CASCADE;


--
-- Name: plans plans_business_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.plans
    ADD CONSTRAINT plans_business_type_fkey FOREIGN KEY (business_type) REFERENCES public.business_types(code) ON UPDATE CASCADE;


--
-- Name: product_categories product_categories_parent_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_categories
    ADD CONSTRAINT product_categories_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.product_categories(id) ON DELETE CASCADE;


--
-- Name: product_categories product_categories_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_categories
    ADD CONSTRAINT product_categories_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: product_composition_eligibility product_composition_eligibility_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_composition_eligibility
    ADD CONSTRAINT product_composition_eligibility_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.product_categories(id) ON DELETE CASCADE;


--
-- Name: product_composition_eligibility product_composition_eligibility_composition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_composition_eligibility
    ADD CONSTRAINT product_composition_eligibility_composition_id_fkey FOREIGN KEY (composition_id) REFERENCES public.product_compositions(id) ON DELETE CASCADE;


--
-- Name: product_composition_eligibility product_composition_eligibility_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_composition_eligibility
    ADD CONSTRAINT product_composition_eligibility_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_cost_history product_cost_history_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_cost_history
    ADD CONSTRAINT product_cost_history_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_cost_history product_cost_history_supplier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_cost_history
    ADD CONSTRAINT product_cost_history_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id);


--
-- Name: product_images product_images_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_images
    ADD CONSTRAINT product_images_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_ingredient_compositions product_ingredient_compositions_ingredient_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_compositions
    ADD CONSTRAINT product_ingredient_compositions_ingredient_id_fkey FOREIGN KEY (ingredient_id) REFERENCES public.ingredients(id);


--
-- Name: product_ingredient_compositions product_ingredient_compositions_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_compositions
    ADD CONSTRAINT product_ingredient_compositions_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_ingredient_compositions product_ingredient_compositions_unit_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_compositions
    ADD CONSTRAINT product_ingredient_compositions_unit_id_fkey FOREIGN KEY (unit_id) REFERENCES public.measurement_units(id);


--
-- Name: product_ingredient_quantities product_ingredient_quantities_ingredient_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_quantities
    ADD CONSTRAINT product_ingredient_quantities_ingredient_id_fkey FOREIGN KEY (ingredient_id) REFERENCES public.ingredients(id) ON DELETE CASCADE;


--
-- Name: product_ingredient_quantities product_ingredient_quantities_modifier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_quantities
    ADD CONSTRAINT product_ingredient_quantities_modifier_id_fkey FOREIGN KEY (modifier_id) REFERENCES public.product_modifiers(id) ON DELETE CASCADE;


--
-- Name: product_ingredient_quantities product_ingredient_quantities_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_quantities
    ADD CONSTRAINT product_ingredient_quantities_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_ingredient_quantities product_ingredient_quantities_unit_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_ingredient_quantities
    ADD CONSTRAINT product_ingredient_quantities_unit_id_fkey FOREIGN KEY (unit_id) REFERENCES public.measurement_units(id);


--
-- Name: product_modifier_group_modifiers product_modifier_group_modifiers_group_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_group_modifiers
    ADD CONSTRAINT product_modifier_group_modifiers_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.product_modifier_groups(id) ON DELETE CASCADE;


--
-- Name: product_modifier_group_modifiers product_modifier_group_modifiers_modifier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_group_modifiers
    ADD CONSTRAINT product_modifier_group_modifiers_modifier_id_fkey FOREIGN KEY (modifier_id) REFERENCES public.product_modifiers(id) ON DELETE CASCADE;


--
-- Name: product_modifier_group_relations product_modifier_group_relations_group_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_group_relations
    ADD CONSTRAINT product_modifier_group_relations_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.product_modifier_groups(id) ON DELETE CASCADE;


--
-- Name: product_modifier_group_relations product_modifier_group_relations_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_group_relations
    ADD CONSTRAINT product_modifier_group_relations_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_modifier_groups product_modifier_groups_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_groups
    ADD CONSTRAINT product_modifier_groups_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: product_modifier_prices product_modifier_prices_modifier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_prices
    ADD CONSTRAINT product_modifier_prices_modifier_id_fkey FOREIGN KEY (modifier_id) REFERENCES public.product_modifiers(id) ON DELETE CASCADE;


--
-- Name: product_modifier_prices product_modifier_prices_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifier_prices
    ADD CONSTRAINT product_modifier_prices_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_modifiers product_modifiers_ingredient_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifiers
    ADD CONSTRAINT product_modifiers_ingredient_id_fkey FOREIGN KEY (ingredient_id) REFERENCES public.ingredients(id) ON DELETE SET NULL;


--
-- Name: product_modifiers product_modifiers_ingredient_unit_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifiers
    ADD CONSTRAINT product_modifiers_ingredient_unit_id_fkey FOREIGN KEY (ingredient_unit_id) REFERENCES public.measurement_units(id) ON DELETE SET NULL;


--
-- Name: product_modifiers product_modifiers_sankhya_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifiers
    ADD CONSTRAINT product_modifiers_sankhya_product_id_fkey FOREIGN KEY (sankhya_product_id) REFERENCES public.products(id) ON DELETE SET NULL;


--
-- Name: product_modifiers product_modifiers_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_modifiers
    ADD CONSTRAINT product_modifiers_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: product_prices product_prices_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_prices
    ADD CONSTRAINT product_prices_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_stock_batches product_stock_batches_movement_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock_batches
    ADD CONSTRAINT product_stock_batches_movement_id_fkey FOREIGN KEY (movement_id) REFERENCES public.product_stock_movements(id) ON DELETE CASCADE;


--
-- Name: product_stock_batches product_stock_batches_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock_batches
    ADD CONSTRAINT product_stock_batches_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_stock_batches product_stock_batches_supplier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock_batches
    ADD CONSTRAINT product_stock_batches_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id);


--
-- Name: product_stock_batches product_stock_batches_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock_batches
    ADD CONSTRAINT product_stock_batches_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: product_stock_movements product_stock_movements_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock_movements
    ADD CONSTRAINT product_stock_movements_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_stock_movements product_stock_movements_supplier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock_movements
    ADD CONSTRAINT product_stock_movements_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id);


--
-- Name: product_stock_movements product_stock_movements_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock_movements
    ADD CONSTRAINT product_stock_movements_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: product_stock product_stock_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock
    ADD CONSTRAINT product_stock_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: product_stock product_stock_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_stock
    ADD CONSTRAINT product_stock_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: product_variants product_variants_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.product_variants
    ADD CONSTRAINT product_variants_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: products products_brand_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_brand_id_fkey FOREIGN KEY (brand_id) REFERENCES public.brands(id) ON DELETE SET NULL;


--
-- Name: products products_product_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_product_category_id_fkey FOREIGN KEY (product_category_id) REFERENCES public.product_categories(id);


--
-- Name: products products_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.products
    ADD CONSTRAINT products_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: reviews reviews_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: search_history search_history_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.search_history
    ADD CONSTRAINT search_history_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: search_history search_history_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.search_history
    ADD CONSTRAINT search_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: search_terms search_terms_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.search_terms
    ADD CONSTRAINT search_terms_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: service_availability service_availability_provider_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_availability
    ADD CONSTRAINT service_availability_provider_id_fkey FOREIGN KEY (provider_id) REFERENCES public.service_providers(id) ON DELETE CASCADE;


--
-- Name: service_booking_items service_booking_items_booking_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_booking_items
    ADD CONSTRAINT service_booking_items_booking_id_fkey FOREIGN KEY (booking_id) REFERENCES public.service_bookings(id) ON DELETE CASCADE;


--
-- Name: service_booking_items service_booking_items_service_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_booking_items
    ADD CONSTRAINT service_booking_items_service_id_fkey FOREIGN KEY (service_id) REFERENCES public.services(id) ON DELETE CASCADE;


--
-- Name: service_bookings service_bookings_customer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_bookings
    ADD CONSTRAINT service_bookings_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: service_bookings service_bookings_provider_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_bookings
    ADD CONSTRAINT service_bookings_provider_id_fkey FOREIGN KEY (provider_id) REFERENCES public.service_providers(id) ON DELETE SET NULL;


--
-- Name: service_bookings service_bookings_service_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_bookings
    ADD CONSTRAINT service_bookings_service_id_fkey FOREIGN KEY (service_id) REFERENCES public.services(id) ON DELETE CASCADE;


--
-- Name: service_bookings service_bookings_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_bookings
    ADD CONSTRAINT service_bookings_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: service_categories service_categories_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_categories
    ADD CONSTRAINT service_categories_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: service_provider_services service_provider_services_provider_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_provider_services
    ADD CONSTRAINT service_provider_services_provider_id_fkey FOREIGN KEY (provider_id) REFERENCES public.service_providers(id) ON DELETE CASCADE;


--
-- Name: service_provider_services service_provider_services_service_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_provider_services
    ADD CONSTRAINT service_provider_services_service_id_fkey FOREIGN KEY (service_id) REFERENCES public.services(id) ON DELETE CASCADE;


--
-- Name: service_providers service_providers_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_providers
    ADD CONSTRAINT service_providers_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: service_providers service_providers_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_providers
    ADD CONSTRAINT service_providers_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: service_reviews service_reviews_booking_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_reviews
    ADD CONSTRAINT service_reviews_booking_id_fkey FOREIGN KEY (booking_id) REFERENCES public.service_bookings(id) ON DELETE CASCADE;


--
-- Name: service_reviews service_reviews_customer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_reviews
    ADD CONSTRAINT service_reviews_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: service_reviews service_reviews_provider_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_reviews
    ADD CONSTRAINT service_reviews_provider_id_fkey FOREIGN KEY (provider_id) REFERENCES public.service_providers(id) ON DELETE SET NULL;


--
-- Name: service_reviews service_reviews_service_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.service_reviews
    ADD CONSTRAINT service_reviews_service_id_fkey FOREIGN KEY (service_id) REFERENCES public.services(id) ON DELETE CASCADE;


--
-- Name: services services_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.services
    ADD CONSTRAINT services_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.service_categories(id) ON DELETE SET NULL;


--
-- Name: services services_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.services
    ADD CONSTRAINT services_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: shipping shipping_order_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.shipping
    ADD CONSTRAINT shipping_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id);


--
-- Name: shipping_providers shipping_providers_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.shipping_providers
    ADD CONSTRAINT shipping_providers_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: shipping_services shipping_services_shipping_provider_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.shipping_services
    ADD CONSTRAINT shipping_services_shipping_provider_id_fkey FOREIGN KEY (shipping_provider_id) REFERENCES public.shipping_providers(id) ON DELETE CASCADE;


--
-- Name: stock_batches stock_batches_ingredient_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_batches
    ADD CONSTRAINT stock_batches_ingredient_id_fkey FOREIGN KEY (ingredient_id) REFERENCES public.ingredients(id) ON DELETE CASCADE;


--
-- Name: stock_batches stock_batches_movement_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_batches
    ADD CONSTRAINT stock_batches_movement_id_fkey FOREIGN KEY (movement_id) REFERENCES public.stock_movements(id);


--
-- Name: stock_batches stock_batches_supplier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_batches
    ADD CONSTRAINT stock_batches_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id);


--
-- Name: stock_batches stock_batches_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_batches
    ADD CONSTRAINT stock_batches_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: stock_batches stock_batches_unit_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_batches
    ADD CONSTRAINT stock_batches_unit_id_fkey FOREIGN KEY (unit_id) REFERENCES public.measurement_units(id);


--
-- Name: stock_movements stock_movements_ingredient_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_movements
    ADD CONSTRAINT stock_movements_ingredient_id_fkey FOREIGN KEY (ingredient_id) REFERENCES public.ingredients(id) ON DELETE CASCADE;


--
-- Name: stock_movements stock_movements_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_movements
    ADD CONSTRAINT stock_movements_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id);


--
-- Name: stock_movements stock_movements_supplier_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_movements
    ADD CONSTRAINT stock_movements_supplier_id_fkey FOREIGN KEY (supplier_id) REFERENCES public.suppliers(id);


--
-- Name: stock_movements stock_movements_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_movements
    ADD CONSTRAINT stock_movements_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: stock_movements stock_movements_unit_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock_movements
    ADD CONSTRAINT stock_movements_unit_id_fkey FOREIGN KEY (unit_id) REFERENCES public.measurement_units(id);


--
-- Name: subscription_modules subscription_modules_module_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subscription_modules
    ADD CONSTRAINT subscription_modules_module_id_fkey FOREIGN KEY (module_id) REFERENCES public.modules(id) ON DELETE CASCADE;


--
-- Name: subscription_modules subscription_modules_subscription_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subscription_modules
    ADD CONSTRAINT subscription_modules_subscription_id_fkey FOREIGN KEY (subscription_id) REFERENCES public.subscriptions(id) ON DELETE CASCADE;


--
-- Name: subscriptions subscriptions_plan_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subscriptions
    ADD CONSTRAINT subscriptions_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES public.plans(id) ON DELETE RESTRICT;


--
-- Name: subscriptions subscriptions_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.subscriptions
    ADD CONSTRAINT subscriptions_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: suppliers suppliers_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.suppliers
    ADD CONSTRAINT suppliers_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: support_categories support_categories_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_categories
    ADD CONSTRAINT support_categories_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: support_faq support_faq_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_faq
    ADD CONSTRAINT support_faq_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: support_ticket_ratings support_ticket_ratings_ticket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_ticket_ratings
    ADD CONSTRAINT support_ticket_ratings_ticket_id_fkey FOREIGN KEY (ticket_id) REFERENCES public.support_tickets(id) ON DELETE CASCADE;


--
-- Name: support_ticket_ratings support_ticket_ratings_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_ticket_ratings
    ADD CONSTRAINT support_ticket_ratings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: support_ticket_responses support_ticket_responses_ticket_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_ticket_responses
    ADD CONSTRAINT support_ticket_responses_ticket_id_fkey FOREIGN KEY (ticket_id) REFERENCES public.support_tickets(id) ON DELETE CASCADE;


--
-- Name: support_ticket_responses support_ticket_responses_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_ticket_responses
    ADD CONSTRAINT support_ticket_responses_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: support_tickets support_tickets_assigned_to_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_tickets
    ADD CONSTRAINT support_tickets_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES auth.users(id);


--
-- Name: support_tickets support_tickets_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_tickets
    ADD CONSTRAINT support_tickets_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: support_tickets support_tickets_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.support_tickets
    ADD CONSTRAINT support_tickets_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: tenant_customers tenant_customers_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_customers
    ADD CONSTRAINT tenant_customers_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: tenant_customers tenant_customers_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_customers
    ADD CONSTRAINT tenant_customers_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: tenant_delivery_persons tenant_delivery_persons_delivery_person_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_delivery_persons
    ADD CONSTRAINT tenant_delivery_persons_delivery_person_id_fkey FOREIGN KEY (delivery_person_id) REFERENCES public.delivery_persons(id) ON DELETE CASCADE;


--
-- Name: tenant_delivery_persons tenant_delivery_persons_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_delivery_persons
    ADD CONSTRAINT tenant_delivery_persons_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: tenant_invitations tenant_invitations_invited_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_invitations
    ADD CONSTRAINT tenant_invitations_invited_by_fkey FOREIGN KEY (invited_by) REFERENCES auth.users(id);


--
-- Name: tenant_invitations tenant_invitations_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_invitations
    ADD CONSTRAINT tenant_invitations_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: tenant_users tenant_users_invited_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_users
    ADD CONSTRAINT tenant_users_invited_by_fkey FOREIGN KEY (invited_by) REFERENCES auth.users(id);


--
-- Name: tenant_users tenant_users_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_users
    ADD CONSTRAINT tenant_users_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: tenant_users tenant_users_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenant_users
    ADD CONSTRAINT tenant_users_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: tenants tenants_admin_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tenants
    ADD CONSTRAINT tenants_admin_user_id_fkey FOREIGN KEY (admin_user_id) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: testimonials testimonials_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.testimonials
    ADD CONSTRAINT testimonials_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: testimonials testimonials_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.testimonials
    ADD CONSTRAINT testimonials_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: user_address user_address_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_address
    ADD CONSTRAINT user_address_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: user_address user_address_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_address
    ADD CONSTRAINT user_address_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: user_discounts user_discounts_discount_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_discounts
    ADD CONSTRAINT user_discounts_discount_id_fkey FOREIGN KEY (discount_id) REFERENCES public.discounts(id);


--
-- Name: user_discounts user_discounts_order_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_discounts
    ADD CONSTRAINT user_discounts_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders(id);


--
-- Name: user_discounts user_discounts_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_discounts
    ADD CONSTRAINT user_discounts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: user_favorites user_favorites_product_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_favorites
    ADD CONSTRAINT user_favorites_product_id_fkey FOREIGN KEY (product_id) REFERENCES public.products(id) ON DELETE CASCADE;


--
-- Name: user_favorites user_favorites_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_favorites
    ADD CONSTRAINT user_favorites_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: user_favorites user_favorites_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_favorites
    ADD CONSTRAINT user_favorites_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: user_profile user_profile_profile_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES public.profiles(id);


--
-- Name: user_profile user_profile_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: user_profile user_profile_user_id_fkey1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_user_id_fkey1 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: user_roles user_roles_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: user_settings user_settings_tenant_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_settings
    ADD CONSTRAINT user_settings_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id) ON DELETE CASCADE;


--
-- Name: user_settings user_settings_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_settings
    ADD CONSTRAINT user_settings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: users users_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: waiters waiters_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.waiters
    ADD CONSTRAINT waiters_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: prefixes prefixes_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.prefixes
    ADD CONSTRAINT "prefixes_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: banners Active banners are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Active banners are viewable by everyone" ON public.banners FOR SELECT USING (((status = 'active'::public.status) AND ((date_initial IS NULL) OR (date_initial <= now())) AND ((date_end IS NULL) OR (date_end >= now()))));


--
-- Name: reviews Admins can manage all reviews; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can manage all reviews" ON public.reviews USING ((EXISTS ( SELECT 1
   FROM (public.user_profile up
     JOIN public.profiles p ON ((up.profile_id = p.id)))
  WHERE ((up.user_id = auth.uid()) AND (p.name = ANY (ARRAY['admin'::text, 'moderator'::text]))))));


--
-- Name: countries Admins can manage countries; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can manage countries" ON public.countries USING (public.has_role(auth.uid(), 'admin'::public.app_role));


--
-- Name: event_images Admins can manage event images; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can manage event images" ON public.event_images USING (public.has_role(auth.uid(), 'admin'::public.app_role));


--
-- Name: events Admins can manage events; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can manage events" ON public.events USING (public.has_role(auth.uid(), 'admin'::public.app_role));


--
-- Name: product_modifier_group_relations Admins can manage modifier group relations from their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can manage modifier group relations from their tenant" ON public.product_modifier_group_relations USING ((tenant_id = ( SELECT product_modifier_group_relations.tenant_id
   FROM public.user_profile
  WHERE (user_profile.user_id = auth.uid()))));


--
-- Name: product_modifier_groups Admins can manage modifier groups from their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can manage modifier groups from their tenant" ON public.product_modifier_groups USING ((tenant_id = ( SELECT product_modifier_groups.tenant_id
   FROM public.user_profile
  WHERE (user_profile.user_id = auth.uid()))));


--
-- Name: product_modifiers Admins can manage modifiers from their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can manage modifiers from their tenant" ON public.product_modifiers USING ((tenant_id = ( SELECT product_modifiers.tenant_id
   FROM public.user_profile
  WHERE (user_profile.user_id = auth.uid()))));


--
-- Name: news Admins can manage news; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can manage news" ON public.news USING (public.has_role(auth.uid(), 'admin'::public.app_role));


--
-- Name: offices Admins can manage offices; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can manage offices" ON public.offices USING (public.has_role(auth.uid(), 'admin'::public.app_role));


--
-- Name: search_terms Admins can manage search terms; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can manage search terms" ON public.search_terms USING ((EXISTS ( SELECT 1
   FROM (public.user_profile up
     JOIN public.profiles p ON ((up.profile_id = p.id)))
  WHERE ((up.user_id = auth.uid()) AND (p.name = ANY (ARRAY['admin'::text, 'moderator'::text]))))));


--
-- Name: product_ingredient_quantities Allow authenticated users to delete product_ingredient_quantiti; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to delete product_ingredient_quantiti" ON public.product_ingredient_quantities FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_modifier_prices Allow authenticated users to delete product_modifier_prices; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to delete product_modifier_prices" ON public.product_modifier_prices FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_ingredient_quantities Allow authenticated users to insert product_ingredient_quantiti; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to insert product_ingredient_quantiti" ON public.product_ingredient_quantities FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: product_modifier_prices Allow authenticated users to insert product_modifier_prices; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to insert product_modifier_prices" ON public.product_modifier_prices FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: business_settings Allow authenticated users to manage business settings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to manage business settings" ON public.business_settings USING ((auth.uid() IS NOT NULL));


--
-- Name: business_types Allow authenticated users to manage business types; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to manage business types" ON public.business_types USING ((auth.uid() IS NOT NULL));


--
-- Name: categories Allow authenticated users to manage categories; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to manage categories" ON public.categories TO authenticated USING (true) WITH CHECK (true);


--
-- Name: modules Allow authenticated users to manage modules; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to manage modules" ON public.modules USING ((auth.uid() IS NOT NULL));


--
-- Name: plan_modules Allow authenticated users to manage plan modules; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to manage plan modules" ON public.plan_modules USING ((auth.uid() IS NOT NULL));


--
-- Name: product_categories Allow authenticated users to manage product_categories; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to manage product_categories" ON public.product_categories TO authenticated USING (true) WITH CHECK (true);


--
-- Name: product_ingredient_quantities Allow authenticated users to read product_ingredient_quantities; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to read product_ingredient_quantities" ON public.product_ingredient_quantities FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_modifier_prices Allow authenticated users to read product_modifier_prices; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to read product_modifier_prices" ON public.product_modifier_prices FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_ingredient_quantities Allow authenticated users to update product_ingredient_quantiti; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to update product_ingredient_quantiti" ON public.product_ingredient_quantities FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_modifier_prices Allow authenticated users to update product_modifier_prices; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to update product_modifier_prices" ON public.product_modifier_prices FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: ingredients Allow delete ingredients for authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow delete ingredients for authenticated" ON public.ingredients FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_ingredient_compositions Allow delete product_ingredient_compositions for authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow delete product_ingredient_compositions for authenticated" ON public.product_ingredient_compositions FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: ingredient_cost_history Allow insert ingredient_cost_history for authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow insert ingredient_cost_history for authenticated" ON public.ingredient_cost_history FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: ingredients Allow insert ingredients for authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow insert ingredients for authenticated" ON public.ingredients FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: measurement_units Allow insert measurement_units for authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow insert measurement_units for authenticated" ON public.measurement_units FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: product_ingredient_compositions Allow insert product_ingredient_compositions for authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow insert product_ingredient_compositions for authenticated" ON public.product_ingredient_compositions FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: business_types Allow public read access to active business types; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to active business types" ON public.business_types FOR SELECT USING ((is_active = true));


--
-- Name: discounts Allow public read access to active discounts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to active discounts" ON public.discounts FOR SELECT USING ((is_active = true));


--
-- Name: modules Allow public read access to active modules; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to active modules" ON public.modules FOR SELECT USING ((is_active = true));


--
-- Name: plans Allow public read access to active plans; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to active plans" ON public.plans FOR SELECT USING ((is_active = true));


--
-- Name: service_categories Allow public read access to active service categories; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to active service categories" ON public.service_categories FOR SELECT USING ((is_active = true));


--
-- Name: service_providers Allow public read access to active service providers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to active service providers" ON public.service_providers FOR SELECT USING ((is_active = true));


--
-- Name: services Allow public read access to active services; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to active services" ON public.services FOR SELECT USING ((is_active = true));


--
-- Name: testimonials Allow public read access to approved testimonials; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to approved testimonials" ON public.testimonials FOR SELECT USING ((is_approved = true));


--
-- Name: business_settings Allow public read access to business settings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to business settings" ON public.business_settings FOR SELECT USING (true);


--
-- Name: plan_modules Allow public read access to plan modules; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to plan modules" ON public.plan_modules FOR SELECT USING (true);


--
-- Name: service_reviews Allow public read access to public reviews; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to public reviews" ON public.service_reviews FOR SELECT USING ((is_public = true));


--
-- Name: service_availability Allow public read access to service availability; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access to service availability" ON public.service_availability FOR SELECT USING ((is_available = true));


--
-- Name: ingredient_cost_history Allow read ingredient_cost_history for authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow read ingredient_cost_history for authenticated" ON public.ingredient_cost_history FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: ingredients Allow read ingredients; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow read ingredients" ON public.ingredients FOR SELECT USING (((auth.role() = 'authenticated'::text) OR (auth.role() = 'anon'::text)));


--
-- Name: measurement_units Allow read measurement_units; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow read measurement_units" ON public.measurement_units FOR SELECT USING (true);


--
-- Name: product_ingredient_compositions Allow read product_ingredient_compositions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow read product_ingredient_compositions" ON public.product_ingredient_compositions FOR SELECT USING (((auth.role() = 'authenticated'::text) OR (auth.role() = 'anon'::text)));


--
-- Name: service_booking_items Allow tenant admins to manage booking items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant admins to manage booking items" ON public.service_booking_items USING ((EXISTS ( SELECT 1
   FROM public.service_bookings sb
  WHERE ((sb.id = service_booking_items.booking_id) AND public.user_is_tenant_admin(auth.uid(), sb.tenant_id)))));


--
-- Name: service_bookings Allow tenant admins to manage bookings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant admins to manage bookings" ON public.service_bookings USING (public.user_is_tenant_admin(auth.uid(), tenant_id));


--
-- Name: service_reviews Allow tenant admins to manage reviews; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant admins to manage reviews" ON public.service_reviews USING ((EXISTS ( SELECT 1
   FROM public.service_bookings sb
  WHERE ((sb.id = service_reviews.booking_id) AND public.user_is_tenant_admin(auth.uid(), sb.tenant_id)))));


--
-- Name: service_availability Allow tenant admins to manage service availability; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant admins to manage service availability" ON public.service_availability USING ((EXISTS ( SELECT 1
   FROM public.service_providers sp
  WHERE ((sp.id = service_availability.provider_id) AND public.user_is_tenant_admin(auth.uid(), sp.tenant_id)))));


--
-- Name: service_categories Allow tenant admins to manage service categories; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant admins to manage service categories" ON public.service_categories USING (public.user_is_tenant_admin(auth.uid(), tenant_id));


--
-- Name: service_providers Allow tenant admins to manage service providers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant admins to manage service providers" ON public.service_providers USING (public.user_is_tenant_admin(auth.uid(), tenant_id));


--
-- Name: services Allow tenant admins to manage services; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant admins to manage services" ON public.services USING (public.user_is_tenant_admin(auth.uid(), tenant_id));


--
-- Name: subscriptions Allow tenant to view own subscriptions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant to view own subscriptions" ON public.subscriptions FOR SELECT USING (true);


--
-- Name: discounts Allow tenant users to delete own discounts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant users to delete own discounts" ON public.discounts FOR DELETE USING (((auth.role() = 'authenticated'::text) AND (tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE (tenant_users.user_id = auth.uid())))));


--
-- Name: discounts Allow tenant users to insert own discounts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant users to insert own discounts" ON public.discounts FOR INSERT WITH CHECK (((auth.role() = 'authenticated'::text) AND (tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE (tenant_users.user_id = auth.uid())))));


--
-- Name: testimonials Allow tenant users to manage their testimonials; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant users to manage their testimonials" ON public.testimonials USING ((tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE (tenant_users.user_id = auth.uid()))));


--
-- Name: discounts Allow tenant users to read own discounts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant users to read own discounts" ON public.discounts FOR SELECT USING (((auth.role() = 'authenticated'::text) AND (tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE (tenant_users.user_id = auth.uid())))));


--
-- Name: discounts Allow tenant users to update own discounts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow tenant users to update own discounts" ON public.discounts FOR UPDATE USING (((auth.role() = 'authenticated'::text) AND (tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE (tenant_users.user_id = auth.uid())))));


--
-- Name: ingredients Allow update ingredients for authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow update ingredients for authenticated" ON public.ingredients FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: measurement_units Allow update measurement_units for authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow update measurement_units for authenticated" ON public.measurement_units FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_ingredient_compositions Allow update product_ingredient_compositions for authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow update product_ingredient_compositions for authenticated" ON public.product_ingredient_compositions FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: service_bookings Allow users to create bookings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow users to create bookings" ON public.service_bookings FOR INSERT WITH CHECK (true);


--
-- Name: service_reviews Allow users to create reviews for their bookings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow users to create reviews for their bookings" ON public.service_reviews FOR INSERT WITH CHECK (((auth.uid() = customer_id) AND (EXISTS ( SELECT 1
   FROM public.service_bookings
  WHERE ((service_bookings.id = service_reviews.booking_id) AND (service_bookings.customer_id = auth.uid()))))));


--
-- Name: subscription_modules Allow users to manage own subscription modules; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow users to manage own subscription modules" ON public.subscription_modules USING ((subscription_id IN ( SELECT subscriptions.id
   FROM public.subscriptions
  WHERE (subscriptions.tenant_id IN ( SELECT tenant_users.tenant_id
           FROM public.tenant_users
          WHERE (tenant_users.user_id = auth.uid()))))));


--
-- Name: service_bookings Allow users to read their own bookings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow users to read their own bookings" ON public.service_bookings FOR SELECT USING ((auth.uid() = customer_id));


--
-- Name: service_bookings Allow users to update their own bookings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow users to update their own bookings" ON public.service_bookings FOR UPDATE USING ((auth.uid() = customer_id));


--
-- Name: subscription_modules Allow users to view own subscription modules; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow users to view own subscription modules" ON public.subscription_modules FOR SELECT USING ((subscription_id IN ( SELECT subscriptions.id
   FROM public.subscriptions
  WHERE (subscriptions.tenant_id IN ( SELECT tenant_users.tenant_id
           FROM public.tenant_users
          WHERE (tenant_users.user_id = auth.uid()))))));


--
-- Name: support_faq Anyone can view active FAQ; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Anyone can view active FAQ" ON public.support_faq FOR SELECT USING ((is_active = true));


--
-- Name: support_categories Anyone can view active categories; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Anyone can view active categories" ON public.support_categories FOR SELECT USING ((is_active = true));


--
-- Name: reviews Authenticated users can create reviews; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can create reviews" ON public.reviews FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: menu_items Authenticated users can delete menu items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can delete menu items" ON public.menu_items FOR DELETE TO authenticated USING ((auth.uid() IS NOT NULL));


--
-- Name: testimonials Authenticated users can delete testimonials; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can delete testimonials" ON public.testimonials FOR DELETE TO authenticated USING (true);


--
-- Name: menu_items Authenticated users can insert menu items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can insert menu items" ON public.menu_items FOR INSERT WITH CHECK ((auth.uid() IS NOT NULL));


--
-- Name: testimonials Authenticated users can insert testimonials; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can insert testimonials" ON public.testimonials FOR INSERT TO authenticated WITH CHECK (true);


--
-- Name: banners Authenticated users can manage banners; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage banners" ON public.banners USING ((auth.uid() IS NOT NULL));


--
-- Name: product_composition_eligibility Authenticated users can manage composition eligibility; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage composition eligibility" ON public.product_composition_eligibility USING ((auth.uid() IS NOT NULL));


--
-- Name: product_compositions Authenticated users can manage compositions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage compositions" ON public.product_compositions USING ((auth.uid() IS NOT NULL));


--
-- Name: group_discounts Authenticated users can manage group discounts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage group discounts" ON public.group_discounts USING ((auth.uid() IS NOT NULL));


--
-- Name: product_modifier_group_modifiers Authenticated users can manage group modifiers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage group modifiers" ON public.product_modifier_group_modifiers USING ((auth.uid() IS NOT NULL));


--
-- Name: product_modifier_groups Authenticated users can manage modifier groups; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage modifier groups" ON public.product_modifier_groups USING ((auth.uid() IS NOT NULL));


--
-- Name: product_modifier_group_relations Authenticated users can manage modifier relations; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage modifier relations" ON public.product_modifier_group_relations USING ((auth.uid() IS NOT NULL));


--
-- Name: product_modifiers Authenticated users can manage modifiers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage modifiers" ON public.product_modifiers USING ((auth.uid() IS NOT NULL));


--
-- Name: site_settings Authenticated users can manage site settings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage site settings" ON public.site_settings USING ((auth.uid() IS NOT NULL));


--
-- Name: tags Authenticated users can manage tags; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage tags" ON public.tags USING ((auth.uid() IS NOT NULL));


--
-- Name: product_variants Authenticated users can manage variants; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can manage variants" ON public.product_variants USING ((auth.uid() IS NOT NULL));


--
-- Name: menu_items Authenticated users can update menu items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can update menu items" ON public.menu_items FOR UPDATE TO authenticated USING ((auth.uid() IS NOT NULL)) WITH CHECK ((auth.uid() IS NOT NULL));


--
-- Name: testimonials Authenticated users can update testimonials; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can update testimonials" ON public.testimonials FOR UPDATE TO authenticated USING (true) WITH CHECK (true);


--
-- Name: testimonials Authenticated users can view all testimonials; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can view all testimonials" ON public.testimonials FOR SELECT TO authenticated USING (true);


--
-- Name: profiles Authenticated users can view profiles; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Authenticated users can view profiles" ON public.profiles FOR SELECT USING ((auth.uid() IS NOT NULL));


--
-- Name: categories Categories are deletable by authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Categories are deletable by authenticated users" ON public.categories FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: categories Categories are insertable by authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Categories are insertable by authenticated users" ON public.categories FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: categories Categories are updatable by authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Categories are updatable by authenticated users" ON public.categories FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: categories Categories are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Categories are viewable by everyone" ON public.categories FOR SELECT USING (true);


--
-- Name: product_categories Categories are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Categories are viewable by everyone" ON public.product_categories FOR SELECT USING (true);


--
-- Name: countries Countries are publicly readable; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Countries are publicly readable" ON public.countries FOR SELECT USING (true);


--
-- Name: delivery_vehicle_assignments Delivery persons can manage their assignments; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delivery persons can manage their assignments" ON public.delivery_vehicle_assignments USING ((EXISTS ( SELECT 1
   FROM (public.delivery_persons dp
     JOIN public.user_profile up ON ((up.id = dp.user_profile_id)))
  WHERE ((dp.id = delivery_vehicle_assignments.delivery_person_id) AND (up.user_id = auth.uid())))));


--
-- Name: delivery_person_vehicles Delivery persons can manage their own vehicles; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delivery persons can manage their own vehicles" ON public.delivery_person_vehicles USING ((EXISTS ( SELECT 1
   FROM (public.delivery_persons dp
     JOIN public.user_profile up ON ((up.id = dp.user_profile_id)))
  WHERE ((dp.id = delivery_person_vehicles.delivery_person_id) AND (up.user_id = auth.uid())))));


--
-- Name: delivery_persons Delivery persons can update own data; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delivery persons can update own data" ON public.delivery_persons FOR UPDATE USING ((user_profile_id = auth.uid()));


--
-- Name: delivery_persons Delivery persons can update their own data; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delivery persons can update their own data" ON public.delivery_persons FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM public.user_profile up
  WHERE ((up.id = delivery_persons.user_profile_id) AND (up.user_id = auth.uid())))));


--
-- Name: delivery_persons Delivery persons can view own data; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delivery persons can view own data" ON public.delivery_persons FOR SELECT USING ((user_profile_id = auth.uid()));


--
-- Name: delivery_person_transactions Delivery persons can view own transactions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delivery persons can view own transactions" ON public.delivery_person_transactions FOR SELECT USING ((wallet_id IN ( SELECT dpw.id
   FROM (public.delivery_person_wallet dpw
     JOIN public.delivery_persons dp ON ((dp.id = dpw.delivery_person_id)))
  WHERE (dp.user_profile_id = auth.uid()))));


--
-- Name: delivery_person_wallet Delivery persons can view own wallet; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delivery persons can view own wallet" ON public.delivery_person_wallet FOR SELECT USING ((delivery_person_id IN ( SELECT delivery_persons.id
   FROM public.delivery_persons
  WHERE (delivery_persons.user_profile_id = auth.uid()))));


--
-- Name: delivery_persons Delivery persons can view their own data; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delivery persons can view their own data" ON public.delivery_persons FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.user_profile up
  WHERE ((up.id = delivery_persons.user_profile_id) AND (up.user_id = auth.uid())))));


--
-- Name: company_vehicle_usage Delivery persons can view their own usage; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Delivery persons can view their own usage" ON public.company_vehicle_usage FOR SELECT USING ((EXISTS ( SELECT 1
   FROM (public.delivery_persons dp
     JOIN public.user_profile up ON ((up.id = dp.user_profile_id)))
  WHERE ((dp.id = company_vehicle_usage.delivery_person_id) AND (up.user_id = auth.uid())))));


--
-- Name: product_cost_history Enable insert for authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert for authenticated users" ON public.product_cost_history FOR INSERT WITH CHECK (true);


--
-- Name: product_cost_history Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.product_cost_history FOR SELECT USING (true);


--
-- Name: event_images Event images are publicly readable; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Event images are publicly readable" ON public.event_images FOR SELECT USING (true);


--
-- Name: gallery_images Gallery images are deletable by authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Gallery images are deletable by authenticated users" ON public.gallery_images FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: gallery_images Gallery images are insertable by authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Gallery images are insertable by authenticated users" ON public.gallery_images FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: gallery_images Gallery images are updatable by authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Gallery images are updatable by authenticated users" ON public.gallery_images FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: gallery_images Gallery images are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Gallery images are viewable by everyone" ON public.gallery_images FOR SELECT USING (true);


--
-- Name: group_discounts Group discounts are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Group discounts are viewable by everyone" ON public.group_discounts FOR SELECT USING (((is_active = true) AND (now() >= start_date) AND (now() <= end_date)));


--
-- Name: media_items Media items are deletable by authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Media items are deletable by authenticated users" ON public.media_items FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: media_items Media items are insertable by authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Media items are insertable by authenticated users" ON public.media_items FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: media_items Media items are updatable by authenticated users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Media items are updatable by authenticated users" ON public.media_items FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: media_items Media items are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Media items are viewable by everyone" ON public.media_items FOR SELECT USING (true);


--
-- Name: menu_items Menu items are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Menu items are viewable by everyone" ON public.menu_items FOR SELECT USING ((is_active = true));


--
-- Name: reviews Moderators can moderate reviews; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Moderators can moderate reviews" ON public.reviews FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM (public.user_profile up
     JOIN public.profiles p ON ((up.profile_id = p.id)))
  WHERE ((up.user_id = auth.uid()) AND (p.name = ANY (ARRAY['admin'::text, 'moderator'::text]))))));


--
-- Name: offices Offices are publicly readable; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Offices are publicly readable" ON public.offices FOR SELECT USING (true);


--
-- Name: reviews Permitir leitura pública de avaliações aprovadas; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Permitir leitura pública de avaliações aprovadas" ON public.reviews FOR SELECT USING ((is_approved = true));


--
-- Name: reviews Permitir usuários autenticados criarem avaliações; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Permitir usuários autenticados criarem avaliações" ON public.reviews FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: reviews Permitir usuários deletarem suas próprias avaliações; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Permitir usuários deletarem suas próprias avaliações" ON public.reviews FOR DELETE USING ((auth.uid() = user_id));


--
-- Name: reviews Permitir usuários editarem suas próprias avaliações; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Permitir usuários editarem suas próprias avaliações" ON public.reviews FOR UPDATE USING ((auth.uid() = user_id)) WITH CHECK ((auth.uid() = user_id));


--
-- Name: product_compositions Public can view active compositions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public can view active compositions" ON public.product_compositions FOR SELECT USING ((is_active = true));


--
-- Name: product_modifier_groups Public can view active modifier groups; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public can view active modifier groups" ON public.product_modifier_groups FOR SELECT USING ((is_active = true));


--
-- Name: product_modifiers Public can view active modifiers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public can view active modifiers" ON public.product_modifiers FOR SELECT USING (((is_active = true) AND (is_available = true)));


--
-- Name: testimonials Public can view approved testimonials; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public can view approved testimonials" ON public.testimonials FOR SELECT USING ((is_approved = true));


--
-- Name: product_variants Public can view available variants; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public can view available variants" ON public.product_variants FOR SELECT USING ((is_available = true));


--
-- Name: product_composition_eligibility Public can view composition eligibility; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public can view composition eligibility" ON public.product_composition_eligibility FOR SELECT USING (true);


--
-- Name: product_modifier_group_modifiers Public can view group modifiers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public can view group modifiers" ON public.product_modifier_group_modifiers FOR SELECT USING ((is_active = true));


--
-- Name: product_modifier_group_relations Public can view product modifier relations; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public can view product modifier relations" ON public.product_modifier_group_relations FOR SELECT USING ((is_active = true));


--
-- Name: events Published events are publicly readable; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Published events are publicly readable" ON public.events FOR SELECT USING ((is_published = true));


--
-- Name: news Published news are publicly readable; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Published news are publicly readable" ON public.news FOR SELECT USING ((is_published = true));


--
-- Name: reviews Reviews are viewable by everyone when approved; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Reviews are viewable by everyone when approved" ON public.reviews FOR SELECT USING ((is_approved = true));


--
-- Name: search_terms Search terms are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Search terms are viewable by everyone" ON public.search_terms FOR SELECT USING (true);


--
-- Name: api_keys Service role can manage API keys; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Service role can manage API keys" ON public.api_keys USING ((auth.role() = 'service_role'::text));


--
-- Name: site_settings Site settings are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Site settings are viewable by everyone" ON public.site_settings FOR SELECT USING (true);


--
-- Name: tenants Super permissive tenant policy; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Super permissive tenant policy" ON public.tenants TO authenticated USING (true) WITH CHECK (true);


--
-- Name: freight_quotes System can manage freight quotes; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "System can manage freight quotes" ON public.freight_quotes USING ((auth.uid() IN ( SELECT tu.user_id
   FROM ((public.tenant_users tu
     JOIN public.shipping_services ss ON ((ss.id = freight_quotes.shipping_service_id)))
     JOIN public.shipping_providers sp ON ((sp.id = ss.shipping_provider_id)))
  WHERE ((tu.tenant_id = sp.tenant_id) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text])) AND (tu.is_active = true)))));


--
-- Name: tags Tags are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tags are viewable by everyone" ON public.tags FOR SELECT USING (true);


--
-- Name: tenant_delivery_persons Tenant admins can manage delivery person links; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenant admins can manage delivery person links" ON public.tenant_delivery_persons USING ((auth.uid() IN ( SELECT tu.user_id
   FROM public.tenant_users tu
  WHERE ((tu.tenant_id = tenant_delivery_persons.tenant_id) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text])) AND (tu.is_active = true)))));


--
-- Name: delivery_persons Tenant admins can manage delivery persons; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenant admins can manage delivery persons" ON public.delivery_persons USING ((auth.uid() IN ( SELECT tu.user_id
   FROM (public.tenant_delivery_persons tdp
     JOIN public.tenant_users tu ON ((tu.tenant_id = tdp.tenant_id)))
  WHERE ((tdp.delivery_person_id = delivery_persons.id) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text])) AND (tu.is_active = true)))));


--
-- Name: tenant_customers Tenant admins can manage their customers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenant admins can manage their customers" ON public.tenant_customers USING ((EXISTS ( SELECT 1
   FROM public.tenant_users tu
  WHERE ((tu.tenant_id = tenant_customers.tenant_id) AND (tu.user_id = auth.uid()) AND (tu.role = ANY (ARRAY['admin'::text, 'owner'::text, 'manager'::text, 'employee'::text]))))));


--
-- Name: delivery_person_transactions Tenant admins can manage transactions; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenant admins can manage transactions" ON public.delivery_person_transactions USING ((wallet_id IN ( SELECT dpw.id
   FROM (public.delivery_person_wallet dpw
     JOIN public.tenant_users tu ON ((tu.tenant_id = dpw.tenant_id)))
  WHERE ((tu.user_id = auth.uid()) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text])) AND (tu.is_active = true)))));


--
-- Name: company_vehicle_usage Tenant admins can manage vehicle usage; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenant admins can manage vehicle usage" ON public.company_vehicle_usage USING ((EXISTS ( SELECT 1
   FROM public.tenant_users tu
  WHERE ((tu.tenant_id = company_vehicle_usage.tenant_id) AND (tu.user_id = auth.uid()) AND (tu.role = ANY (ARRAY['admin'::text, 'owner'::text, 'manager'::text]))))));


--
-- Name: delivery_vehicle_assignments Tenant admins can view all assignments; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenant admins can view all assignments" ON public.delivery_vehicle_assignments FOR SELECT USING ((EXISTS ( SELECT 1
   FROM ((public.delivery_persons dp
     JOIN public.tenant_delivery_persons tdp ON ((tdp.delivery_person_id = dp.id)))
     JOIN public.tenant_users tu ON ((tu.tenant_id = tdp.tenant_id)))
  WHERE ((dp.id = delivery_vehicle_assignments.delivery_person_id) AND (tu.user_id = auth.uid()) AND (tu.role = ANY (ARRAY['admin'::text, 'owner'::text, 'manager'::text]))))));


--
-- Name: delivery_person_vehicles Tenant admins can view delivery person vehicles; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenant admins can view delivery person vehicles" ON public.delivery_person_vehicles FOR SELECT USING ((EXISTS ( SELECT 1
   FROM ((public.delivery_persons dp
     JOIN public.tenant_delivery_persons tdp ON ((tdp.delivery_person_id = dp.id)))
     JOIN public.tenant_users tu ON ((tu.tenant_id = tdp.tenant_id)))
  WHERE ((dp.id = delivery_person_vehicles.delivery_person_id) AND (tu.user_id = auth.uid()) AND (tu.role = ANY (ARRAY['admin'::text, 'owner'::text, 'manager'::text]))))));


--
-- Name: delivery_person_wallet Tenant admins can view wallets; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenant admins can view wallets" ON public.delivery_person_wallet FOR SELECT USING ((auth.uid() IN ( SELECT tu.user_id
   FROM public.tenant_users tu
  WHERE ((tu.tenant_id = delivery_person_wallet.tenant_id) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text])) AND (tu.is_active = true)))));


--
-- Name: company_vehicles Tenant users can manage company vehicles; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenant users can manage company vehicles" ON public.company_vehicles USING ((EXISTS ( SELECT 1
   FROM public.tenant_users tu
  WHERE ((tu.tenant_id = company_vehicles.tenant_id) AND (tu.user_id = auth.uid())))));


--
-- Name: delivery_orders Tenants can manage delivery orders for their orders; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenants can manage delivery orders for their orders" ON public.delivery_orders USING ((auth.uid() IN ( SELECT tu.user_id
   FROM (public.tenant_users tu
     JOIN public.orders o ON ((tu.tenant_id = o.tenant_id)))
  WHERE ((o.id = delivery_orders.order_id) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text, 'member'::text])) AND (tu.is_active = true)))));


--
-- Name: delivery_zone_ceps Tenants can manage delivery zone ceps; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenants can manage delivery zone ceps" ON public.delivery_zone_ceps USING ((auth.uid() IN ( SELECT tu.user_id
   FROM (public.tenant_users tu
     JOIN public.delivery_zones dz ON ((tu.tenant_id = dz.tenant_id)))
  WHERE ((dz.id = delivery_zone_ceps.delivery_zone_id) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text])) AND (tu.is_active = true)))));


--
-- Name: delivery_settings Tenants can manage their delivery settings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenants can manage their delivery settings" ON public.delivery_settings USING ((auth.uid() IN ( SELECT tu.user_id
   FROM public.tenant_users tu
  WHERE ((tu.tenant_id = delivery_settings.tenant_id) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text])) AND (tu.is_active = true)))));


--
-- Name: delivery_zones Tenants can manage their delivery zones; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenants can manage their delivery zones" ON public.delivery_zones USING ((auth.uid() IN ( SELECT tu.user_id
   FROM public.tenant_users tu
  WHERE ((tu.tenant_id = delivery_zones.tenant_id) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text])) AND (tu.is_active = true)))));


--
-- Name: shipping_providers Tenants can manage their shipping providers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenants can manage their shipping providers" ON public.shipping_providers USING ((auth.uid() IN ( SELECT tu.user_id
   FROM public.tenant_users tu
  WHERE ((tu.tenant_id = shipping_providers.tenant_id) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text])) AND (tu.is_active = true)))));


--
-- Name: shipping_services Tenants can manage their shipping services; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenants can manage their shipping services" ON public.shipping_services USING ((auth.uid() IN ( SELECT tu.user_id
   FROM (public.tenant_users tu
     JOIN public.shipping_providers sp ON ((tu.tenant_id = sp.tenant_id)))
  WHERE ((sp.id = shipping_services.shipping_provider_id) AND (tu.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text])) AND (tu.is_active = true)))));


--
-- Name: delivery_persons Tenants can view their delivery persons; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tenants can view their delivery persons" ON public.delivery_persons FOR SELECT USING ((id IN ( SELECT tdp.delivery_person_id
   FROM (public.tenant_delivery_persons tdp
     JOIN public.tenant_users tu ON ((tu.tenant_id = tdp.tenant_id)))
  WHERE ((tu.user_id = auth.uid()) AND (tu.is_active = true)))));


--
-- Name: delivery_person_ratings Users can create delivery person ratings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can create delivery person ratings" ON public.delivery_person_ratings FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM public.user_profile up
  WHERE ((up.id = delivery_person_ratings.user_id) AND (up.user_id = auth.uid())))));


--
-- Name: user_discounts Users can create own discounts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can create own discounts" ON public.user_discounts FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: order_items Users can create own order items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can create own order items" ON public.order_items FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM public.orders
  WHERE ((orders.id = order_items.order_id) AND (orders.user_id = auth.uid())))));


--
-- Name: orders Users can create own orders; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can create own orders" ON public.orders FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: support_ticket_ratings Users can create ratings for their tickets; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can create ratings for their tickets" ON public.support_ticket_ratings FOR INSERT WITH CHECK (((auth.uid() = user_id) AND (EXISTS ( SELECT 1
   FROM public.support_tickets
  WHERE (((support_tickets.id)::text = (support_ticket_ratings.ticket_id)::text) AND (support_tickets.user_id = auth.uid()))))));


--
-- Name: support_ticket_responses Users can create responses to their tickets; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can create responses to their tickets" ON public.support_ticket_responses FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM public.support_tickets
  WHERE (((support_tickets.id)::text = (support_ticket_responses.ticket_id)::text) AND (support_tickets.user_id = auth.uid())))));


--
-- Name: support_tickets Users can create tickets; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can create tickets" ON public.support_tickets FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: user_favorites Users can delete own favorites; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can delete own favorites" ON public.user_favorites FOR DELETE USING ((auth.uid() = user_id));


--
-- Name: user_address Users can delete their own addresses; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can delete their own addresses" ON public.user_address FOR DELETE USING ((auth.uid() = user_id));


--
-- Name: reviews Users can delete their own reviews; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can delete their own reviews" ON public.reviews FOR DELETE USING ((auth.uid() = user_id));


--
-- Name: search_history Users can delete their own search history; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can delete their own search history" ON public.search_history FOR DELETE USING ((auth.uid() = user_id));


--
-- Name: user_settings Users can delete their own settings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can delete their own settings" ON public.user_settings FOR DELETE TO authenticated USING ((auth.uid() = user_id));


--
-- Name: accounts Users can insert accounts for their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert accounts for their tenant" ON public.accounts FOR INSERT WITH CHECK ((tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.role = ANY (ARRAY['admin'::text, 'manager'::text, 'employee'::text]))))));


--
-- Name: ingredient_cost_history Users can insert ingredient cost history for their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert ingredient cost history for their tenant" ON public.ingredient_cost_history FOR INSERT WITH CHECK ((tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.role = ANY (ARRAY['admin'::text, 'manager'::text, 'employee'::text]))))));


--
-- Name: user_favorites Users can insert own favorites; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert own favorites" ON public.user_favorites FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: suppliers Users can insert suppliers for their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert suppliers for their tenant" ON public.suppliers FOR INSERT WITH CHECK ((tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.role = ANY (ARRAY['admin'::text, 'manager'::text, 'employee'::text]))))));


--
-- Name: user_address Users can insert their own addresses; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own addresses" ON public.user_address FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: search_history Users can insert their own search history; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own search history" ON public.search_history FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- Name: user_settings Users can insert their own settings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own settings" ON public.user_settings FOR INSERT TO authenticated WITH CHECK ((auth.uid() = user_id));


--
-- Name: delivery_addresses Users can manage their own addresses; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can manage their own addresses" ON public.delivery_addresses USING ((user_id = auth.uid()));


--
-- Name: delivery_person_ratings Users can rate their deliveries; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can rate their deliveries" ON public.delivery_person_ratings FOR INSERT WITH CHECK ((user_id = auth.uid()));


--
-- Name: accounts Users can update accounts for their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update accounts for their tenant" ON public.accounts FOR UPDATE USING ((tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.role = ANY (ARRAY['admin'::text, 'manager'::text, 'employee'::text]))))));


--
-- Name: suppliers Users can update suppliers for their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update suppliers for their tenant" ON public.suppliers FOR UPDATE USING ((tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.role = ANY (ARRAY['admin'::text, 'manager'::text, 'employee'::text]))))));


--
-- Name: user_address Users can update their own addresses; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own addresses" ON public.user_address FOR UPDATE USING ((auth.uid() = user_id)) WITH CHECK ((auth.uid() = user_id));


--
-- Name: notification_recipients Users can update their own notification recipients; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own notification recipients" ON public.notification_recipients FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: reviews Users can update their own reviews; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own reviews" ON public.reviews FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: user_roles Users can update their own role; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own role" ON public.user_roles FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: search_history Users can update their own search history; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own search history" ON public.search_history FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: user_settings Users can update their own settings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own settings" ON public.user_settings FOR UPDATE TO authenticated USING ((auth.uid() = user_id)) WITH CHECK ((auth.uid() = user_id));


--
-- Name: support_tickets Users can update their own tickets; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own tickets" ON public.support_tickets FOR UPDATE USING ((auth.uid() = user_id));


--
-- Name: accounts Users can view accounts for their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view accounts for their tenant" ON public.accounts FOR SELECT USING ((tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.role = ANY (ARRAY['admin'::text, 'manager'::text, 'employee'::text]))))));


--
-- Name: delivery_zones Users can view active delivery zones; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view active delivery zones" ON public.delivery_zones FOR SELECT USING ((is_active = true));


--
-- Name: notifications Users can view active notifications from their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view active notifications from their tenant" ON public.notifications FOR SELECT USING (((is_active = true) AND ((expires_at IS NULL) OR (expires_at > now()))));


--
-- Name: shipping_providers Users can view active shipping providers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view active shipping providers" ON public.shipping_providers FOR SELECT USING ((is_active = true));


--
-- Name: shipping_services Users can view active shipping services; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view active shipping services" ON public.shipping_services FOR SELECT USING ((is_active = true));


--
-- Name: delivery_person_ratings Users can view delivery person ratings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view delivery person ratings" ON public.delivery_person_ratings FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.user_profile up
  WHERE ((up.id = delivery_person_ratings.user_id) AND (up.user_id = auth.uid())))));


--
-- Name: delivery_settings Users can view delivery settings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view delivery settings" ON public.delivery_settings FOR SELECT USING (true);


--
-- Name: delivery_zone_ceps Users can view delivery zone ceps; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view delivery zone ceps" ON public.delivery_zone_ceps FOR SELECT USING (true);


--
-- Name: ingredient_cost_history Users can view ingredient cost history for their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view ingredient cost history for their tenant" ON public.ingredient_cost_history FOR SELECT USING ((tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.role = ANY (ARRAY['admin'::text, 'manager'::text, 'employee'::text]))))));


--
-- Name: product_modifier_group_relations Users can view modifier group relations from their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view modifier group relations from their tenant" ON public.product_modifier_group_relations FOR SELECT USING ((tenant_id = ( SELECT product_modifier_group_relations.tenant_id
   FROM public.user_profile
  WHERE (user_profile.user_id = auth.uid()))));


--
-- Name: product_modifier_groups Users can view modifier groups from their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view modifier groups from their tenant" ON public.product_modifier_groups FOR SELECT USING ((tenant_id = ( SELECT product_modifier_groups.tenant_id
   FROM public.user_profile
  WHERE (user_profile.user_id = auth.uid()))));


--
-- Name: product_modifiers Users can view modifiers from their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view modifiers from their tenant" ON public.product_modifiers FOR SELECT USING ((tenant_id = ( SELECT product_modifiers.tenant_id
   FROM public.user_profile
  WHERE (user_profile.user_id = auth.uid()))));


--
-- Name: user_discounts Users can view own discounts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view own discounts" ON public.user_discounts FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: user_favorites Users can view own favorites; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view own favorites" ON public.user_favorites FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: order_items Users can view own order items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view own order items" ON public.order_items FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.orders
  WHERE ((orders.id = order_items.order_id) AND (orders.user_id = auth.uid())))));


--
-- Name: orders Users can view own orders; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view own orders" ON public.orders FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: payments Users can view own payments; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view own payments" ON public.payments FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.orders
  WHERE ((orders.id = payments.order_id) AND (orders.user_id = auth.uid())))));


--
-- Name: shipping Users can view own shipping; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view own shipping" ON public.shipping FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.orders
  WHERE ((orders.id = shipping.order_id) AND (orders.user_id = auth.uid())))));


--
-- Name: delivery_person_ratings Users can view ratings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view ratings" ON public.delivery_person_ratings FOR SELECT USING (true);


--
-- Name: support_ticket_ratings Users can view ratings for their tickets; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view ratings for their tickets" ON public.support_ticket_ratings FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.support_tickets
  WHERE (((support_tickets.id)::text = (support_ticket_ratings.ticket_id)::text) AND (support_tickets.user_id = auth.uid())))));


--
-- Name: support_ticket_responses Users can view responses to their tickets; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view responses to their tickets" ON public.support_ticket_responses FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.support_tickets
  WHERE (((support_tickets.id)::text = (support_ticket_responses.ticket_id)::text) AND (support_tickets.user_id = auth.uid())))));


--
-- Name: suppliers Users can view suppliers for their tenant; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view suppliers for their tenant" ON public.suppliers FOR SELECT USING ((tenant_id IN ( SELECT tenant_users.tenant_id
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.role = ANY (ARRAY['admin'::text, 'manager'::text, 'employee'::text]))))));


--
-- Name: tenant_delivery_persons Users can view tenant delivery persons; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view tenant delivery persons" ON public.tenant_delivery_persons FOR SELECT USING (((delivery_person_id IN ( SELECT delivery_persons.id
   FROM public.delivery_persons
  WHERE (delivery_persons.user_profile_id = auth.uid()))) OR (auth.uid() IN ( SELECT tu.user_id
   FROM public.tenant_users tu
  WHERE ((tu.tenant_id = tenant_delivery_persons.tenant_id) AND (tu.is_active = true))))));


--
-- Name: freight_quotes Users can view their freight quotes; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their freight quotes" ON public.freight_quotes FOR SELECT USING (((order_id IS NULL) OR (EXISTS ( SELECT 1
   FROM public.orders o
  WHERE ((o.id = freight_quotes.order_id) AND (o.user_id = auth.uid()))))));


--
-- Name: delivery_addresses Users can view their own addresses; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own addresses" ON public.delivery_addresses FOR SELECT USING ((user_id = auth.uid()));


--
-- Name: user_address Users can view their own addresses; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own addresses" ON public.user_address FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: tenant_customers Users can view their own customer record; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own customer record" ON public.tenant_customers FOR SELECT USING ((user_id = auth.uid()));


--
-- Name: delivery_orders Users can view their own delivery orders; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own delivery orders" ON public.delivery_orders FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.orders o
  WHERE ((o.id = delivery_orders.order_id) AND (o.user_id = auth.uid())))));


--
-- Name: notification_recipients Users can view their own notification recipients; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own notification recipients" ON public.notification_recipients FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: user_profile Users can view their own profile associations; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own profile associations" ON public.user_profile FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: user_roles Users can view their own role; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own role" ON public.user_roles FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: search_history Users can view their own search history; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own search history" ON public.search_history FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: user_settings Users can view their own settings; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own settings" ON public.user_settings FOR SELECT TO authenticated USING ((auth.uid() = user_id));


--
-- Name: support_tickets Users can view their own tickets; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view their own tickets" ON public.support_tickets FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: accounts; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.accounts ENABLE ROW LEVEL SECURITY;

--
-- Name: orders admins_update_tenant_orders; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY admins_update_tenant_orders ON public.orders FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.tenant_id = orders.tenant_id) AND (tenant_users.role = ANY (ARRAY['admin'::text, 'owner'::text]))))));


--
-- Name: order_item_modifiers admins_view_tenant_item_modifiers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY admins_view_tenant_item_modifiers ON public.order_item_modifiers FOR SELECT USING ((order_item_id IN ( SELECT oi.id
   FROM (public.order_items oi
     JOIN public.orders o ON ((oi.order_id = o.id)))
  WHERE (EXISTS ( SELECT 1
           FROM public.tenant_users tu
          WHERE ((tu.user_id = auth.uid()) AND (tu.tenant_id = o.tenant_id) AND (tu.role = ANY (ARRAY['admin'::text, 'owner'::text]))))))));


--
-- Name: order_items admins_view_tenant_order_items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY admins_view_tenant_order_items ON public.order_items FOR SELECT USING ((order_id IN ( SELECT o.id
   FROM public.orders o
  WHERE (EXISTS ( SELECT 1
           FROM public.tenant_users tu
          WHERE ((tu.user_id = auth.uid()) AND (tu.tenant_id = o.tenant_id) AND (tu.role = ANY (ARRAY['admin'::text, 'owner'::text]))))))));


--
-- Name: orders admins_view_tenant_orders; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY admins_view_tenant_orders ON public.orders FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.tenant_id = orders.tenant_id) AND (tenant_users.role = ANY (ARRAY['admin'::text, 'owner'::text]))))));


--
-- Name: api_keys; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.api_keys ENABLE ROW LEVEL SECURITY;

--
-- Name: banners; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.banners ENABLE ROW LEVEL SECURITY;

--
-- Name: brands; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.brands ENABLE ROW LEVEL SECURITY;

--
-- Name: brands brands_delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY brands_delete ON public.brands FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: brands brands_insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY brands_insert ON public.brands FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: brands brands_select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY brands_select ON public.brands FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: brands brands_update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY brands_update ON public.brands FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: business_settings; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.business_settings ENABLE ROW LEVEL SECURITY;

--
-- Name: business_types; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.business_types ENABLE ROW LEVEL SECURITY;

--
-- Name: categories; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;

--
-- Name: company_vehicle_usage; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.company_vehicle_usage ENABLE ROW LEVEL SECURITY;

--
-- Name: company_vehicles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.company_vehicles ENABLE ROW LEVEL SECURITY;

--
-- Name: countries; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.countries ENABLE ROW LEVEL SECURITY;

--
-- Name: tenant_customers customers_view_own_data; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY customers_view_own_data ON public.tenant_customers FOR SELECT USING ((user_id = auth.uid()));


--
-- Name: delivery_addresses; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_addresses ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_orders; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_orders ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_person_ratings; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_person_ratings ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_person_status_history; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_person_status_history ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_person_transactions; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_person_transactions ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_person_vehicles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_person_vehicles ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_person_wallet; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_person_wallet ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_persons; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_persons ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_settings; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_settings ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_vehicle_assignments; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_vehicle_assignments ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_zone_ceps; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_zone_ceps ENABLE ROW LEVEL SECURITY;

--
-- Name: delivery_zones; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.delivery_zones ENABLE ROW LEVEL SECURITY;

--
-- Name: event_images; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.event_images ENABLE ROW LEVEL SECURITY;

--
-- Name: events; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;

--
-- Name: freight_quotes; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.freight_quotes ENABLE ROW LEVEL SECURITY;

--
-- Name: gallery_images; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.gallery_images ENABLE ROW LEVEL SECURITY;

--
-- Name: group_discounts; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.group_discounts ENABLE ROW LEVEL SECURITY;

--
-- Name: ingredient_cost_history; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.ingredient_cost_history ENABLE ROW LEVEL SECURITY;

--
-- Name: ingredients; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.ingredients ENABLE ROW LEVEL SECURITY;

--
-- Name: measurement_units; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.measurement_units ENABLE ROW LEVEL SECURITY;

--
-- Name: media_items; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.media_items ENABLE ROW LEVEL SECURITY;

--
-- Name: menu_items; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.menu_items ENABLE ROW LEVEL SECURITY;

--
-- Name: modules; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.modules ENABLE ROW LEVEL SECURITY;

--
-- Name: news; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.news ENABLE ROW LEVEL SECURITY;

--
-- Name: notification_recipients; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.notification_recipients ENABLE ROW LEVEL SECURITY;

--
-- Name: notifications; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

--
-- Name: office_especialities; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.office_especialities ENABLE ROW LEVEL SECURITY;

--
-- Name: offices; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.offices ENABLE ROW LEVEL SECURITY;

--
-- Name: order_item_modifiers; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.order_item_modifiers ENABLE ROW LEVEL SECURITY;

--
-- Name: order_items; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.order_items ENABLE ROW LEVEL SECURITY;

--
-- Name: orders; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;

--
-- Name: payments; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;

--
-- Name: plan_modules; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.plan_modules ENABLE ROW LEVEL SECURITY;

--
-- Name: plans; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.plans ENABLE ROW LEVEL SECURITY;

--
-- Name: product_categories; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_categories ENABLE ROW LEVEL SECURITY;

--
-- Name: product_composition_eligibility; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_composition_eligibility ENABLE ROW LEVEL SECURITY;

--
-- Name: product_compositions; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_compositions ENABLE ROW LEVEL SECURITY;

--
-- Name: product_cost_history; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_cost_history ENABLE ROW LEVEL SECURITY;

--
-- Name: product_ingredient_compositions; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_ingredient_compositions ENABLE ROW LEVEL SECURITY;

--
-- Name: product_ingredient_quantities; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_ingredient_quantities ENABLE ROW LEVEL SECURITY;

--
-- Name: product_modifier_group_modifiers; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_modifier_group_modifiers ENABLE ROW LEVEL SECURITY;

--
-- Name: product_modifier_group_relations; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_modifier_group_relations ENABLE ROW LEVEL SECURITY;

--
-- Name: product_modifier_groups; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_modifier_groups ENABLE ROW LEVEL SECURITY;

--
-- Name: product_modifier_prices; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_modifier_prices ENABLE ROW LEVEL SECURITY;

--
-- Name: product_modifiers; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_modifiers ENABLE ROW LEVEL SECURITY;

--
-- Name: product_prices; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_prices ENABLE ROW LEVEL SECURITY;

--
-- Name: product_prices product_prices_all_authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_prices_all_authenticated ON public.product_prices TO authenticated USING (true) WITH CHECK (true);


--
-- Name: product_prices product_prices_select_all; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_prices_select_all ON public.product_prices FOR SELECT USING (true);


--
-- Name: product_stock; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_stock ENABLE ROW LEVEL SECURITY;

--
-- Name: product_stock product_stock_all_authenticated; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_stock_all_authenticated ON public.product_stock TO authenticated USING (true) WITH CHECK (true);


--
-- Name: product_stock_batches; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_stock_batches ENABLE ROW LEVEL SECURITY;

--
-- Name: product_stock_batches product_stock_batches_delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_stock_batches_delete ON public.product_stock_batches FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_stock_batches product_stock_batches_insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_stock_batches_insert ON public.product_stock_batches FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: product_stock_batches product_stock_batches_select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_stock_batches_select ON public.product_stock_batches FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_stock_batches product_stock_batches_update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_stock_batches_update ON public.product_stock_batches FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_stock_movements; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_stock_movements ENABLE ROW LEVEL SECURITY;

--
-- Name: product_stock_movements product_stock_movements_delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_stock_movements_delete ON public.product_stock_movements FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_stock_movements product_stock_movements_insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_stock_movements_insert ON public.product_stock_movements FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: product_stock_movements product_stock_movements_select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_stock_movements_select ON public.product_stock_movements FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_stock_movements product_stock_movements_update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_stock_movements_update ON public.product_stock_movements FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: product_stock product_stock_select_all; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY product_stock_select_all ON public.product_stock FOR SELECT USING (true);


--
-- Name: product_variants; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.product_variants ENABLE ROW LEVEL SECURITY;

--
-- Name: products; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;

--
-- Name: products products_delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY products_delete ON public.products FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: products products_insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY products_insert ON public.products FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: products products_select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY products_select ON public.products FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: products products_update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY products_update ON public.products FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: profiles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

--
-- Name: reviews; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.reviews ENABLE ROW LEVEL SECURITY;

--
-- Name: search_history; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.search_history ENABLE ROW LEVEL SECURITY;

--
-- Name: search_terms; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.search_terms ENABLE ROW LEVEL SECURITY;

--
-- Name: service_availability; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.service_availability ENABLE ROW LEVEL SECURITY;

--
-- Name: service_booking_items; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.service_booking_items ENABLE ROW LEVEL SECURITY;

--
-- Name: service_bookings; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.service_bookings ENABLE ROW LEVEL SECURITY;

--
-- Name: service_categories; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.service_categories ENABLE ROW LEVEL SECURITY;

--
-- Name: service_provider_services; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.service_provider_services ENABLE ROW LEVEL SECURITY;

--
-- Name: service_providers; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.service_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: service_reviews; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.service_reviews ENABLE ROW LEVEL SECURITY;

--
-- Name: services; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.services ENABLE ROW LEVEL SECURITY;

--
-- Name: shipping; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.shipping ENABLE ROW LEVEL SECURITY;

--
-- Name: shipping_providers; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.shipping_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: shipping_services; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.shipping_services ENABLE ROW LEVEL SECURITY;

--
-- Name: site_settings; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.site_settings ENABLE ROW LEVEL SECURITY;

--
-- Name: social_media; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.social_media ENABLE ROW LEVEL SECURITY;

--
-- Name: social_media social_media_admin_policy; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY social_media_admin_policy ON public.social_media USING ((auth.uid() IS NOT NULL));


--
-- Name: social_media social_media_select_policy; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY social_media_select_policy ON public.social_media FOR SELECT USING ((is_active = true));


--
-- Name: specialities; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.specialities ENABLE ROW LEVEL SECURITY;

--
-- Name: stock_batches; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.stock_batches ENABLE ROW LEVEL SECURITY;

--
-- Name: stock_batches stock_batches_delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY stock_batches_delete ON public.stock_batches FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: stock_batches stock_batches_insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY stock_batches_insert ON public.stock_batches FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: stock_batches stock_batches_select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY stock_batches_select ON public.stock_batches FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: stock_batches stock_batches_update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY stock_batches_update ON public.stock_batches FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: stock_movements; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.stock_movements ENABLE ROW LEVEL SECURITY;

--
-- Name: stock_movements stock_movements_delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY stock_movements_delete ON public.stock_movements FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: stock_movements stock_movements_insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY stock_movements_insert ON public.stock_movements FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: stock_movements stock_movements_select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY stock_movements_select ON public.stock_movements FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: stock_movements stock_movements_update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY stock_movements_update ON public.stock_movements FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: subscription_modules; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.subscription_modules ENABLE ROW LEVEL SECURITY;

--
-- Name: subscriptions; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.subscriptions ENABLE ROW LEVEL SECURITY;

--
-- Name: suppliers; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.suppliers ENABLE ROW LEVEL SECURITY;

--
-- Name: support_categories; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.support_categories ENABLE ROW LEVEL SECURITY;

--
-- Name: support_faq; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.support_faq ENABLE ROW LEVEL SECURITY;

--
-- Name: support_ticket_ratings; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.support_ticket_ratings ENABLE ROW LEVEL SECURITY;

--
-- Name: support_ticket_responses; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.support_ticket_responses ENABLE ROW LEVEL SECURITY;

--
-- Name: support_tickets; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.support_tickets ENABLE ROW LEVEL SECURITY;

--
-- Name: tenant_customers system_insert_customers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY system_insert_customers ON public.tenant_customers FOR INSERT WITH CHECK (true);


--
-- Name: tags; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.tags ENABLE ROW LEVEL SECURITY;

--
-- Name: tenant_customers; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.tenant_customers ENABLE ROW LEVEL SECURITY;

--
-- Name: tenant_delivery_persons; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.tenant_delivery_persons ENABLE ROW LEVEL SECURITY;

--
-- Name: tenant_invitations; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.tenant_invitations ENABLE ROW LEVEL SECURITY;

--
-- Name: tenant_invitations tenant_invitations_delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenant_invitations_delete ON public.tenant_invitations FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: tenant_invitations tenant_invitations_insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenant_invitations_insert ON public.tenant_invitations FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: tenant_invitations tenant_invitations_select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenant_invitations_select ON public.tenant_invitations FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: tenant_invitations tenant_invitations_update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenant_invitations_update ON public.tenant_invitations FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: tenant_users; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.tenant_users ENABLE ROW LEVEL SECURITY;

--
-- Name: tenant_users tenant_users_delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenant_users_delete ON public.tenant_users FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: tenant_users tenant_users_insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenant_users_insert ON public.tenant_users FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: tenant_users tenant_users_select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenant_users_select ON public.tenant_users FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: tenant_users tenant_users_update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenant_users_update ON public.tenant_users FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: tenants; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.tenants ENABLE ROW LEVEL SECURITY;

--
-- Name: tenants tenants_select_policy; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenants_select_policy ON public.tenants FOR SELECT TO authenticated, anon USING ((is_active = true));


--
-- Name: tenant_customers tenants_update_own_customers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenants_update_own_customers ON public.tenant_customers FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.tenant_id = tenant_customers.tenant_id) AND (tenant_users.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text]))))));


--
-- Name: tenant_customers tenants_view_own_customers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY tenants_view_own_customers ON public.tenant_customers FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.tenant_users
  WHERE ((tenant_users.user_id = auth.uid()) AND (tenant_users.tenant_id = tenant_customers.tenant_id) AND (tenant_users.role = ANY (ARRAY['owner'::text, 'admin'::text, 'manager'::text]))))));


--
-- Name: testimonials; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.testimonials ENABLE ROW LEVEL SECURITY;

--
-- Name: user_address; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_address ENABLE ROW LEVEL SECURITY;

--
-- Name: user_discounts; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_discounts ENABLE ROW LEVEL SECURITY;

--
-- Name: user_favorites; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_favorites ENABLE ROW LEVEL SECURITY;

--
-- Name: user_profile; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_profile ENABLE ROW LEVEL SECURITY;

--
-- Name: user_roles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

--
-- Name: user_settings; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_settings ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

--
-- Name: orders users_create_own_drafts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_create_own_drafts ON public.orders FOR INSERT WITH CHECK (((user_id = auth.uid()) AND (is_draft = true)));


--
-- Name: users users_delete; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_delete ON public.users FOR DELETE USING ((auth.role() = 'authenticated'::text));


--
-- Name: order_items users_delete_own_draft_items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_delete_own_draft_items ON public.order_items FOR DELETE USING ((order_id IN ( SELECT orders.id
   FROM public.orders
  WHERE ((orders.user_id = auth.uid()) AND (orders.is_draft = true)))));


--
-- Name: order_item_modifiers users_delete_own_draft_modifiers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_delete_own_draft_modifiers ON public.order_item_modifiers FOR DELETE USING ((order_item_id IN ( SELECT oi.id
   FROM (public.order_items oi
     JOIN public.orders o ON ((oi.order_id = o.id)))
  WHERE ((o.user_id = auth.uid()) AND (o.is_draft = true)))));


--
-- Name: orders users_delete_own_drafts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_delete_own_drafts ON public.orders FOR DELETE USING (((user_id = auth.uid()) AND (is_draft = true)));


--
-- Name: users users_insert; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_insert ON public.users FOR INSERT WITH CHECK ((auth.role() = 'authenticated'::text));


--
-- Name: order_items users_insert_own_draft_items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_insert_own_draft_items ON public.order_items FOR INSERT WITH CHECK ((order_id IN ( SELECT orders.id
   FROM public.orders
  WHERE ((orders.user_id = auth.uid()) AND (orders.is_draft = true)))));


--
-- Name: order_item_modifiers users_insert_own_draft_modifiers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_insert_own_draft_modifiers ON public.order_item_modifiers FOR INSERT WITH CHECK ((order_item_id IN ( SELECT oi.id
   FROM (public.order_items oi
     JOIN public.orders o ON ((oi.order_id = o.id)))
  WHERE ((o.user_id = auth.uid()) AND (o.is_draft = true)))));


--
-- Name: users users_select; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_select ON public.users FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: users users_update; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_update ON public.users FOR UPDATE USING ((auth.role() = 'authenticated'::text));


--
-- Name: order_items users_update_own_draft_items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_update_own_draft_items ON public.order_items FOR UPDATE USING ((order_id IN ( SELECT orders.id
   FROM public.orders
  WHERE ((orders.user_id = auth.uid()) AND (orders.is_draft = true)))));


--
-- Name: order_item_modifiers users_update_own_draft_modifiers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_update_own_draft_modifiers ON public.order_item_modifiers FOR UPDATE USING ((order_item_id IN ( SELECT oi.id
   FROM (public.order_items oi
     JOIN public.orders o ON ((oi.order_id = o.id)))
  WHERE ((o.user_id = auth.uid()) AND (o.is_draft = true)))));


--
-- Name: orders users_update_own_drafts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_update_own_drafts ON public.orders FOR UPDATE USING (((user_id = auth.uid()) AND (is_draft = true))) WITH CHECK ((user_id = auth.uid()));


--
-- Name: order_item_modifiers users_view_own_item_modifiers; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_view_own_item_modifiers ON public.order_item_modifiers FOR SELECT USING ((order_item_id IN ( SELECT oi.id
   FROM (public.order_items oi
     JOIN public.orders o ON ((oi.order_id = o.id)))
  WHERE (o.user_id = auth.uid()))));


--
-- Name: order_items users_view_own_order_items; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_view_own_order_items ON public.order_items FOR SELECT USING ((order_id IN ( SELECT orders.id
   FROM public.orders
  WHERE (orders.user_id = auth.uid()))));


--
-- Name: orders users_view_own_orders; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY users_view_own_orders ON public.orders FOR SELECT USING ((user_id = auth.uid()));


--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: objects Authenticated users can delete images; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Authenticated users can delete images" ON storage.objects FOR DELETE USING (((bucket_id = 'business'::text) AND (name ~~ 'images/%'::text) AND (auth.role() = 'authenticated'::text)));


--
-- Name: objects Authenticated users can update images; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Authenticated users can update images" ON storage.objects FOR UPDATE USING (((bucket_id = 'business'::text) AND (name ~~ 'images/%'::text) AND (auth.role() = 'authenticated'::text)));


--
-- Name: objects Authenticated users can upload images; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Authenticated users can upload images" ON storage.objects FOR INSERT WITH CHECK (((bucket_id = 'business'::text) AND (name ~~ 'images/%'::text) AND (auth.role() = 'authenticated'::text)));


--
-- Name: objects Public Access to Images; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Public Access to Images" ON storage.objects FOR SELECT USING (((bucket_id = 'business'::text) AND (name ~~ 'images/%'::text)));


--
-- Name: objects Public read access to user profile images; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Public read access to user profile images" ON storage.objects FOR SELECT USING (((bucket_id = 'business'::text) AND ((storage.foldername(name))[1] = 'users'::text)));


--
-- Name: objects Users can delete their own profile images; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Users can delete their own profile images" ON storage.objects FOR DELETE TO authenticated USING (((bucket_id = 'business'::text) AND ((storage.foldername(name))[1] = 'users'::text) AND (name ~~ (('users/'::text || (auth.uid())::text) || '_%'::text))));


--
-- Name: objects Users can update their own profile images; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Users can update their own profile images" ON storage.objects FOR UPDATE TO authenticated USING (((bucket_id = 'business'::text) AND ((storage.foldername(name))[1] = 'users'::text) AND (name ~~ (('users/'::text || (auth.uid())::text) || '_%'::text)))) WITH CHECK (((bucket_id = 'business'::text) AND ((storage.foldername(name))[1] = 'users'::text) AND (name ~~ (('users/'::text || (auth.uid())::text) || '_%'::text))));


--
-- Name: objects Users can upload their own profile images; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Users can upload their own profile images" ON storage.objects FOR INSERT TO authenticated WITH CHECK (((bucket_id = 'business'::text) AND ((storage.foldername(name))[1] = 'users'::text) AND (name ~~ (('users/'::text || (auth.uid())::text) || '_%'::text))));


--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: buckets_analytics; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets_analytics ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: prefixes; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.prefixes ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT USAGE ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA storage TO postgres WITH GRANT OPTION;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: SCHEMA vault; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA vault TO postgres WITH GRANT OPTION;
GRANT USAGE ON SCHEMA vault TO service_role;


--
-- Name: FUNCTION halfvec_in(cstring, oid, integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_in(cstring, oid, integer) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_in(cstring, oid, integer) TO anon;
GRANT ALL ON FUNCTION public.halfvec_in(cstring, oid, integer) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_in(cstring, oid, integer) TO service_role;


--
-- Name: FUNCTION halfvec_out(public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_out(public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_out(public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_out(public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_out(public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_recv(internal, oid, integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_recv(internal, oid, integer) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_recv(internal, oid, integer) TO anon;
GRANT ALL ON FUNCTION public.halfvec_recv(internal, oid, integer) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_recv(internal, oid, integer) TO service_role;


--
-- Name: FUNCTION halfvec_send(public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_send(public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_send(public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_send(public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_send(public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_typmod_in(cstring[]); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_typmod_in(cstring[]) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_typmod_in(cstring[]) TO anon;
GRANT ALL ON FUNCTION public.halfvec_typmod_in(cstring[]) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_typmod_in(cstring[]) TO service_role;


--
-- Name: FUNCTION sparsevec_in(cstring, oid, integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_in(cstring, oid, integer) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_in(cstring, oid, integer) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_in(cstring, oid, integer) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_in(cstring, oid, integer) TO service_role;


--
-- Name: FUNCTION sparsevec_out(public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_out(public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_out(public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_out(public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_out(public.sparsevec) TO service_role;


--
-- Name: FUNCTION sparsevec_recv(internal, oid, integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_recv(internal, oid, integer) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_recv(internal, oid, integer) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_recv(internal, oid, integer) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_recv(internal, oid, integer) TO service_role;


--
-- Name: FUNCTION sparsevec_send(public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_send(public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_send(public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_send(public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_send(public.sparsevec) TO service_role;


--
-- Name: FUNCTION sparsevec_typmod_in(cstring[]); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_typmod_in(cstring[]) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_typmod_in(cstring[]) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_typmod_in(cstring[]) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_typmod_in(cstring[]) TO service_role;


--
-- Name: FUNCTION vector_in(cstring, oid, integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_in(cstring, oid, integer) TO postgres;
GRANT ALL ON FUNCTION public.vector_in(cstring, oid, integer) TO anon;
GRANT ALL ON FUNCTION public.vector_in(cstring, oid, integer) TO authenticated;
GRANT ALL ON FUNCTION public.vector_in(cstring, oid, integer) TO service_role;


--
-- Name: FUNCTION vector_out(public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_out(public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_out(public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_out(public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_out(public.vector) TO service_role;


--
-- Name: FUNCTION vector_recv(internal, oid, integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_recv(internal, oid, integer) TO postgres;
GRANT ALL ON FUNCTION public.vector_recv(internal, oid, integer) TO anon;
GRANT ALL ON FUNCTION public.vector_recv(internal, oid, integer) TO authenticated;
GRANT ALL ON FUNCTION public.vector_recv(internal, oid, integer) TO service_role;


--
-- Name: FUNCTION vector_send(public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_send(public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_send(public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_send(public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_send(public.vector) TO service_role;


--
-- Name: FUNCTION vector_typmod_in(cstring[]); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_typmod_in(cstring[]) TO postgres;
GRANT ALL ON FUNCTION public.vector_typmod_in(cstring[]) TO anon;
GRANT ALL ON FUNCTION public.vector_typmod_in(cstring[]) TO authenticated;
GRANT ALL ON FUNCTION public.vector_typmod_in(cstring[]) TO service_role;


--
-- Name: FUNCTION array_to_halfvec(real[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_halfvec(real[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_halfvec(real[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_halfvec(real[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_halfvec(real[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_sparsevec(real[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_sparsevec(real[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_sparsevec(real[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_sparsevec(real[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_sparsevec(real[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_vector(real[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_vector(real[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_vector(real[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_vector(real[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_vector(real[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_halfvec(double precision[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_halfvec(double precision[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_halfvec(double precision[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_halfvec(double precision[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_halfvec(double precision[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_sparsevec(double precision[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_sparsevec(double precision[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_sparsevec(double precision[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_sparsevec(double precision[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_sparsevec(double precision[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_vector(double precision[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_vector(double precision[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_vector(double precision[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_vector(double precision[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_vector(double precision[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_halfvec(integer[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_halfvec(integer[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_halfvec(integer[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_halfvec(integer[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_halfvec(integer[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_sparsevec(integer[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_sparsevec(integer[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_sparsevec(integer[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_sparsevec(integer[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_sparsevec(integer[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_vector(integer[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_vector(integer[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_vector(integer[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_vector(integer[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_vector(integer[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_halfvec(numeric[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_halfvec(numeric[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_halfvec(numeric[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_halfvec(numeric[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_halfvec(numeric[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_sparsevec(numeric[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_sparsevec(numeric[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_sparsevec(numeric[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_sparsevec(numeric[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_sparsevec(numeric[], integer, boolean) TO service_role;


--
-- Name: FUNCTION array_to_vector(numeric[], integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.array_to_vector(numeric[], integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.array_to_vector(numeric[], integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.array_to_vector(numeric[], integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.array_to_vector(numeric[], integer, boolean) TO service_role;


--
-- Name: FUNCTION halfvec_to_float4(public.halfvec, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_to_float4(public.halfvec, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_to_float4(public.halfvec, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.halfvec_to_float4(public.halfvec, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_to_float4(public.halfvec, integer, boolean) TO service_role;


--
-- Name: FUNCTION halfvec(public.halfvec, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec(public.halfvec, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.halfvec(public.halfvec, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.halfvec(public.halfvec, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec(public.halfvec, integer, boolean) TO service_role;


--
-- Name: FUNCTION halfvec_to_sparsevec(public.halfvec, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_to_sparsevec(public.halfvec, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_to_sparsevec(public.halfvec, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.halfvec_to_sparsevec(public.halfvec, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_to_sparsevec(public.halfvec, integer, boolean) TO service_role;


--
-- Name: FUNCTION halfvec_to_vector(public.halfvec, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_to_vector(public.halfvec, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_to_vector(public.halfvec, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.halfvec_to_vector(public.halfvec, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_to_vector(public.halfvec, integer, boolean) TO service_role;


--
-- Name: FUNCTION sparsevec_to_halfvec(public.sparsevec, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_to_halfvec(public.sparsevec, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_to_halfvec(public.sparsevec, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_to_halfvec(public.sparsevec, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_to_halfvec(public.sparsevec, integer, boolean) TO service_role;


--
-- Name: FUNCTION sparsevec(public.sparsevec, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec(public.sparsevec, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec(public.sparsevec, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.sparsevec(public.sparsevec, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec(public.sparsevec, integer, boolean) TO service_role;


--
-- Name: FUNCTION sparsevec_to_vector(public.sparsevec, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_to_vector(public.sparsevec, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_to_vector(public.sparsevec, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_to_vector(public.sparsevec, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_to_vector(public.sparsevec, integer, boolean) TO service_role;


--
-- Name: FUNCTION vector_to_float4(public.vector, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_to_float4(public.vector, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.vector_to_float4(public.vector, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.vector_to_float4(public.vector, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.vector_to_float4(public.vector, integer, boolean) TO service_role;


--
-- Name: FUNCTION vector_to_halfvec(public.vector, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_to_halfvec(public.vector, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.vector_to_halfvec(public.vector, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.vector_to_halfvec(public.vector, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.vector_to_halfvec(public.vector, integer, boolean) TO service_role;


--
-- Name: FUNCTION vector_to_sparsevec(public.vector, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_to_sparsevec(public.vector, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.vector_to_sparsevec(public.vector, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.vector_to_sparsevec(public.vector, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.vector_to_sparsevec(public.vector, integer, boolean) TO service_role;


--
-- Name: FUNCTION vector(public.vector, integer, boolean); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector(public.vector, integer, boolean) TO postgres;
GRANT ALL ON FUNCTION public.vector(public.vector, integer, boolean) TO anon;
GRANT ALL ON FUNCTION public.vector(public.vector, integer, boolean) TO authenticated;
GRANT ALL ON FUNCTION public.vector(public.vector, integer, boolean) TO service_role;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea, text[], text[]) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION bytea_to_text(data bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.bytea_to_text(data bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_uuid() FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM supabase_admin;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO supabase_admin WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM supabase_admin;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO supabase_admin WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION http(request extensions.http_request); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http(request extensions.http_request) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_delete(uri character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_delete(uri character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_delete(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_delete(uri character varying, content character varying, content_type character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_get(uri character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_get(uri character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_get(uri character varying, data jsonb); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_get(uri character varying, data jsonb) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_head(uri character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_head(uri character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_header(field character varying, value character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_header(field character varying, value character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_list_curlopt(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_list_curlopt() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_patch(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_patch(uri character varying, content character varying, content_type character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_post(uri character varying, data jsonb); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_post(uri character varying, data jsonb) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_post(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_post(uri character varying, content character varying, content_type character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_put(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_put(uri character varying, content character varying, content_type character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_reset_curlopt(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_reset_curlopt() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION http_set_curlopt(curlopt character varying, value character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.http_set_curlopt(curlopt character varying, value character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint, minmax_only boolean); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint, minmax_only boolean) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint, minmax_only boolean) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint, minmax_only boolean) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION text_to_bytea(data text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.text_to_bytea(data text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION urlencode(string bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.urlencode(string bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION urlencode(data jsonb); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.urlencode(data jsonb) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION urlencode(string character varying); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.urlencode(string character varying) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1mc() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v4() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_nil() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_dns() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_oid() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_url() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_x500() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO postgres;


--
-- Name: FUNCTION apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_limit integer, p_offset integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_limit integer, p_offset integer) TO anon;
GRANT ALL ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_limit integer, p_offset integer) TO authenticated;
GRANT ALL ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_limit integer, p_offset integer) TO service_role;


--
-- Name: FUNCTION apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_limit integer, p_offset integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_limit integer, p_offset integer) TO anon;
GRANT ALL ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_limit integer, p_offset integer) TO authenticated;
GRANT ALL ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_limit integer, p_offset integer) TO service_role;


--
-- Name: FUNCTION apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_sort_by text, p_limit integer, p_offset integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_sort_by text, p_limit integer, p_offset integer) TO anon;
GRANT ALL ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_sort_by text, p_limit integer, p_offset integer) TO authenticated;
GRANT ALL ON FUNCTION public.apply_product_filters(p_tenant_id uuid, p_category_id uuid, p_brand text, p_color text, p_size text, p_min_price numeric, p_max_price numeric, p_search_term text, p_context_type text, p_sort_by text, p_limit integer, p_offset integer) TO service_role;


--
-- Name: FUNCTION binary_quantize(public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.binary_quantize(public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.binary_quantize(public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.binary_quantize(public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.binary_quantize(public.halfvec) TO service_role;


--
-- Name: FUNCTION binary_quantize(public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.binary_quantize(public.vector) TO postgres;
GRANT ALL ON FUNCTION public.binary_quantize(public.vector) TO anon;
GRANT ALL ON FUNCTION public.binary_quantize(public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.binary_quantize(public.vector) TO service_role;


--
-- Name: FUNCTION calculate_order_total_from_items(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.calculate_order_total_from_items() TO anon;
GRANT ALL ON FUNCTION public.calculate_order_total_from_items() TO authenticated;
GRANT ALL ON FUNCTION public.calculate_order_total_from_items() TO service_role;


--
-- Name: FUNCTION calculate_order_total_from_modifiers(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.calculate_order_total_from_modifiers() TO anon;
GRANT ALL ON FUNCTION public.calculate_order_total_from_modifiers() TO authenticated;
GRANT ALL ON FUNCTION public.calculate_order_total_from_modifiers() TO service_role;


--
-- Name: FUNCTION calculate_product_cost(p_product_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.calculate_product_cost(p_product_id uuid) TO anon;
GRANT ALL ON FUNCTION public.calculate_product_cost(p_product_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.calculate_product_cost(p_product_id uuid) TO service_role;


--
-- Name: FUNCTION calculate_product_weighted_average_cost(p_product_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.calculate_product_weighted_average_cost(p_product_id uuid) TO anon;
GRANT ALL ON FUNCTION public.calculate_product_weighted_average_cost(p_product_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.calculate_product_weighted_average_cost(p_product_id uuid) TO service_role;


--
-- Name: FUNCTION calculate_weighted_average_cost(p_ingredient_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.calculate_weighted_average_cost(p_ingredient_id uuid) TO anon;
GRANT ALL ON FUNCTION public.calculate_weighted_average_cost(p_ingredient_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.calculate_weighted_average_cost(p_ingredient_id uuid) TO service_role;


--
-- Name: FUNCTION check_entity_exists(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.check_entity_exists() TO anon;
GRANT ALL ON FUNCTION public.check_entity_exists() TO authenticated;
GRANT ALL ON FUNCTION public.check_entity_exists() TO service_role;


--
-- Name: FUNCTION check_modifier_availability(modifier_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.check_modifier_availability(modifier_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.check_modifier_availability(modifier_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.check_modifier_availability(modifier_uuid uuid) TO service_role;


--
-- Name: FUNCTION cleanup_expired_drafts(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.cleanup_expired_drafts() TO anon;
GRANT ALL ON FUNCTION public.cleanup_expired_drafts() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_expired_drafts() TO service_role;


--
-- Name: FUNCTION cleanup_old_notifications(p_days_old integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.cleanup_old_notifications(p_days_old integer) TO anon;
GRANT ALL ON FUNCTION public.cleanup_old_notifications(p_days_old integer) TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_old_notifications(p_days_old integer) TO service_role;


--
-- Name: FUNCTION consume_product_stock_fifo(p_product_id uuid, p_quantity integer, p_notes text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.consume_product_stock_fifo(p_product_id uuid, p_quantity integer, p_notes text) TO anon;
GRANT ALL ON FUNCTION public.consume_product_stock_fifo(p_product_id uuid, p_quantity integer, p_notes text) TO authenticated;
GRANT ALL ON FUNCTION public.consume_product_stock_fifo(p_product_id uuid, p_quantity integer, p_notes text) TO service_role;


--
-- Name: FUNCTION consume_stock_fifo(p_ingredient_id uuid, p_quantity numeric, p_product_id uuid, p_notes text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.consume_stock_fifo(p_ingredient_id uuid, p_quantity numeric, p_product_id uuid, p_notes text) TO anon;
GRANT ALL ON FUNCTION public.consume_stock_fifo(p_ingredient_id uuid, p_quantity numeric, p_product_id uuid, p_notes text) TO authenticated;
GRANT ALL ON FUNCTION public.consume_stock_fifo(p_ingredient_id uuid, p_quantity numeric, p_product_id uuid, p_notes text) TO service_role;


--
-- Name: FUNCTION convert_purchase_to_ingredient_unit(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.convert_purchase_to_ingredient_unit() TO anon;
GRANT ALL ON FUNCTION public.convert_purchase_to_ingredient_unit() TO authenticated;
GRANT ALL ON FUNCTION public.convert_purchase_to_ingredient_unit() TO service_role;


--
-- Name: FUNCTION convert_unit(quantity numeric, from_unit_id uuid, to_unit_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.convert_unit(quantity numeric, from_unit_id uuid, to_unit_id uuid) TO anon;
GRANT ALL ON FUNCTION public.convert_unit(quantity numeric, from_unit_id uuid, to_unit_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.convert_unit(quantity numeric, from_unit_id uuid, to_unit_id uuid) TO service_role;


--
-- Name: FUNCTION cosine_distance(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.cosine_distance(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.cosine_distance(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.cosine_distance(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.cosine_distance(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION cosine_distance(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.cosine_distance(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.cosine_distance(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.cosine_distance(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.cosine_distance(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION cosine_distance(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.cosine_distance(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.cosine_distance(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.cosine_distance(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.cosine_distance(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION create_notification_for_tenant(p_tenant_id uuid, p_title text, p_content text, p_notification_type character varying, p_priority character varying, p_big_image text, p_url text, p_param_name text, p_item_id text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.create_notification_for_tenant(p_tenant_id uuid, p_title text, p_content text, p_notification_type character varying, p_priority character varying, p_big_image text, p_url text, p_param_name text, p_item_id text) TO anon;
GRANT ALL ON FUNCTION public.create_notification_for_tenant(p_tenant_id uuid, p_title text, p_content text, p_notification_type character varying, p_priority character varying, p_big_image text, p_url text, p_param_name text, p_item_id text) TO authenticated;
GRANT ALL ON FUNCTION public.create_notification_for_tenant(p_tenant_id uuid, p_title text, p_content text, p_notification_type character varying, p_priority character varying, p_big_image text, p_url text, p_param_name text, p_item_id text) TO service_role;


--
-- Name: FUNCTION create_notification_for_user(p_tenant_id uuid, p_user_id uuid, p_title text, p_content text, p_notification_type character varying, p_priority character varying, p_big_image text, p_url text, p_param_name text, p_item_id text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.create_notification_for_user(p_tenant_id uuid, p_user_id uuid, p_title text, p_content text, p_notification_type character varying, p_priority character varying, p_big_image text, p_url text, p_param_name text, p_item_id text) TO anon;
GRANT ALL ON FUNCTION public.create_notification_for_user(p_tenant_id uuid, p_user_id uuid, p_title text, p_content text, p_notification_type character varying, p_priority character varying, p_big_image text, p_url text, p_param_name text, p_item_id text) TO authenticated;
GRANT ALL ON FUNCTION public.create_notification_for_user(p_tenant_id uuid, p_user_id uuid, p_title text, p_content text, p_notification_type character varying, p_priority character varying, p_big_image text, p_url text, p_param_name text, p_item_id text) TO service_role;


--
-- Name: FUNCTION decrement_cash_register_amount(p_session_id uuid, p_amount numeric); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.decrement_cash_register_amount(p_session_id uuid, p_amount numeric) TO anon;
GRANT ALL ON FUNCTION public.decrement_cash_register_amount(p_session_id uuid, p_amount numeric) TO authenticated;
GRANT ALL ON FUNCTION public.decrement_cash_register_amount(p_session_id uuid, p_amount numeric) TO service_role;


--
-- Name: FUNCTION ensure_single_default_address(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.ensure_single_default_address() TO anon;
GRANT ALL ON FUNCTION public.ensure_single_default_address() TO authenticated;
GRANT ALL ON FUNCTION public.ensure_single_default_address() TO service_role;


--
-- Name: FUNCTION ensure_single_default_language(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.ensure_single_default_language() TO anon;
GRANT ALL ON FUNCTION public.ensure_single_default_language() TO authenticated;
GRANT ALL ON FUNCTION public.ensure_single_default_language() TO service_role;


--
-- Name: FUNCTION ensure_single_primary_vehicle(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.ensure_single_primary_vehicle() TO anon;
GRANT ALL ON FUNCTION public.ensure_single_primary_vehicle() TO authenticated;
GRANT ALL ON FUNCTION public.ensure_single_primary_vehicle() TO service_role;


--
-- Name: FUNCTION generate_order_number_manual(order_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.generate_order_number_manual(order_id uuid) TO anon;
GRANT ALL ON FUNCTION public.generate_order_number_manual(order_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.generate_order_number_manual(order_id uuid) TO service_role;


--
-- Name: FUNCTION generate_ticket_code(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.generate_ticket_code() TO anon;
GRANT ALL ON FUNCTION public.generate_ticket_code() TO authenticated;
GRANT ALL ON FUNCTION public.generate_ticket_code() TO service_role;


--
-- Name: FUNCTION get_active_business_types(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_active_business_types() TO anon;
GRANT ALL ON FUNCTION public.get_active_business_types() TO authenticated;
GRANT ALL ON FUNCTION public.get_active_business_types() TO service_role;


--
-- Name: FUNCTION get_base_unit(p_unit_type public.unit_type); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_base_unit(p_unit_type public.unit_type) TO anon;
GRANT ALL ON FUNCTION public.get_base_unit(p_unit_type public.unit_type) TO authenticated;
GRANT ALL ON FUNCTION public.get_base_unit(p_unit_type public.unit_type) TO service_role;


--
-- Name: FUNCTION get_billing_address(user_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_billing_address(user_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.get_billing_address(user_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_billing_address(user_uuid uuid) TO service_role;


--
-- Name: FUNCTION get_business_type(code_param character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_business_type(code_param character varying) TO anon;
GRANT ALL ON FUNCTION public.get_business_type(code_param character varying) TO authenticated;
GRANT ALL ON FUNCTION public.get_business_type(code_param character varying) TO service_role;


--
-- Name: FUNCTION get_company_vehicles_by_tenant(p_tenant_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_company_vehicles_by_tenant(p_tenant_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_company_vehicles_by_tenant(p_tenant_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_company_vehicles_by_tenant(p_tenant_id uuid) TO service_role;


--
-- Name: FUNCTION get_current_tenant_id(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_current_tenant_id() TO anon;
GRANT ALL ON FUNCTION public.get_current_tenant_id() TO authenticated;
GRANT ALL ON FUNCTION public.get_current_tenant_id() TO service_role;


--
-- Name: FUNCTION get_current_user_role(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_current_user_role() TO anon;
GRANT ALL ON FUNCTION public.get_current_user_role() TO authenticated;
GRANT ALL ON FUNCTION public.get_current_user_role() TO service_role;


--
-- Name: FUNCTION get_default_address(user_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_default_address(user_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.get_default_address(user_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_default_address(user_uuid uuid) TO service_role;


--
-- Name: FUNCTION get_filter_options(p_tenant_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_filter_options(p_tenant_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_filter_options(p_tenant_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_filter_options(p_tenant_id uuid) TO service_role;


--
-- Name: TABLE user_settings; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_settings TO anon;
GRANT ALL ON TABLE public.user_settings TO authenticated;
GRANT ALL ON TABLE public.user_settings TO service_role;


--
-- Name: FUNCTION get_or_create_user_settings(p_user_id uuid, p_tenant_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_or_create_user_settings(p_user_id uuid, p_tenant_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_or_create_user_settings(p_user_id uuid, p_tenant_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_or_create_user_settings(p_user_id uuid, p_tenant_id uuid) TO service_role;


--
-- Name: FUNCTION get_plans_by_business_type(business_type_code character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_plans_by_business_type(business_type_code character varying) TO anon;
GRANT ALL ON FUNCTION public.get_plans_by_business_type(business_type_code character varying) TO authenticated;
GRANT ALL ON FUNCTION public.get_plans_by_business_type(business_type_code character varying) TO service_role;


--
-- Name: FUNCTION get_popular_search_terms(p_tenant_id uuid, p_limit integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_popular_search_terms(p_tenant_id uuid, p_limit integer) TO anon;
GRANT ALL ON FUNCTION public.get_popular_search_terms(p_tenant_id uuid, p_limit integer) TO authenticated;
GRANT ALL ON FUNCTION public.get_popular_search_terms(p_tenant_id uuid, p_limit integer) TO service_role;


--
-- Name: FUNCTION get_product_average_rating(product_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_product_average_rating(product_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.get_product_average_rating(product_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_product_average_rating(product_uuid uuid) TO service_role;


--
-- Name: FUNCTION get_product_rating_stats(product_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_product_rating_stats(product_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.get_product_rating_stats(product_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_product_rating_stats(product_uuid uuid) TO service_role;


--
-- Name: FUNCTION get_subscription_modules(subscription_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_subscription_modules(subscription_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.get_subscription_modules(subscription_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_subscription_modules(subscription_uuid uuid) TO service_role;


--
-- Name: FUNCTION get_tenant_average_rating(tenant_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_tenant_average_rating(tenant_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.get_tenant_average_rating(tenant_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_tenant_average_rating(tenant_uuid uuid) TO service_role;


--
-- Name: FUNCTION get_tenant_rating_stats(tenant_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_tenant_rating_stats(tenant_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.get_tenant_rating_stats(tenant_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_tenant_rating_stats(tenant_uuid uuid) TO service_role;


--
-- Name: FUNCTION get_tenant_testimonials_with_stats(tenant_uuid uuid, limit_count integer, offset_count integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_tenant_testimonials_with_stats(tenant_uuid uuid, limit_count integer, offset_count integer) TO anon;
GRANT ALL ON FUNCTION public.get_tenant_testimonials_with_stats(tenant_uuid uuid, limit_count integer, offset_count integer) TO authenticated;
GRANT ALL ON FUNCTION public.get_tenant_testimonials_with_stats(tenant_uuid uuid, limit_count integer, offset_count integer) TO service_role;


--
-- Name: FUNCTION get_unread_notifications_count(p_user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_unread_notifications_count(p_user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_unread_notifications_count(p_user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_unread_notifications_count(p_user_id uuid) TO service_role;


--
-- Name: FUNCTION get_user_cart_count(p_user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_user_cart_count(p_user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_user_cart_count(p_user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_user_cart_count(p_user_id uuid) TO service_role;


--
-- Name: FUNCTION get_user_cart_total(p_user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_user_cart_total(p_user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_user_cart_total(p_user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_user_cart_total(p_user_id uuid) TO service_role;


--
-- Name: FUNCTION get_user_search_history(p_user_id uuid, p_tenant_id uuid, p_limit integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_user_search_history(p_user_id uuid, p_tenant_id uuid, p_limit integer) TO anon;
GRANT ALL ON FUNCTION public.get_user_search_history(p_user_id uuid, p_tenant_id uuid, p_limit integer) TO authenticated;
GRANT ALL ON FUNCTION public.get_user_search_history(p_user_id uuid, p_tenant_id uuid, p_limit integer) TO service_role;


--
-- Name: FUNCTION get_user_tenants(user_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_user_tenants(user_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.get_user_tenants(user_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_user_tenants(user_uuid uuid) TO service_role;


--
-- Name: FUNCTION google_place_details(p_place_id text, p_session_token text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.google_place_details(p_place_id text, p_session_token text) TO anon;
GRANT ALL ON FUNCTION public.google_place_details(p_place_id text, p_session_token text) TO authenticated;
GRANT ALL ON FUNCTION public.google_place_details(p_place_id text, p_session_token text) TO service_role;


--
-- Name: FUNCTION google_places_autocomplete(p_input text, p_session_token text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.google_places_autocomplete(p_input text, p_session_token text) TO anon;
GRANT ALL ON FUNCTION public.google_places_autocomplete(p_input text, p_session_token text) TO authenticated;
GRANT ALL ON FUNCTION public.google_places_autocomplete(p_input text, p_session_token text) TO service_role;


--
-- Name: FUNCTION halfvec_accum(double precision[], public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_accum(double precision[], public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_accum(double precision[], public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_accum(double precision[], public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_accum(double precision[], public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_add(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_add(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_add(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_add(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_add(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_avg(double precision[]); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_avg(double precision[]) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_avg(double precision[]) TO anon;
GRANT ALL ON FUNCTION public.halfvec_avg(double precision[]) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_avg(double precision[]) TO service_role;


--
-- Name: FUNCTION halfvec_cmp(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_cmp(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_cmp(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_cmp(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_cmp(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_combine(double precision[], double precision[]); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_combine(double precision[], double precision[]) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_combine(double precision[], double precision[]) TO anon;
GRANT ALL ON FUNCTION public.halfvec_combine(double precision[], double precision[]) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_combine(double precision[], double precision[]) TO service_role;


--
-- Name: FUNCTION halfvec_concat(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_concat(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_concat(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_concat(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_concat(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_eq(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_eq(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_eq(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_eq(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_eq(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_ge(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_ge(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_ge(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_ge(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_ge(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_gt(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_gt(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_gt(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_gt(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_gt(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_l2_squared_distance(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_l2_squared_distance(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_l2_squared_distance(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_l2_squared_distance(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_l2_squared_distance(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_le(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_le(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_le(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_le(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_le(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_lt(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_lt(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_lt(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_lt(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_lt(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_mul(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_mul(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_mul(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_mul(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_mul(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_ne(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_ne(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_ne(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_ne(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_ne(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_negative_inner_product(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_negative_inner_product(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_negative_inner_product(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_negative_inner_product(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_negative_inner_product(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_spherical_distance(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_spherical_distance(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_spherical_distance(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_spherical_distance(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_spherical_distance(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION halfvec_sub(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.halfvec_sub(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.halfvec_sub(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.halfvec_sub(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.halfvec_sub(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION hamming_distance(bit, bit); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.hamming_distance(bit, bit) TO postgres;
GRANT ALL ON FUNCTION public.hamming_distance(bit, bit) TO anon;
GRANT ALL ON FUNCTION public.hamming_distance(bit, bit) TO authenticated;
GRANT ALL ON FUNCTION public.hamming_distance(bit, bit) TO service_role;


--
-- Name: FUNCTION handle_new_user(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.handle_new_user() TO anon;
GRANT ALL ON FUNCTION public.handle_new_user() TO authenticated;
GRANT ALL ON FUNCTION public.handle_new_user() TO service_role;


--
-- Name: FUNCTION has_role(_user_id uuid, _role public.app_role); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.has_role(_user_id uuid, _role public.app_role) TO anon;
GRANT ALL ON FUNCTION public.has_role(_user_id uuid, _role public.app_role) TO authenticated;
GRANT ALL ON FUNCTION public.has_role(_user_id uuid, _role public.app_role) TO service_role;


--
-- Name: FUNCTION hnsw_bit_support(internal); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.hnsw_bit_support(internal) TO postgres;
GRANT ALL ON FUNCTION public.hnsw_bit_support(internal) TO anon;
GRANT ALL ON FUNCTION public.hnsw_bit_support(internal) TO authenticated;
GRANT ALL ON FUNCTION public.hnsw_bit_support(internal) TO service_role;


--
-- Name: FUNCTION hnsw_halfvec_support(internal); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.hnsw_halfvec_support(internal) TO postgres;
GRANT ALL ON FUNCTION public.hnsw_halfvec_support(internal) TO anon;
GRANT ALL ON FUNCTION public.hnsw_halfvec_support(internal) TO authenticated;
GRANT ALL ON FUNCTION public.hnsw_halfvec_support(internal) TO service_role;


--
-- Name: FUNCTION hnsw_sparsevec_support(internal); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.hnsw_sparsevec_support(internal) TO postgres;
GRANT ALL ON FUNCTION public.hnsw_sparsevec_support(internal) TO anon;
GRANT ALL ON FUNCTION public.hnsw_sparsevec_support(internal) TO authenticated;
GRANT ALL ON FUNCTION public.hnsw_sparsevec_support(internal) TO service_role;


--
-- Name: FUNCTION hnswhandler(internal); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.hnswhandler(internal) TO postgres;
GRANT ALL ON FUNCTION public.hnswhandler(internal) TO anon;
GRANT ALL ON FUNCTION public.hnswhandler(internal) TO authenticated;
GRANT ALL ON FUNCTION public.hnswhandler(internal) TO service_role;


--
-- Name: FUNCTION increment_cash_register_amount(p_session_id uuid, p_amount numeric); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.increment_cash_register_amount(p_session_id uuid, p_amount numeric) TO anon;
GRANT ALL ON FUNCTION public.increment_cash_register_amount(p_session_id uuid, p_amount numeric) TO authenticated;
GRANT ALL ON FUNCTION public.increment_cash_register_amount(p_session_id uuid, p_amount numeric) TO service_role;


--
-- Name: FUNCTION increment_faq_view_count(faq_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.increment_faq_view_count(faq_id uuid) TO anon;
GRANT ALL ON FUNCTION public.increment_faq_view_count(faq_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.increment_faq_view_count(faq_id uuid) TO service_role;


--
-- Name: FUNCTION inner_product(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.inner_product(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.inner_product(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.inner_product(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.inner_product(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION inner_product(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.inner_product(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.inner_product(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.inner_product(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.inner_product(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION inner_product(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.inner_product(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.inner_product(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.inner_product(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.inner_product(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION ivfflat_bit_support(internal); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.ivfflat_bit_support(internal) TO postgres;
GRANT ALL ON FUNCTION public.ivfflat_bit_support(internal) TO anon;
GRANT ALL ON FUNCTION public.ivfflat_bit_support(internal) TO authenticated;
GRANT ALL ON FUNCTION public.ivfflat_bit_support(internal) TO service_role;


--
-- Name: FUNCTION ivfflat_halfvec_support(internal); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.ivfflat_halfvec_support(internal) TO postgres;
GRANT ALL ON FUNCTION public.ivfflat_halfvec_support(internal) TO anon;
GRANT ALL ON FUNCTION public.ivfflat_halfvec_support(internal) TO authenticated;
GRANT ALL ON FUNCTION public.ivfflat_halfvec_support(internal) TO service_role;


--
-- Name: FUNCTION ivfflathandler(internal); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.ivfflathandler(internal) TO postgres;
GRANT ALL ON FUNCTION public.ivfflathandler(internal) TO anon;
GRANT ALL ON FUNCTION public.ivfflathandler(internal) TO authenticated;
GRANT ALL ON FUNCTION public.ivfflathandler(internal) TO service_role;


--
-- Name: FUNCTION jaccard_distance(bit, bit); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.jaccard_distance(bit, bit) TO postgres;
GRANT ALL ON FUNCTION public.jaccard_distance(bit, bit) TO anon;
GRANT ALL ON FUNCTION public.jaccard_distance(bit, bit) TO authenticated;
GRANT ALL ON FUNCTION public.jaccard_distance(bit, bit) TO service_role;


--
-- Name: FUNCTION l1_distance(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l1_distance(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.l1_distance(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.l1_distance(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.l1_distance(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION l1_distance(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l1_distance(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.l1_distance(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.l1_distance(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.l1_distance(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION l1_distance(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l1_distance(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.l1_distance(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.l1_distance(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.l1_distance(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION l2_distance(public.halfvec, public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l2_distance(public.halfvec, public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.l2_distance(public.halfvec, public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.l2_distance(public.halfvec, public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.l2_distance(public.halfvec, public.halfvec) TO service_role;


--
-- Name: FUNCTION l2_distance(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l2_distance(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.l2_distance(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.l2_distance(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.l2_distance(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION l2_distance(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l2_distance(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.l2_distance(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.l2_distance(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.l2_distance(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION l2_norm(public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l2_norm(public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.l2_norm(public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.l2_norm(public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.l2_norm(public.halfvec) TO service_role;


--
-- Name: FUNCTION l2_norm(public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l2_norm(public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.l2_norm(public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.l2_norm(public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.l2_norm(public.sparsevec) TO service_role;


--
-- Name: FUNCTION l2_normalize(public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l2_normalize(public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.l2_normalize(public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.l2_normalize(public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.l2_normalize(public.halfvec) TO service_role;


--
-- Name: FUNCTION l2_normalize(public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l2_normalize(public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.l2_normalize(public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.l2_normalize(public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.l2_normalize(public.sparsevec) TO service_role;


--
-- Name: FUNCTION l2_normalize(public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.l2_normalize(public.vector) TO postgres;
GRANT ALL ON FUNCTION public.l2_normalize(public.vector) TO anon;
GRANT ALL ON FUNCTION public.l2_normalize(public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.l2_normalize(public.vector) TO service_role;


--
-- Name: FUNCTION log_delivery_person_status_change(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.log_delivery_person_status_change() TO anon;
GRANT ALL ON FUNCTION public.log_delivery_person_status_change() TO authenticated;
GRANT ALL ON FUNCTION public.log_delivery_person_status_change() TO service_role;


--
-- Name: FUNCTION mark_all_notifications_as_read(p_user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.mark_all_notifications_as_read(p_user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.mark_all_notifications_as_read(p_user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.mark_all_notifications_as_read(p_user_id uuid) TO service_role;


--
-- Name: FUNCTION mark_notification_as_read(p_notification_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.mark_notification_as_read(p_notification_id uuid, p_user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.mark_notification_as_read(p_notification_id uuid, p_user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.mark_notification_as_read(p_notification_id uuid, p_user_id uuid) TO service_role;


--
-- Name: FUNCTION match_documents(query_embedding public.vector, match_count integer, filter jsonb); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.match_documents(query_embedding public.vector, match_count integer, filter jsonb) TO anon;
GRANT ALL ON FUNCTION public.match_documents(query_embedding public.vector, match_count integer, filter jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.match_documents(query_embedding public.vector, match_count integer, filter jsonb) TO service_role;


--
-- Name: FUNCTION refresh_product_reviews_stats(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.refresh_product_reviews_stats() TO anon;
GRANT ALL ON FUNCTION public.refresh_product_reviews_stats() TO authenticated;
GRANT ALL ON FUNCTION public.refresh_product_reviews_stats() TO service_role;


--
-- Name: FUNCTION register_product_purchase(p_product_id uuid, p_quantity integer, p_unit_cost numeric, p_supplier_id uuid, p_reference_number text, p_expiry_date timestamp with time zone, p_notes text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.register_product_purchase(p_product_id uuid, p_quantity integer, p_unit_cost numeric, p_supplier_id uuid, p_reference_number text, p_expiry_date timestamp with time zone, p_notes text) TO anon;
GRANT ALL ON FUNCTION public.register_product_purchase(p_product_id uuid, p_quantity integer, p_unit_cost numeric, p_supplier_id uuid, p_reference_number text, p_expiry_date timestamp with time zone, p_notes text) TO authenticated;
GRANT ALL ON FUNCTION public.register_product_purchase(p_product_id uuid, p_quantity integer, p_unit_cost numeric, p_supplier_id uuid, p_reference_number text, p_expiry_date timestamp with time zone, p_notes text) TO service_role;


--
-- Name: FUNCTION register_search(p_user_id uuid, p_tenant_id uuid, p_search_term text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.register_search(p_user_id uuid, p_tenant_id uuid, p_search_term text) TO anon;
GRANT ALL ON FUNCTION public.register_search(p_user_id uuid, p_tenant_id uuid, p_search_term text) TO authenticated;
GRANT ALL ON FUNCTION public.register_search(p_user_id uuid, p_tenant_id uuid, p_search_term text) TO service_role;


--
-- Name: FUNCTION register_stock_purchase(p_ingredient_id uuid, p_quantity numeric, p_unit_id uuid, p_unit_cost numeric, p_supplier_id uuid, p_batch_number text, p_expiry_date timestamp with time zone, p_reference_number text, p_notes text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.register_stock_purchase(p_ingredient_id uuid, p_quantity numeric, p_unit_id uuid, p_unit_cost numeric, p_supplier_id uuid, p_batch_number text, p_expiry_date timestamp with time zone, p_reference_number text, p_notes text) TO anon;
GRANT ALL ON FUNCTION public.register_stock_purchase(p_ingredient_id uuid, p_quantity numeric, p_unit_id uuid, p_unit_cost numeric, p_supplier_id uuid, p_batch_number text, p_expiry_date timestamp with time zone, p_reference_number text, p_notes text) TO authenticated;
GRANT ALL ON FUNCTION public.register_stock_purchase(p_ingredient_id uuid, p_quantity numeric, p_unit_id uuid, p_unit_cost numeric, p_supplier_id uuid, p_batch_number text, p_expiry_date timestamp with time zone, p_reference_number text, p_notes text) TO service_role;


--
-- Name: FUNCTION search_products(p_tenant_id uuid, p_search_term text, p_limit integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.search_products(p_tenant_id uuid, p_search_term text, p_limit integer) TO anon;
GRANT ALL ON FUNCTION public.search_products(p_tenant_id uuid, p_search_term text, p_limit integer) TO authenticated;
GRANT ALL ON FUNCTION public.search_products(p_tenant_id uuid, p_search_term text, p_limit integer) TO service_role;


--
-- Name: FUNCTION set_order_number(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.set_order_number() TO anon;
GRANT ALL ON FUNCTION public.set_order_number() TO authenticated;
GRANT ALL ON FUNCTION public.set_order_number() TO service_role;


--
-- Name: FUNCTION set_tenant_id_for_group_relations(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.set_tenant_id_for_group_relations() TO anon;
GRANT ALL ON FUNCTION public.set_tenant_id_for_group_relations() TO authenticated;
GRANT ALL ON FUNCTION public.set_tenant_id_for_group_relations() TO service_role;


--
-- Name: FUNCTION set_tenant_id_for_modifier_groups(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.set_tenant_id_for_modifier_groups() TO anon;
GRANT ALL ON FUNCTION public.set_tenant_id_for_modifier_groups() TO authenticated;
GRANT ALL ON FUNCTION public.set_tenant_id_for_modifier_groups() TO service_role;


--
-- Name: FUNCTION set_tenant_id_for_modifiers(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.set_tenant_id_for_modifiers() TO anon;
GRANT ALL ON FUNCTION public.set_tenant_id_for_modifiers() TO authenticated;
GRANT ALL ON FUNCTION public.set_tenant_id_for_modifiers() TO service_role;


--
-- Name: FUNCTION sparsevec_cmp(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_cmp(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_cmp(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_cmp(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_cmp(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION sparsevec_eq(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_eq(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_eq(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_eq(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_eq(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION sparsevec_ge(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_ge(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_ge(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_ge(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_ge(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION sparsevec_gt(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_gt(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_gt(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_gt(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_gt(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION sparsevec_l2_squared_distance(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_l2_squared_distance(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_l2_squared_distance(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_l2_squared_distance(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_l2_squared_distance(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION sparsevec_le(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_le(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_le(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_le(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_le(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION sparsevec_lt(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_lt(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_lt(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_lt(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_lt(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION sparsevec_ne(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_ne(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_ne(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_ne(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_ne(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION sparsevec_negative_inner_product(public.sparsevec, public.sparsevec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sparsevec_negative_inner_product(public.sparsevec, public.sparsevec) TO postgres;
GRANT ALL ON FUNCTION public.sparsevec_negative_inner_product(public.sparsevec, public.sparsevec) TO anon;
GRANT ALL ON FUNCTION public.sparsevec_negative_inner_product(public.sparsevec, public.sparsevec) TO authenticated;
GRANT ALL ON FUNCTION public.sparsevec_negative_inner_product(public.sparsevec, public.sparsevec) TO service_role;


--
-- Name: FUNCTION subscription_has_module_access(subscription_uuid uuid, module_code character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.subscription_has_module_access(subscription_uuid uuid, module_code character varying) TO anon;
GRANT ALL ON FUNCTION public.subscription_has_module_access(subscription_uuid uuid, module_code character varying) TO authenticated;
GRANT ALL ON FUNCTION public.subscription_has_module_access(subscription_uuid uuid, module_code character varying) TO service_role;


--
-- Name: FUNCTION subvector(public.halfvec, integer, integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.subvector(public.halfvec, integer, integer) TO postgres;
GRANT ALL ON FUNCTION public.subvector(public.halfvec, integer, integer) TO anon;
GRANT ALL ON FUNCTION public.subvector(public.halfvec, integer, integer) TO authenticated;
GRANT ALL ON FUNCTION public.subvector(public.halfvec, integer, integer) TO service_role;


--
-- Name: FUNCTION subvector(public.vector, integer, integer); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.subvector(public.vector, integer, integer) TO postgres;
GRANT ALL ON FUNCTION public.subvector(public.vector, integer, integer) TO anon;
GRANT ALL ON FUNCTION public.subvector(public.vector, integer, integer) TO authenticated;
GRANT ALL ON FUNCTION public.subvector(public.vector, integer, integer) TO service_role;


--
-- Name: FUNCTION sync_plan_modules_to_subscription(subscription_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.sync_plan_modules_to_subscription(subscription_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.sync_plan_modules_to_subscription(subscription_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.sync_plan_modules_to_subscription(subscription_uuid uuid) TO service_role;


--
-- Name: FUNCTION trigger_set_timestamp_search_terms(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.trigger_set_timestamp_search_terms() TO anon;
GRANT ALL ON FUNCTION public.trigger_set_timestamp_search_terms() TO authenticated;
GRANT ALL ON FUNCTION public.trigger_set_timestamp_search_terms() TO service_role;


--
-- Name: FUNCTION update_account_balance(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_account_balance() TO anon;
GRANT ALL ON FUNCTION public.update_account_balance() TO authenticated;
GRANT ALL ON FUNCTION public.update_account_balance() TO service_role;


--
-- Name: FUNCTION update_cart_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_cart_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_cart_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_cart_updated_at() TO service_role;


--
-- Name: FUNCTION update_company_vehicle_current_user(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_company_vehicle_current_user() TO anon;
GRANT ALL ON FUNCTION public.update_company_vehicle_current_user() TO authenticated;
GRANT ALL ON FUNCTION public.update_company_vehicle_current_user() TO service_role;


--
-- Name: FUNCTION update_delivery_person_rating_stats(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_delivery_person_rating_stats() TO anon;
GRANT ALL ON FUNCTION public.update_delivery_person_rating_stats() TO authenticated;
GRANT ALL ON FUNCTION public.update_delivery_person_rating_stats() TO service_role;


--
-- Name: FUNCTION update_delivery_person_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_delivery_person_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_delivery_person_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_delivery_person_updated_at() TO service_role;


--
-- Name: FUNCTION update_delivery_person_wallet_balance(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_delivery_person_wallet_balance() TO anon;
GRANT ALL ON FUNCTION public.update_delivery_person_wallet_balance() TO authenticated;
GRANT ALL ON FUNCTION public.update_delivery_person_wallet_balance() TO service_role;


--
-- Name: FUNCTION update_modifier_availability(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_modifier_availability() TO anon;
GRANT ALL ON FUNCTION public.update_modifier_availability() TO authenticated;
GRANT ALL ON FUNCTION public.update_modifier_availability() TO service_role;


--
-- Name: FUNCTION update_notifications_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_notifications_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_notifications_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_notifications_updated_at() TO service_role;


--
-- Name: FUNCTION update_product_cost_trigger(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_product_cost_trigger() TO anon;
GRANT ALL ON FUNCTION public.update_product_cost_trigger() TO authenticated;
GRANT ALL ON FUNCTION public.update_product_cost_trigger() TO service_role;


--
-- Name: FUNCTION update_reviews_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_reviews_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_reviews_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_reviews_updated_at() TO service_role;


--
-- Name: FUNCTION update_support_categories_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_support_categories_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_support_categories_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_support_categories_updated_at() TO service_role;


--
-- Name: FUNCTION update_support_faq_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_support_faq_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_support_faq_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_support_faq_updated_at() TO service_role;


--
-- Name: FUNCTION update_support_tickets_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_support_tickets_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_support_tickets_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_support_tickets_updated_at() TO service_role;


--
-- Name: FUNCTION update_tenant_customer_stats(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_tenant_customer_stats() TO anon;
GRANT ALL ON FUNCTION public.update_tenant_customer_stats() TO authenticated;
GRANT ALL ON FUNCTION public.update_tenant_customer_stats() TO service_role;


--
-- Name: FUNCTION update_tenant_customer_stats_on_order(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_tenant_customer_stats_on_order() TO anon;
GRANT ALL ON FUNCTION public.update_tenant_customer_stats_on_order() TO authenticated;
GRANT ALL ON FUNCTION public.update_tenant_customer_stats_on_order() TO service_role;


--
-- Name: FUNCTION update_testimonials_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_testimonials_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_testimonials_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_testimonials_updated_at() TO service_role;


--
-- Name: FUNCTION update_updated_at_column(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_updated_at_column() TO anon;
GRANT ALL ON FUNCTION public.update_updated_at_column() TO authenticated;
GRANT ALL ON FUNCTION public.update_updated_at_column() TO service_role;


--
-- Name: FUNCTION update_user_settings_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_user_settings_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_user_settings_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_user_settings_updated_at() TO service_role;


--
-- Name: FUNCTION user_has_tenant_role(user_uuid uuid, tenant_uuid uuid, required_role text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.user_has_tenant_role(user_uuid uuid, tenant_uuid uuid, required_role text) TO anon;
GRANT ALL ON FUNCTION public.user_has_tenant_role(user_uuid uuid, tenant_uuid uuid, required_role text) TO authenticated;
GRANT ALL ON FUNCTION public.user_has_tenant_role(user_uuid uuid, tenant_uuid uuid, required_role text) TO service_role;


--
-- Name: FUNCTION user_is_tenant_admin(user_uuid uuid, tenant_uuid uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.user_is_tenant_admin(user_uuid uuid, tenant_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.user_is_tenant_admin(user_uuid uuid, tenant_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.user_is_tenant_admin(user_uuid uuid, tenant_uuid uuid) TO service_role;


--
-- Name: FUNCTION validate_tenant_access(p_tenant_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.validate_tenant_access(p_tenant_id uuid) TO anon;
GRANT ALL ON FUNCTION public.validate_tenant_access(p_tenant_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.validate_tenant_access(p_tenant_id uuid) TO service_role;


--
-- Name: FUNCTION vector_accum(double precision[], public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_accum(double precision[], public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_accum(double precision[], public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_accum(double precision[], public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_accum(double precision[], public.vector) TO service_role;


--
-- Name: FUNCTION vector_add(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_add(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_add(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_add(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_add(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_avg(double precision[]); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_avg(double precision[]) TO postgres;
GRANT ALL ON FUNCTION public.vector_avg(double precision[]) TO anon;
GRANT ALL ON FUNCTION public.vector_avg(double precision[]) TO authenticated;
GRANT ALL ON FUNCTION public.vector_avg(double precision[]) TO service_role;


--
-- Name: FUNCTION vector_cmp(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_cmp(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_cmp(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_cmp(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_cmp(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_combine(double precision[], double precision[]); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_combine(double precision[], double precision[]) TO postgres;
GRANT ALL ON FUNCTION public.vector_combine(double precision[], double precision[]) TO anon;
GRANT ALL ON FUNCTION public.vector_combine(double precision[], double precision[]) TO authenticated;
GRANT ALL ON FUNCTION public.vector_combine(double precision[], double precision[]) TO service_role;


--
-- Name: FUNCTION vector_concat(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_concat(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_concat(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_concat(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_concat(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_dims(public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_dims(public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.vector_dims(public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.vector_dims(public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.vector_dims(public.halfvec) TO service_role;


--
-- Name: FUNCTION vector_dims(public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_dims(public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_dims(public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_dims(public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_dims(public.vector) TO service_role;


--
-- Name: FUNCTION vector_eq(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_eq(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_eq(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_eq(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_eq(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_ge(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_ge(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_ge(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_ge(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_ge(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_gt(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_gt(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_gt(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_gt(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_gt(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_l2_squared_distance(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_l2_squared_distance(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_l2_squared_distance(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_l2_squared_distance(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_l2_squared_distance(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_le(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_le(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_le(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_le(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_le(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_lt(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_lt(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_lt(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_lt(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_lt(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_mul(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_mul(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_mul(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_mul(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_mul(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_ne(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_ne(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_ne(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_ne(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_ne(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_negative_inner_product(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_negative_inner_product(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_negative_inner_product(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_negative_inner_product(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_negative_inner_product(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_norm(public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_norm(public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_norm(public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_norm(public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_norm(public.vector) TO service_role;


--
-- Name: FUNCTION vector_spherical_distance(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_spherical_distance(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_spherical_distance(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_spherical_distance(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_spherical_distance(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION vector_sub(public.vector, public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.vector_sub(public.vector, public.vector) TO postgres;
GRANT ALL ON FUNCTION public.vector_sub(public.vector, public.vector) TO anon;
GRANT ALL ON FUNCTION public.vector_sub(public.vector, public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.vector_sub(public.vector, public.vector) TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: FUNCTION _crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO service_role;


--
-- Name: FUNCTION create_secret(new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO service_role;


--
-- Name: FUNCTION update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO service_role;


--
-- Name: FUNCTION avg(public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.avg(public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.avg(public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.avg(public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.avg(public.halfvec) TO service_role;


--
-- Name: FUNCTION avg(public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.avg(public.vector) TO postgres;
GRANT ALL ON FUNCTION public.avg(public.vector) TO anon;
GRANT ALL ON FUNCTION public.avg(public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.avg(public.vector) TO service_role;


--
-- Name: FUNCTION sum(public.halfvec); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sum(public.halfvec) TO postgres;
GRANT ALL ON FUNCTION public.sum(public.halfvec) TO anon;
GRANT ALL ON FUNCTION public.sum(public.halfvec) TO authenticated;
GRANT ALL ON FUNCTION public.sum(public.halfvec) TO service_role;


--
-- Name: FUNCTION sum(public.vector); Type: ACL; Schema: public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION public.sum(public.vector) TO postgres;
GRANT ALL ON FUNCTION public.sum(public.vector) TO anon;
GRANT ALL ON FUNCTION public.sum(public.vector) TO authenticated;
GRANT ALL ON FUNCTION public.sum(public.vector) TO service_role;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE oauth_authorizations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.oauth_authorizations TO postgres;
GRANT ALL ON TABLE auth.oauth_authorizations TO dashboard_user;


--
-- Name: TABLE oauth_clients; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.oauth_clients TO postgres;
GRANT ALL ON TABLE auth.oauth_clients TO dashboard_user;


--
-- Name: TABLE oauth_consents; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.oauth_consents TO postgres;
GRANT ALL ON TABLE auth.oauth_consents TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements_info FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: TABLE accounts; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.accounts TO anon;
GRANT ALL ON TABLE public.accounts TO authenticated;
GRANT ALL ON TABLE public.accounts TO service_role;


--
-- Name: TABLE orders; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.orders TO anon;
GRANT ALL ON TABLE public.orders TO authenticated;
GRANT ALL ON TABLE public.orders TO service_role;


--
-- Name: TABLE users; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.users TO anon;
GRANT ALL ON TABLE public.users TO authenticated;
GRANT ALL ON TABLE public.users TO service_role;


--
-- Name: TABLE active_orders; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.active_orders TO anon;
GRANT ALL ON TABLE public.active_orders TO authenticated;
GRANT ALL ON TABLE public.active_orders TO service_role;


--
-- Name: TABLE api_keys; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.api_keys TO anon;
GRANT ALL ON TABLE public.api_keys TO authenticated;
GRANT ALL ON TABLE public.api_keys TO service_role;


--
-- Name: TABLE company_vehicles; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.company_vehicles TO anon;
GRANT ALL ON TABLE public.company_vehicles TO authenticated;
GRANT ALL ON TABLE public.company_vehicles TO service_role;


--
-- Name: TABLE delivery_persons; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_persons TO anon;
GRANT ALL ON TABLE public.delivery_persons TO authenticated;
GRANT ALL ON TABLE public.delivery_persons TO service_role;


--
-- Name: TABLE tenants; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.tenants TO anon;
GRANT ALL ON TABLE public.tenants TO authenticated;
GRANT ALL ON TABLE public.tenants TO service_role;


--
-- Name: TABLE available_company_vehicles; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.available_company_vehicles TO anon;
GRANT ALL ON TABLE public.available_company_vehicles TO authenticated;
GRANT ALL ON TABLE public.available_company_vehicles TO service_role;


--
-- Name: TABLE banners; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.banners TO anon;
GRANT ALL ON TABLE public.banners TO authenticated;
GRANT ALL ON TABLE public.banners TO service_role;


--
-- Name: SEQUENCE batch_sequence; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.batch_sequence TO anon;
GRANT ALL ON SEQUENCE public.batch_sequence TO authenticated;
GRANT ALL ON SEQUENCE public.batch_sequence TO service_role;


--
-- Name: TABLE brands; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.brands TO anon;
GRANT ALL ON TABLE public.brands TO authenticated;
GRANT ALL ON TABLE public.brands TO service_role;


--
-- Name: TABLE business_settings; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.business_settings TO anon;
GRANT ALL ON TABLE public.business_settings TO authenticated;
GRANT ALL ON TABLE public.business_settings TO service_role;


--
-- Name: TABLE business_types; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.business_types TO anon;
GRANT ALL ON TABLE public.business_types TO authenticated;
GRANT ALL ON TABLE public.business_types TO service_role;


--
-- Name: TABLE order_item_modifiers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.order_item_modifiers TO anon;
GRANT ALL ON TABLE public.order_item_modifiers TO authenticated;
GRANT ALL ON TABLE public.order_item_modifiers TO service_role;


--
-- Name: TABLE order_items; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.order_items TO anon;
GRANT ALL ON TABLE public.order_items TO authenticated;
GRANT ALL ON TABLE public.order_items TO service_role;


--
-- Name: TABLE products; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.products TO anon;
GRANT ALL ON TABLE public.products TO authenticated;
GRANT ALL ON TABLE public.products TO service_role;


--
-- Name: TABLE cart_with_modifiers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cart_with_modifiers TO anon;
GRANT ALL ON TABLE public.cart_with_modifiers TO authenticated;
GRANT ALL ON TABLE public.cart_with_modifiers TO service_role;


--
-- Name: TABLE cash_register_sessions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cash_register_sessions TO anon;
GRANT ALL ON TABLE public.cash_register_sessions TO authenticated;
GRANT ALL ON TABLE public.cash_register_sessions TO service_role;


--
-- Name: TABLE cash_register_transactions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.cash_register_transactions TO anon;
GRANT ALL ON TABLE public.cash_register_transactions TO authenticated;
GRANT ALL ON TABLE public.cash_register_transactions TO service_role;


--
-- Name: TABLE categories; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.categories TO anon;
GRANT ALL ON TABLE public.categories TO authenticated;
GRANT ALL ON TABLE public.categories TO service_role;


--
-- Name: TABLE category_printer_mapping; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.category_printer_mapping TO anon;
GRANT ALL ON TABLE public.category_printer_mapping TO authenticated;
GRANT ALL ON TABLE public.category_printer_mapping TO service_role;


--
-- Name: TABLE chat_messages; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.chat_messages TO anon;
GRANT ALL ON TABLE public.chat_messages TO authenticated;
GRANT ALL ON TABLE public.chat_messages TO service_role;


--
-- Name: SEQUENCE chat_messages_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.chat_messages_id_seq TO anon;
GRANT ALL ON SEQUENCE public.chat_messages_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.chat_messages_id_seq TO service_role;


--
-- Name: TABLE chats; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.chats TO anon;
GRANT ALL ON TABLE public.chats TO authenticated;
GRANT ALL ON TABLE public.chats TO service_role;


--
-- Name: SEQUENCE chats_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.chats_id_seq TO anon;
GRANT ALL ON SEQUENCE public.chats_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.chats_id_seq TO service_role;


--
-- Name: TABLE company_vehicle_usage; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.company_vehicle_usage TO anon;
GRANT ALL ON TABLE public.company_vehicle_usage TO authenticated;
GRANT ALL ON TABLE public.company_vehicle_usage TO service_role;


--
-- Name: TABLE company_vehicle_usage_summary; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.company_vehicle_usage_summary TO anon;
GRANT ALL ON TABLE public.company_vehicle_usage_summary TO authenticated;
GRANT ALL ON TABLE public.company_vehicle_usage_summary TO service_role;


--
-- Name: TABLE countries; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.countries TO anon;
GRANT ALL ON TABLE public.countries TO authenticated;
GRANT ALL ON TABLE public.countries TO service_role;


--
-- Name: TABLE dados_cliente; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.dados_cliente TO anon;
GRANT ALL ON TABLE public.dados_cliente TO authenticated;
GRANT ALL ON TABLE public.dados_cliente TO service_role;


--
-- Name: SEQUENCE dados_cliente_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.dados_cliente_id_seq TO anon;
GRANT ALL ON SEQUENCE public.dados_cliente_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.dados_cliente_id_seq TO service_role;


--
-- Name: TABLE delivery_addresses; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_addresses TO anon;
GRANT ALL ON TABLE public.delivery_addresses TO authenticated;
GRANT ALL ON TABLE public.delivery_addresses TO service_role;


--
-- Name: TABLE delivery_orders; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_orders TO anon;
GRANT ALL ON TABLE public.delivery_orders TO authenticated;
GRANT ALL ON TABLE public.delivery_orders TO service_role;


--
-- Name: TABLE delivery_person_ratings; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_person_ratings TO anon;
GRANT ALL ON TABLE public.delivery_person_ratings TO authenticated;
GRANT ALL ON TABLE public.delivery_person_ratings TO service_role;


--
-- Name: TABLE delivery_person_stats; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_person_stats TO anon;
GRANT ALL ON TABLE public.delivery_person_stats TO authenticated;
GRANT ALL ON TABLE public.delivery_person_stats TO service_role;


--
-- Name: TABLE delivery_person_status_history; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_person_status_history TO anon;
GRANT ALL ON TABLE public.delivery_person_status_history TO authenticated;
GRANT ALL ON TABLE public.delivery_person_status_history TO service_role;


--
-- Name: TABLE delivery_person_transactions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_person_transactions TO anon;
GRANT ALL ON TABLE public.delivery_person_transactions TO authenticated;
GRANT ALL ON TABLE public.delivery_person_transactions TO service_role;


--
-- Name: TABLE delivery_person_vehicles; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_person_vehicles TO anon;
GRANT ALL ON TABLE public.delivery_person_vehicles TO authenticated;
GRANT ALL ON TABLE public.delivery_person_vehicles TO service_role;


--
-- Name: TABLE delivery_person_vehicles_summary; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_person_vehicles_summary TO anon;
GRANT ALL ON TABLE public.delivery_person_vehicles_summary TO authenticated;
GRANT ALL ON TABLE public.delivery_person_vehicles_summary TO service_role;


--
-- Name: TABLE delivery_person_wallet; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_person_wallet TO anon;
GRANT ALL ON TABLE public.delivery_person_wallet TO authenticated;
GRANT ALL ON TABLE public.delivery_person_wallet TO service_role;


--
-- Name: TABLE delivery_persons_with_tenants; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_persons_with_tenants TO anon;
GRANT ALL ON TABLE public.delivery_persons_with_tenants TO authenticated;
GRANT ALL ON TABLE public.delivery_persons_with_tenants TO service_role;


--
-- Name: TABLE delivery_settings; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_settings TO anon;
GRANT ALL ON TABLE public.delivery_settings TO authenticated;
GRANT ALL ON TABLE public.delivery_settings TO service_role;


--
-- Name: TABLE delivery_vehicle_assignments; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_vehicle_assignments TO anon;
GRANT ALL ON TABLE public.delivery_vehicle_assignments TO authenticated;
GRANT ALL ON TABLE public.delivery_vehicle_assignments TO service_role;


--
-- Name: TABLE delivery_zone_ceps; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_zone_ceps TO anon;
GRANT ALL ON TABLE public.delivery_zone_ceps TO authenticated;
GRANT ALL ON TABLE public.delivery_zone_ceps TO service_role;


--
-- Name: TABLE delivery_zones; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.delivery_zones TO anon;
GRANT ALL ON TABLE public.delivery_zones TO authenticated;
GRANT ALL ON TABLE public.delivery_zones TO service_role;


--
-- Name: TABLE discounts; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.discounts TO anon;
GRANT ALL ON TABLE public.discounts TO authenticated;
GRANT ALL ON TABLE public.discounts TO service_role;


--
-- Name: TABLE documents; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.documents TO anon;
GRANT ALL ON TABLE public.documents TO authenticated;
GRANT ALL ON TABLE public.documents TO service_role;


--
-- Name: SEQUENCE documents_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.documents_id_seq TO anon;
GRANT ALL ON SEQUENCE public.documents_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.documents_id_seq TO service_role;


--
-- Name: TABLE event_images; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.event_images TO anon;
GRANT ALL ON TABLE public.event_images TO authenticated;
GRANT ALL ON TABLE public.event_images TO service_role;


--
-- Name: TABLE events; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.events TO anon;
GRANT ALL ON TABLE public.events TO authenticated;
GRANT ALL ON TABLE public.events TO service_role;


--
-- Name: TABLE financial_categories; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.financial_categories TO anon;
GRANT ALL ON TABLE public.financial_categories TO authenticated;
GRANT ALL ON TABLE public.financial_categories TO service_role;


--
-- Name: TABLE financial_transactions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.financial_transactions TO anon;
GRANT ALL ON TABLE public.financial_transactions TO authenticated;
GRANT ALL ON TABLE public.financial_transactions TO service_role;


--
-- Name: TABLE freight_quotes; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.freight_quotes TO anon;
GRANT ALL ON TABLE public.freight_quotes TO authenticated;
GRANT ALL ON TABLE public.freight_quotes TO service_role;


--
-- Name: TABLE gallery_images; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.gallery_images TO anon;
GRANT ALL ON TABLE public.gallery_images TO authenticated;
GRANT ALL ON TABLE public.gallery_images TO service_role;


--
-- Name: TABLE group_discounts; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.group_discounts TO anon;
GRANT ALL ON TABLE public.group_discounts TO authenticated;
GRANT ALL ON TABLE public.group_discounts TO service_role;


--
-- Name: TABLE ingredient_cost_history; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.ingredient_cost_history TO anon;
GRANT ALL ON TABLE public.ingredient_cost_history TO authenticated;
GRANT ALL ON TABLE public.ingredient_cost_history TO service_role;


--
-- Name: TABLE ingredients; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.ingredients TO anon;
GRANT ALL ON TABLE public.ingredients TO authenticated;
GRANT ALL ON TABLE public.ingredients TO service_role;


--
-- Name: TABLE installments; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.installments TO anon;
GRANT ALL ON TABLE public.installments TO authenticated;
GRANT ALL ON TABLE public.installments TO service_role;


--
-- Name: TABLE languages; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.languages TO anon;
GRANT ALL ON TABLE public.languages TO authenticated;
GRANT ALL ON TABLE public.languages TO service_role;


--
-- Name: TABLE measurement_units; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.measurement_units TO anon;
GRANT ALL ON TABLE public.measurement_units TO authenticated;
GRANT ALL ON TABLE public.measurement_units TO service_role;


--
-- Name: TABLE media_items; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.media_items TO anon;
GRANT ALL ON TABLE public.media_items TO authenticated;
GRANT ALL ON TABLE public.media_items TO service_role;


--
-- Name: TABLE menu_items; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.menu_items TO anon;
GRANT ALL ON TABLE public.menu_items TO authenticated;
GRANT ALL ON TABLE public.menu_items TO service_role;


--
-- Name: TABLE product_modifiers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_modifiers TO anon;
GRANT ALL ON TABLE public.product_modifiers TO authenticated;
GRANT ALL ON TABLE public.product_modifiers TO service_role;


--
-- Name: TABLE modifiers_with_ingredients; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.modifiers_with_ingredients TO anon;
GRANT ALL ON TABLE public.modifiers_with_ingredients TO authenticated;
GRANT ALL ON TABLE public.modifiers_with_ingredients TO service_role;


--
-- Name: TABLE modules; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.modules TO anon;
GRANT ALL ON TABLE public.modules TO authenticated;
GRANT ALL ON TABLE public.modules TO service_role;


--
-- Name: TABLE n8n_chat_histories; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.n8n_chat_histories TO anon;
GRANT ALL ON TABLE public.n8n_chat_histories TO authenticated;
GRANT ALL ON TABLE public.n8n_chat_histories TO service_role;


--
-- Name: SEQUENCE n8n_chat_histories_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.n8n_chat_histories_id_seq TO anon;
GRANT ALL ON SEQUENCE public.n8n_chat_histories_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.n8n_chat_histories_id_seq TO service_role;


--
-- Name: TABLE news; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.news TO anon;
GRANT ALL ON TABLE public.news TO authenticated;
GRANT ALL ON TABLE public.news TO service_role;


--
-- Name: TABLE notification_recipients; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.notification_recipients TO anon;
GRANT ALL ON TABLE public.notification_recipients TO authenticated;
GRANT ALL ON TABLE public.notification_recipients TO service_role;


--
-- Name: TABLE notifications; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.notifications TO anon;
GRANT ALL ON TABLE public.notifications TO authenticated;
GRANT ALL ON TABLE public.notifications TO service_role;


--
-- Name: TABLE notifications_stats; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.notifications_stats TO anon;
GRANT ALL ON TABLE public.notifications_stats TO authenticated;
GRANT ALL ON TABLE public.notifications_stats TO service_role;


--
-- Name: TABLE office_especialities; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.office_especialities TO anon;
GRANT ALL ON TABLE public.office_especialities TO authenticated;
GRANT ALL ON TABLE public.office_especialities TO service_role;


--
-- Name: TABLE offices; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.offices TO anon;
GRANT ALL ON TABLE public.offices TO authenticated;
GRANT ALL ON TABLE public.offices TO service_role;


--
-- Name: SEQUENCE order_sequence; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.order_sequence TO anon;
GRANT ALL ON SEQUENCE public.order_sequence TO authenticated;
GRANT ALL ON SEQUENCE public.order_sequence TO service_role;


--
-- Name: TABLE order_session_item_modifiers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.order_session_item_modifiers TO anon;
GRANT ALL ON TABLE public.order_session_item_modifiers TO authenticated;
GRANT ALL ON TABLE public.order_session_item_modifiers TO service_role;


--
-- Name: TABLE order_session_items; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.order_session_items TO anon;
GRANT ALL ON TABLE public.order_session_items TO authenticated;
GRANT ALL ON TABLE public.order_session_items TO service_role;


--
-- Name: TABLE order_sessions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.order_sessions TO anon;
GRANT ALL ON TABLE public.order_sessions TO authenticated;
GRANT ALL ON TABLE public.order_sessions TO service_role;


--
-- Name: TABLE order_summary; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.order_summary TO anon;
GRANT ALL ON TABLE public.order_summary TO authenticated;
GRANT ALL ON TABLE public.order_summary TO service_role;


--
-- Name: TABLE payments; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.payments TO anon;
GRANT ALL ON TABLE public.payments TO authenticated;
GRANT ALL ON TABLE public.payments TO service_role;


--
-- Name: TABLE plan_modules; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.plan_modules TO anon;
GRANT ALL ON TABLE public.plan_modules TO authenticated;
GRANT ALL ON TABLE public.plan_modules TO service_role;


--
-- Name: TABLE plans; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.plans TO anon;
GRANT ALL ON TABLE public.plans TO authenticated;
GRANT ALL ON TABLE public.plans TO service_role;


--
-- Name: TABLE printer_stations; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.printer_stations TO anon;
GRANT ALL ON TABLE public.printer_stations TO authenticated;
GRANT ALL ON TABLE public.printer_stations TO service_role;


--
-- Name: TABLE product_categories; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_categories TO anon;
GRANT ALL ON TABLE public.product_categories TO authenticated;
GRANT ALL ON TABLE public.product_categories TO service_role;


--
-- Name: TABLE product_composition_eligibility; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_composition_eligibility TO anon;
GRANT ALL ON TABLE public.product_composition_eligibility TO authenticated;
GRANT ALL ON TABLE public.product_composition_eligibility TO service_role;


--
-- Name: TABLE product_compositions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_compositions TO anon;
GRANT ALL ON TABLE public.product_compositions TO authenticated;
GRANT ALL ON TABLE public.product_compositions TO service_role;


--
-- Name: TABLE product_cost_history; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_cost_history TO anon;
GRANT ALL ON TABLE public.product_cost_history TO authenticated;
GRANT ALL ON TABLE public.product_cost_history TO service_role;


--
-- Name: TABLE product_images; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_images TO anon;
GRANT ALL ON TABLE public.product_images TO authenticated;
GRANT ALL ON TABLE public.product_images TO service_role;


--
-- Name: TABLE product_ingredient_compositions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_ingredient_compositions TO anon;
GRANT ALL ON TABLE public.product_ingredient_compositions TO authenticated;
GRANT ALL ON TABLE public.product_ingredient_compositions TO service_role;


--
-- Name: TABLE product_ingredient_quantities; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_ingredient_quantities TO anon;
GRANT ALL ON TABLE public.product_ingredient_quantities TO authenticated;
GRANT ALL ON TABLE public.product_ingredient_quantities TO service_role;


--
-- Name: TABLE product_modifier_group_modifiers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_modifier_group_modifiers TO anon;
GRANT ALL ON TABLE public.product_modifier_group_modifiers TO authenticated;
GRANT ALL ON TABLE public.product_modifier_group_modifiers TO service_role;


--
-- Name: TABLE product_modifier_group_relations; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_modifier_group_relations TO anon;
GRANT ALL ON TABLE public.product_modifier_group_relations TO authenticated;
GRANT ALL ON TABLE public.product_modifier_group_relations TO service_role;


--
-- Name: TABLE product_modifier_groups; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_modifier_groups TO anon;
GRANT ALL ON TABLE public.product_modifier_groups TO authenticated;
GRANT ALL ON TABLE public.product_modifier_groups TO service_role;


--
-- Name: TABLE product_modifier_prices; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_modifier_prices TO anon;
GRANT ALL ON TABLE public.product_modifier_prices TO authenticated;
GRANT ALL ON TABLE public.product_modifier_prices TO service_role;


--
-- Name: TABLE product_prices; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_prices TO anon;
GRANT ALL ON TABLE public.product_prices TO authenticated;
GRANT ALL ON TABLE public.product_prices TO service_role;


--
-- Name: TABLE reviews; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.reviews TO anon;
GRANT ALL ON TABLE public.reviews TO authenticated;
GRANT ALL ON TABLE public.reviews TO service_role;


--
-- Name: TABLE product_reviews_stats; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_reviews_stats TO anon;
GRANT ALL ON TABLE public.product_reviews_stats TO authenticated;
GRANT ALL ON TABLE public.product_reviews_stats TO service_role;


--
-- Name: TABLE product_stock; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_stock TO anon;
GRANT ALL ON TABLE public.product_stock TO authenticated;
GRANT ALL ON TABLE public.product_stock TO service_role;


--
-- Name: TABLE product_stock_batches; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_stock_batches TO anon;
GRANT ALL ON TABLE public.product_stock_batches TO authenticated;
GRANT ALL ON TABLE public.product_stock_batches TO service_role;


--
-- Name: TABLE product_stock_movements; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_stock_movements TO anon;
GRANT ALL ON TABLE public.product_stock_movements TO authenticated;
GRANT ALL ON TABLE public.product_stock_movements TO service_role;


--
-- Name: TABLE product_variants; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.product_variants TO anon;
GRANT ALL ON TABLE public.product_variants TO authenticated;
GRANT ALL ON TABLE public.product_variants TO service_role;


--
-- Name: TABLE profiles; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.profiles TO anon;
GRANT ALL ON TABLE public.profiles TO authenticated;
GRANT ALL ON TABLE public.profiles TO service_role;


--
-- Name: TABLE search_history; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.search_history TO anon;
GRANT ALL ON TABLE public.search_history TO authenticated;
GRANT ALL ON TABLE public.search_history TO service_role;


--
-- Name: TABLE search_terms; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.search_terms TO anon;
GRANT ALL ON TABLE public.search_terms TO authenticated;
GRANT ALL ON TABLE public.search_terms TO service_role;


--
-- Name: TABLE service_availability; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.service_availability TO anon;
GRANT ALL ON TABLE public.service_availability TO authenticated;
GRANT ALL ON TABLE public.service_availability TO service_role;


--
-- Name: TABLE service_booking_items; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.service_booking_items TO anon;
GRANT ALL ON TABLE public.service_booking_items TO authenticated;
GRANT ALL ON TABLE public.service_booking_items TO service_role;


--
-- Name: TABLE service_bookings; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.service_bookings TO anon;
GRANT ALL ON TABLE public.service_bookings TO authenticated;
GRANT ALL ON TABLE public.service_bookings TO service_role;


--
-- Name: TABLE service_categories; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.service_categories TO anon;
GRANT ALL ON TABLE public.service_categories TO authenticated;
GRANT ALL ON TABLE public.service_categories TO service_role;


--
-- Name: TABLE service_provider_services; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.service_provider_services TO anon;
GRANT ALL ON TABLE public.service_provider_services TO authenticated;
GRANT ALL ON TABLE public.service_provider_services TO service_role;


--
-- Name: TABLE service_providers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.service_providers TO anon;
GRANT ALL ON TABLE public.service_providers TO authenticated;
GRANT ALL ON TABLE public.service_providers TO service_role;


--
-- Name: TABLE service_reviews; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.service_reviews TO anon;
GRANT ALL ON TABLE public.service_reviews TO authenticated;
GRANT ALL ON TABLE public.service_reviews TO service_role;


--
-- Name: TABLE services; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.services TO anon;
GRANT ALL ON TABLE public.services TO authenticated;
GRANT ALL ON TABLE public.services TO service_role;


--
-- Name: TABLE shipping; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.shipping TO anon;
GRANT ALL ON TABLE public.shipping TO authenticated;
GRANT ALL ON TABLE public.shipping TO service_role;


--
-- Name: TABLE shipping_providers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.shipping_providers TO anon;
GRANT ALL ON TABLE public.shipping_providers TO authenticated;
GRANT ALL ON TABLE public.shipping_providers TO service_role;


--
-- Name: TABLE shipping_services; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.shipping_services TO anon;
GRANT ALL ON TABLE public.shipping_services TO authenticated;
GRANT ALL ON TABLE public.shipping_services TO service_role;


--
-- Name: TABLE site_settings; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.site_settings TO anon;
GRANT ALL ON TABLE public.site_settings TO authenticated;
GRANT ALL ON TABLE public.site_settings TO service_role;


--
-- Name: TABLE social_media; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.social_media TO anon;
GRANT ALL ON TABLE public.social_media TO authenticated;
GRANT ALL ON TABLE public.social_media TO service_role;


--
-- Name: TABLE specialities; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.specialities TO anon;
GRANT ALL ON TABLE public.specialities TO authenticated;
GRANT ALL ON TABLE public.specialities TO service_role;


--
-- Name: TABLE stock_batches; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.stock_batches TO anon;
GRANT ALL ON TABLE public.stock_batches TO authenticated;
GRANT ALL ON TABLE public.stock_batches TO service_role;


--
-- Name: TABLE stock_movements; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.stock_movements TO anon;
GRANT ALL ON TABLE public.stock_movements TO authenticated;
GRANT ALL ON TABLE public.stock_movements TO service_role;


--
-- Name: TABLE subscription_modules; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.subscription_modules TO anon;
GRANT ALL ON TABLE public.subscription_modules TO authenticated;
GRANT ALL ON TABLE public.subscription_modules TO service_role;


--
-- Name: TABLE subscriptions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.subscriptions TO anon;
GRANT ALL ON TABLE public.subscriptions TO authenticated;
GRANT ALL ON TABLE public.subscriptions TO service_role;


--
-- Name: TABLE suppliers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.suppliers TO anon;
GRANT ALL ON TABLE public.suppliers TO authenticated;
GRANT ALL ON TABLE public.suppliers TO service_role;


--
-- Name: TABLE support_categories; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.support_categories TO anon;
GRANT ALL ON TABLE public.support_categories TO authenticated;
GRANT ALL ON TABLE public.support_categories TO service_role;


--
-- Name: TABLE support_faq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.support_faq TO anon;
GRANT ALL ON TABLE public.support_faq TO authenticated;
GRANT ALL ON TABLE public.support_faq TO service_role;


--
-- Name: TABLE support_ticket_ratings; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.support_ticket_ratings TO anon;
GRANT ALL ON TABLE public.support_ticket_ratings TO authenticated;
GRANT ALL ON TABLE public.support_ticket_ratings TO service_role;


--
-- Name: TABLE support_ticket_responses; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.support_ticket_responses TO anon;
GRANT ALL ON TABLE public.support_ticket_responses TO authenticated;
GRANT ALL ON TABLE public.support_ticket_responses TO service_role;


--
-- Name: TABLE support_tickets; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.support_tickets TO anon;
GRANT ALL ON TABLE public.support_tickets TO authenticated;
GRANT ALL ON TABLE public.support_tickets TO service_role;


--
-- Name: TABLE support_ticket_stats; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.support_ticket_stats TO anon;
GRANT ALL ON TABLE public.support_ticket_stats TO authenticated;
GRANT ALL ON TABLE public.support_ticket_stats TO service_role;


--
-- Name: TABLE support_tickets_with_user; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.support_tickets_with_user TO anon;
GRANT ALL ON TABLE public.support_tickets_with_user TO authenticated;
GRANT ALL ON TABLE public.support_tickets_with_user TO service_role;


--
-- Name: TABLE tables; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.tables TO anon;
GRANT ALL ON TABLE public.tables TO authenticated;
GRANT ALL ON TABLE public.tables TO service_role;


--
-- Name: TABLE tags; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.tags TO anon;
GRANT ALL ON TABLE public.tags TO authenticated;
GRANT ALL ON TABLE public.tags TO service_role;


--
-- Name: TABLE tenant_customers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.tenant_customers TO anon;
GRANT ALL ON TABLE public.tenant_customers TO authenticated;
GRANT ALL ON TABLE public.tenant_customers TO service_role;


--
-- Name: TABLE tenant_delivery_persons; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.tenant_delivery_persons TO anon;
GRANT ALL ON TABLE public.tenant_delivery_persons TO authenticated;
GRANT ALL ON TABLE public.tenant_delivery_persons TO service_role;


--
-- Name: TABLE tenant_invitations; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.tenant_invitations TO anon;
GRANT ALL ON TABLE public.tenant_invitations TO authenticated;
GRANT ALL ON TABLE public.tenant_invitations TO service_role;


--
-- Name: TABLE tenant_users; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.tenant_users TO anon;
GRANT ALL ON TABLE public.tenant_users TO authenticated;
GRANT ALL ON TABLE public.tenant_users TO service_role;


--
-- Name: TABLE testimonials; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.testimonials TO anon;
GRANT ALL ON TABLE public.testimonials TO authenticated;
GRANT ALL ON TABLE public.testimonials TO service_role;


--
-- Name: TABLE user_address; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_address TO anon;
GRANT ALL ON TABLE public.user_address TO authenticated;
GRANT ALL ON TABLE public.user_address TO service_role;


--
-- Name: TABLE user_cart; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_cart TO anon;
GRANT ALL ON TABLE public.user_cart TO authenticated;
GRANT ALL ON TABLE public.user_cart TO service_role;


--
-- Name: TABLE user_discounts; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_discounts TO anon;
GRANT ALL ON TABLE public.user_discounts TO authenticated;
GRANT ALL ON TABLE public.user_discounts TO service_role;


--
-- Name: TABLE user_favorites; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_favorites TO anon;
GRANT ALL ON TABLE public.user_favorites TO authenticated;
GRANT ALL ON TABLE public.user_favorites TO service_role;


--
-- Name: TABLE user_notifications; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_notifications TO anon;
GRANT ALL ON TABLE public.user_notifications TO authenticated;
GRANT ALL ON TABLE public.user_notifications TO service_role;


--
-- Name: TABLE user_profile; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_profile TO anon;
GRANT ALL ON TABLE public.user_profile TO authenticated;
GRANT ALL ON TABLE public.user_profile TO service_role;


--
-- Name: TABLE user_roles; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_roles TO anon;
GRANT ALL ON TABLE public.user_roles TO authenticated;
GRANT ALL ON TABLE public.user_roles TO service_role;


--
-- Name: TABLE waiters; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.waiters TO anon;
GRANT ALL ON TABLE public.waiters TO authenticated;
GRANT ALL ON TABLE public.waiters TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres WITH GRANT OPTION;


--
-- Name: TABLE buckets_analytics; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets_analytics TO service_role;
GRANT ALL ON TABLE storage.buckets_analytics TO authenticated;
GRANT ALL ON TABLE storage.buckets_analytics TO anon;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres WITH GRANT OPTION;


--
-- Name: TABLE prefixes; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.prefixes TO service_role;
GRANT ALL ON TABLE storage.prefixes TO authenticated;
GRANT ALL ON TABLE storage.prefixes TO anon;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;


--
-- Name: TABLE secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,REFERENCES,DELETE,TRUNCATE ON TABLE vault.secrets TO postgres WITH GRANT OPTION;
GRANT SELECT,DELETE ON TABLE vault.secrets TO service_role;


--
-- Name: TABLE decrypted_secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,REFERENCES,DELETE,TRUNCATE ON TABLE vault.decrypted_secrets TO postgres WITH GRANT OPTION;
GRANT SELECT,DELETE ON TABLE vault.decrypted_secrets TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO supabase_admin;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- Name: product_reviews_stats; Type: MATERIALIZED VIEW DATA; Schema: public; Owner: postgres
--

REFRESH MATERIALIZED VIEW public.product_reviews_stats;


--
-- PostgreSQL database dump complete
--

